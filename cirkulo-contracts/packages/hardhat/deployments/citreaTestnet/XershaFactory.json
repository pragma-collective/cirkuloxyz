{
  "address": "0x966F9F8d5DEB5b52B4c0843eb512612e109190cD",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "circleId",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum XershaFactory.PoolType",
          "name": "poolType",
          "type": "uint8"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "circleToPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "circleId",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "circleName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "goalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "createDonationPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "circleId",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "circleName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "contributionAmount",
          "type": "uint256"
        }
      ],
      "name": "createROSCA",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "circleId",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "circleName",
          "type": "string"
        }
      ],
      "name": "createSavingsPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPools",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "circleId",
          "type": "address"
        }
      ],
      "name": "getCirclePool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        }
      ],
      "name": "getPoolType",
      "outputs": [
        {
          "internalType": "enum XershaFactory.PoolType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalPools",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isValidPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolTypes",
      "outputs": [
        {
          "internalType": "enum XershaFactory.PoolType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5a4331ae8563a07fe35fe012f4d68b19f5debea2cbe300c16490c1a676750707",
  "receipt": {
    "to": null,
    "from": "0x8244c1645C1a7890Ef1F0E79AcCf817905Dbcba2",
    "contractAddress": "0x966F9F8d5DEB5b52B4c0843eb512612e109190cD",
    "transactionIndex": 1,
    "gasUsed": "5327533",
    "logsBloom": "0x
    "blockHash": "0x6dcbe985156ef2bb34366645b0a210b51a60100241e6de1fabacb436b4149171",
    "transactionHash": "0x5a4331ae8563a07fe35fe012f4d68b19f5debea2cbe300c16490c1a676750707",
    "logs": [],
    "blockNumber": 17125463,
    "cumulativeGasUsed": "5393512",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d2f85aa0823c3bb2825c4e8c2e4c3f5c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"circleId\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum XershaFactory.PoolType\",\"name\":\"poolType\",\"type\":\"uint8\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"circleToPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"circleId\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"circleName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"goalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"createDonationPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"circleId\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"circleName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"contributionAmount\",\"type\":\"uint256\"}],\"name\":\"createROSCA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"circleId\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"circleName\",\"type\":\"string\"}],\"name\":\"createSavingsPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"circleId\",\"type\":\"address\"}],\"name\":\"getCirclePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"getPoolType\",\"outputs\":[{\"internalType\":\"enum XershaFactory.PoolType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolTypes\",\"outputs\":[{\"internalType\":\"enum XershaFactory.PoolType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Enforces one pool per circle and tracks all deployed pools\",\"events\":{\"PoolCreated(address,address,address,uint8)\":{\"params\":{\"circleId\":\"The Lens.xyz circle contract address\",\"creator\":\"The address that created the pool\",\"poolAddress\":\"The address of the newly created pool\",\"poolType\":\"The type of pool created (ROSCA, SAVINGS, or DONATION)\"}}},\"kind\":\"dev\",\"methods\":{\"createDonationPool(address,string,address,uint256,uint256)\":{\"details\":\"Validates circle ID and ensures no duplicate pools for the same circle\",\"params\":{\"beneficiary\":\"The address that will receive the donated funds\",\"circleId\":\"The Lens.xyz circle contract address\",\"circleName\":\"The name of the circle\",\"deadline\":\"Unix timestamp when fundraising ends\",\"goalAmount\":\"The fundraising goal amount in wei\"},\"returns\":{\"_0\":\"The address of the newly created Donation pool\"}},\"createROSCA(address,string,uint256)\":{\"details\":\"Validates circle ID and ensures no duplicate pools for the same circle\",\"params\":{\"circleId\":\"The Lens.xyz circle contract address\",\"circleName\":\"The name of the circle\",\"contributionAmount\":\"Fixed amount each member must contribute per round\"},\"returns\":{\"_0\":\"The address of the newly created ROSCA pool\"}},\"createSavingsPool(address,string)\":{\"details\":\"Validates circle ID and ensures no duplicate pools for the same circle\",\"params\":{\"circleId\":\"The Lens.xyz circle contract address\",\"circleName\":\"The name of the circle\"},\"returns\":{\"_0\":\"The address of the newly created Savings pool\"}},\"getAllPools()\":{\"details\":\"Warning: This can be gas-intensive for large numbers of pools\",\"returns\":{\"_0\":\"Array of all pool addresses\"}},\"getCirclePool(address)\":{\"params\":{\"circleId\":\"The circle contract address\"},\"returns\":{\"_0\":\"The pool address, or zero address if no pool exists\"}},\"getPoolType(address)\":{\"params\":{\"poolAddress\":\"The pool address to query\"},\"returns\":{\"_0\":\"The PoolType enum value\"}},\"getTotalPools()\":{\"returns\":{\"_0\":\"The total pool count\"}}},\"title\":\"XershaFactory\",\"version\":1},\"userdoc\":{\"events\":{\"PoolCreated(address,address,address,uint8)\":{\"notice\":\"Emitted when a new pool is created\"}},\"kind\":\"user\",\"methods\":{\"allPools(uint256)\":{\"notice\":\"Array of all pools created by this factory\"},\"circleToPool(address)\":{\"notice\":\"Mapping from circle contract address to pool address\"},\"createDonationPool(address,string,address,uint256,uint256)\":{\"notice\":\"Creates a new Donation pool for group fundraising\"},\"createROSCA(address,string,uint256)\":{\"notice\":\"Creates a new ROSCA (Rotating Savings and Credit Association) pool\"},\"createSavingsPool(address,string)\":{\"notice\":\"Creates a new Savings pool for collective savings\"},\"getAllPools()\":{\"notice\":\"Gets all pool addresses created by this factory\"},\"getCirclePool(address)\":{\"notice\":\"Gets the pool address for a given circle\"},\"getPoolType(address)\":{\"notice\":\"Gets the pool type for a given pool address\"},\"getTotalPools()\":{\"notice\":\"Gets the total number of pools created by this factory\"},\"isValidPool(address)\":{\"notice\":\"Mapping to validate if an address is a legitimate pool created by this factory\"},\"poolTypes(address)\":{\"notice\":\"Mapping from pool address to pool type\"}},\"notice\":\"Factory contract for creating and managing Xersha pools\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/XershaFactory.sol\":\"XershaFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/XershaFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./pools/ROSCAPool.sol\\\";\\nimport \\\"./pools/SavingsPool.sol\\\";\\nimport \\\"./pools/DonationPool.sol\\\";\\n\\n/**\\n * @title XershaFactory\\n * @notice Factory contract for creating and managing Xersha pools\\n * @dev Enforces one pool per circle and tracks all deployed pools\\n */\\ncontract XershaFactory {\\n    // ========== Types ==========\\n\\n    enum PoolType {\\n        ROSCA,\\n        SAVINGS,\\n        DONATION\\n    }\\n\\n    // ========== State Variables ==========\\n\\n    /// @notice Mapping from circle contract address to pool address\\n    mapping(address => address) public circleToPool;\\n\\n    /// @notice Mapping to validate if an address is a legitimate pool created by this factory\\n    mapping(address => bool) public isValidPool;\\n\\n    /// @notice Mapping from pool address to pool type\\n    mapping(address => PoolType) public poolTypes;\\n\\n    /// @notice Array of all pools created by this factory\\n    address[] public allPools;\\n\\n    // ========== Events ==========\\n\\n    /**\\n     * @notice Emitted when a new pool is created\\n     * @param circleId The Lens.xyz circle contract address\\n     * @param poolAddress The address of the newly created pool\\n     * @param creator The address that created the pool\\n     * @param poolType The type of pool created (ROSCA, SAVINGS, or DONATION)\\n     */\\n    event PoolCreated(\\n        address indexed circleId,\\n        address indexed poolAddress,\\n        address indexed creator,\\n        PoolType poolType\\n    );\\n\\n    // ========== Pool Creation Functions ==========\\n\\n    /**\\n     * @notice Creates a new ROSCA (Rotating Savings and Credit Association) pool\\n     * @dev Validates circle ID and ensures no duplicate pools for the same circle\\n     * @param circleId The Lens.xyz circle contract address\\n     * @param circleName The name of the circle\\n     * @param contributionAmount Fixed amount each member must contribute per round\\n     * @return The address of the newly created ROSCA pool\\n     */\\n    function createROSCA(\\n        address circleId,\\n        string memory circleName,\\n        uint256 contributionAmount\\n    ) external returns (address) {\\n        _validateCircleId(circleId);\\n        require(circleToPool[circleId] == address(0), \\\"Circle already has pool\\\");\\n        require(contributionAmount > 0, \\\"Invalid contribution amount\\\");\\n\\n        // Deploy new ROSCA pool\\n        ROSCAPool pool = new ROSCAPool(msg.sender, circleId, circleName, contributionAmount);\\n\\n        address poolAddress = address(pool);\\n        _registerPool(circleId, poolAddress, PoolType.ROSCA);\\n\\n        emit PoolCreated(circleId, poolAddress, msg.sender, PoolType.ROSCA);\\n        return poolAddress;\\n    }\\n\\n    /**\\n     * @notice Creates a new Savings pool for collective savings\\n     * @dev Validates circle ID and ensures no duplicate pools for the same circle\\n     * @param circleId The Lens.xyz circle contract address\\n     * @param circleName The name of the circle\\n     * @return The address of the newly created Savings pool\\n     */\\n    function createSavingsPool(\\n        address circleId,\\n        string memory circleName\\n    ) external returns (address) {\\n        _validateCircleId(circleId);\\n        require(circleToPool[circleId] == address(0), \\\"Circle already has pool\\\");\\n\\n        // Deploy new Savings pool\\n        SavingsPool pool = new SavingsPool(msg.sender, circleId, circleName);\\n\\n        address poolAddress = address(pool);\\n        _registerPool(circleId, poolAddress, PoolType.SAVINGS);\\n\\n        emit PoolCreated(circleId, poolAddress, msg.sender, PoolType.SAVINGS);\\n        return poolAddress;\\n    }\\n\\n    /**\\n     * @notice Creates a new Donation pool for group fundraising\\n     * @dev Validates circle ID and ensures no duplicate pools for the same circle\\n     * @param circleId The Lens.xyz circle contract address\\n     * @param circleName The name of the circle\\n     * @param beneficiary The address that will receive the donated funds\\n     * @param goalAmount The fundraising goal amount in wei\\n     * @param deadline Unix timestamp when fundraising ends\\n     * @return The address of the newly created Donation pool\\n     */\\n    function createDonationPool(\\n        address circleId,\\n        string memory circleName,\\n        address beneficiary,\\n        uint256 goalAmount,\\n        uint256 deadline\\n    ) external returns (address) {\\n        _validateCircleId(circleId);\\n        require(circleToPool[circleId] == address(0), \\\"Circle already has pool\\\");\\n        require(beneficiary != address(0), \\\"Invalid beneficiary\\\");\\n        require(goalAmount > 0, \\\"Invalid goal\\\");\\n        require(deadline > block.timestamp, \\\"Invalid deadline\\\");\\n\\n        // Deploy new Donation pool\\n        DonationPool pool = new DonationPool(\\n            msg.sender,\\n            circleId,\\n            circleName,\\n            beneficiary,\\n            goalAmount,\\n            deadline\\n        );\\n\\n        address poolAddress = address(pool);\\n        _registerPool(circleId, poolAddress, PoolType.DONATION);\\n\\n        emit PoolCreated(circleId, poolAddress, msg.sender, PoolType.DONATION);\\n        return poolAddress;\\n    }\\n\\n    // ========== Internal Functions ==========\\n\\n    /**\\n     * @notice Validates that the circle ID is not the zero address\\n     * @dev Circle IDs can reference contracts on other chains (e.g., Lens circles on Polygon)\\n     * @param circleId The circle address to validate\\n     */\\n    function _validateCircleId(address circleId) private pure {\\n        require(circleId != address(0), \\\"Zero address not allowed\\\");\\n    }\\n\\n    /**\\n     * @notice Registers a newly created pool in the factory's tracking systems\\n     * @param circleId The circle contract address\\n     * @param poolAddress The address of the newly created pool\\n     * @param poolType The type of pool (ROSCA, SAVINGS, or DONATION)\\n     */\\n    function _registerPool(address circleId, address poolAddress, PoolType poolType) private {\\n        circleToPool[circleId] = poolAddress;\\n        isValidPool[poolAddress] = true;\\n        poolTypes[poolAddress] = poolType;\\n        allPools.push(poolAddress);\\n    }\\n\\n    // ========== View Functions ==========\\n\\n    /**\\n     * @notice Gets the pool address for a given circle\\n     * @param circleId The circle contract address\\n     * @return The pool address, or zero address if no pool exists\\n     */\\n    function getCirclePool(address circleId) external view returns (address) {\\n        return circleToPool[circleId];\\n    }\\n\\n    /**\\n     * @notice Gets the total number of pools created by this factory\\n     * @return The total pool count\\n     */\\n    function getTotalPools() external view returns (uint256) {\\n        return allPools.length;\\n    }\\n\\n    /**\\n     * @notice Gets all pool addresses created by this factory\\n     * @dev Warning: This can be gas-intensive for large numbers of pools\\n     * @return Array of all pool addresses\\n     */\\n    function getAllPools() external view returns (address[] memory) {\\n        return allPools;\\n    }\\n\\n    /**\\n     * @notice Gets the pool type for a given pool address\\n     * @param poolAddress The pool address to query\\n     * @return The PoolType enum value\\n     */\\n    function getPoolType(address poolAddress) external view returns (PoolType) {\\n        require(isValidPool[poolAddress], \\\"Invalid pool address\\\");\\n        return poolTypes[poolAddress];\\n    }\\n}\\n\",\"keccak256\":\"0xcb7afce418e0b1ba8d9259c0b250d1dd9acb2c8ee7c6d32c672f386b9dbacc0a\",\"license\":\"MIT\"},\"contracts/interfaces/IXershaPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IXershaPool\\n * @notice Base interface for all Xersha pool types\\n * @dev Common interface elements shared across ROSCA, Savings, and Donation pools\\n */\\ninterface IXershaPool {\\n    /**\\n     * @notice Returns the address of the circle (Lens.xyz contract) this pool belongs to\\n     * @return The circle contract address\\n     */\\n    function circleId() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the user who created this pool\\n     * @return The creator's address\\n     */\\n    function creator() external view returns (address);\\n\\n    /**\\n     * @notice Returns the human-readable name of the circle\\n     * @return The circle name\\n     */\\n    function circleName() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns whether the pool is currently active\\n     * @return True if pool is active, false otherwise\\n     */\\n    function isActive() external view returns (bool);\\n\\n    /**\\n     * @notice Returns the list of all members in the pool\\n     * @return Array of member addresses\\n     */\\n    function getMembers() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the total number of members in the pool\\n     * @return Member count\\n     */\\n    function getMemberCount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd2c7c0badc538eded859db0878717a051e963062f67e0130fa55168c5d898c9f\",\"license\":\"MIT\"},\"contracts/pools/DonationPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"../interfaces/IXershaPool.sol\\\";\\n\\n/**\\n * @title DonationPool\\n * @notice Fundraising pool where circle members donate toward a specific goal and beneficiary\\n * @dev Includes refund mechanism if goal is not met by deadline\\n */\\ncontract DonationPool is IXershaPool, ReentrancyGuard, Pausable {\\n    // ========== State Variables ==========\\n\\n    /// @notice Address of the user who created this pool\\n    address public creator;\\n\\n    /// @notice Address of the Lens.xyz circle contract\\n    address public circleId;\\n\\n    /// @notice Human-readable name of the circle\\n    string public circleName;\\n\\n    /// @notice Address that will receive the donated funds\\n    address public beneficiary;\\n\\n    /// @notice Target fundraising amount in wei\\n    uint256 public goalAmount;\\n\\n    /// @notice Deadline for fundraising as Unix timestamp\\n    uint256 public deadline;\\n\\n    /// @notice Total amount raised so far\\n    uint256 public totalRaised;\\n\\n    /// @notice Individual donation amounts per member\\n    mapping(address => uint256) public donations;\\n\\n    /// @notice Array of all members in the pool\\n    address[] public members;\\n\\n    /// @notice Mapping to check if an address is a member\\n    mapping(address => bool) public isMember;\\n\\n    /// @notice Mapping to check if an address has been invited\\n    mapping(address => bool) public isInvited;\\n\\n    /// @notice Array of addresses that have donated\\n    address[] public donors;\\n\\n    /// @notice Whether funds have been released to beneficiary\\n    bool public fundsReleased;\\n\\n    /// @notice Whether the pool is currently active\\n    bool public isActive;\\n\\n    /// @notice Whether refunds are enabled (goal not met by deadline)\\n    bool public refundsEnabled;\\n\\n    // ========== Events ==========\\n\\n    event PoolCreated(\\n        address indexed circleId,\\n        address indexed creator,\\n        address beneficiary,\\n        uint256 goal,\\n        uint256 deadline\\n    );\\n    event MemberInvited(address indexed member, address indexed invitedBy);\\n    event MemberJoined(address indexed member);\\n    event DonationMade(address indexed donor, uint256 amount);\\n    event GoalReached(uint256 totalRaised);\\n    event FundsReleased(address indexed beneficiary, uint256 amount);\\n    event RefundsEnabled(uint256 timestamp);\\n    event RefundClaimed(address indexed donor, uint256 amount);\\n\\n    // ========== Modifiers ==========\\n\\n    modifier onlyCreator() {\\n        require(msg.sender == creator, \\\"Only creator can call this\\\");\\n        _;\\n    }\\n\\n    modifier onlyMember() {\\n        require(isMember[msg.sender], \\\"Not a member\\\");\\n        _;\\n    }\\n\\n    modifier onlyInvited() {\\n        require(isInvited[msg.sender], \\\"Not invited\\\");\\n        _;\\n    }\\n\\n    // ========== Constructor ==========\\n\\n    /**\\n     * @notice Creates a new Donation pool\\n     * @param _creator Address of the user creating the pool\\n     * @param _circleId Address of the Lens.xyz circle contract\\n     * @param _circleName Name of the circle\\n     * @param _beneficiary Address that will receive the funds\\n     * @param _goalAmount Target fundraising amount in wei\\n     * @param _deadline Deadline as Unix timestamp\\n     */\\n    constructor(\\n        address _creator,\\n        address _circleId,\\n        string memory _circleName,\\n        address _beneficiary,\\n        uint256 _goalAmount,\\n        uint256 _deadline\\n    ) {\\n        require(_beneficiary != address(0), \\\"Invalid beneficiary\\\");\\n        require(_goalAmount > 0, \\\"Goal must be positive\\\");\\n        require(_deadline > block.timestamp, \\\"Deadline must be future\\\");\\n\\n        creator = _creator;\\n        circleId = _circleId;\\n        circleName = _circleName;\\n        beneficiary = _beneficiary;\\n        goalAmount = _goalAmount;\\n        deadline = _deadline;\\n        isActive = true;\\n\\n        // Creator automatically becomes a member\\n        members.push(_creator);\\n        isMember[_creator] = true;\\n        isInvited[_creator] = true;\\n\\n        emit PoolCreated(_circleId, _creator, _beneficiary, _goalAmount, _deadline);\\n        emit MemberJoined(_creator);\\n    }\\n\\n    // ========== Member Management ==========\\n\\n    /**\\n     * @notice Invites a new member to the pool\\n     * @dev Only creator can invite members\\n     * @param member Address of the member to invite\\n     */\\n    function inviteMember(address member) external onlyCreator whenNotPaused {\\n        require(!isInvited[member], \\\"Already invited\\\");\\n        require(member != address(0), \\\"Invalid address\\\");\\n\\n        isInvited[member] = true;\\n        emit MemberInvited(member, creator);\\n    }\\n\\n    /**\\n     * @notice Allows an invited member to join the pool\\n     */\\n    function joinPool() external onlyInvited whenNotPaused {\\n        require(!isMember[msg.sender], \\\"Already a member\\\");\\n\\n        members.push(msg.sender);\\n        isMember[msg.sender] = true;\\n\\n        emit MemberJoined(msg.sender);\\n    }\\n\\n    // ========== Donations ==========\\n\\n    /**\\n     * @notice Allows a member to donate to the pool\\n     * @dev Only members can donate, must be before deadline\\n     */\\n    function donate() external payable onlyMember whenNotPaused nonReentrant {\\n        require(msg.value > 0, \\\"Must donate something\\\");\\n        require(block.timestamp <= deadline, \\\"Deadline passed\\\");\\n        require(!fundsReleased, \\\"Funds already released\\\");\\n        require(!refundsEnabled, \\\"Refunds enabled, cannot donate\\\");\\n        require(isActive, \\\"Pool not active\\\");\\n\\n        // Track first-time donors\\n        if (donations[msg.sender] == 0) {\\n            donors.push(msg.sender);\\n        }\\n\\n        donations[msg.sender] += msg.value;\\n        totalRaised += msg.value;\\n\\n        emit DonationMade(msg.sender, msg.value);\\n\\n        // Check if goal reached\\n        if (totalRaised >= goalAmount) {\\n            emit GoalReached(totalRaised);\\n        }\\n    }\\n\\n    // ========== Fund Management ==========\\n\\n    /**\\n     * @notice Releases funds to the beneficiary\\n     * @dev Only creator can release, can only release after goal met or deadline passed\\n     */\\n    function releaseFunds() external onlyCreator whenNotPaused nonReentrant {\\n        require(!fundsReleased, \\\"Already released\\\");\\n        require(!refundsEnabled, \\\"Refunds enabled\\\");\\n        require(\\n            totalRaised >= goalAmount || block.timestamp > deadline,\\n            \\\"Goal not met and deadline not passed\\\"\\n        );\\n\\n        fundsReleased = true;\\n        isActive = false;\\n\\n        uint256 amount = address(this).balance;\\n\\n        // Use call instead of transfer for better compatibility\\n        (bool success, ) = payable(beneficiary).call{value: amount}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n\\n        emit FundsReleased(beneficiary, amount);\\n    }\\n\\n    /**\\n     * @notice Enables refunds if goal was not met by deadline\\n     * @dev Only creator can enable refunds, only after deadline if goal not met\\n     */\\n    function enableRefunds() external onlyCreator whenNotPaused {\\n        require(!fundsReleased, \\\"Funds already released\\\");\\n        require(!refundsEnabled, \\\"Refunds already enabled\\\");\\n        require(block.timestamp > deadline, \\\"Deadline not passed\\\");\\n        require(totalRaised < goalAmount, \\\"Goal was met\\\");\\n\\n        refundsEnabled = true;\\n        isActive = false;\\n\\n        emit RefundsEnabled(block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Allows a donor to claim their refund\\n     * @dev Only available if refunds are enabled\\n     */\\n    function claimRefund() external whenNotPaused nonReentrant {\\n        require(refundsEnabled, \\\"Refunds not enabled\\\");\\n        require(donations[msg.sender] > 0, \\\"Nothing to refund\\\");\\n\\n        uint256 amount = donations[msg.sender];\\n        donations[msg.sender] = 0;\\n        totalRaised -= amount;\\n\\n        // Use call instead of transfer for better compatibility\\n        (bool success, ) = payable(msg.sender).call{value: amount}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n\\n        emit RefundClaimed(msg.sender, amount);\\n    }\\n\\n    // ========== Emergency Functions ==========\\n\\n    /**\\n     * @notice Pauses the contract in case of emergency\\n     * @dev Only creator can pause\\n     */\\n    function pause() external onlyCreator {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpauses the contract\\n     * @dev Only creator can unpause\\n     */\\n    function unpause() external onlyCreator {\\n        _unpause();\\n    }\\n\\n    // ========== View Functions ==========\\n\\n    /**\\n     * @notice Gets a member's total donation amount\\n     * @param donor Address of the donor\\n     * @return Donation amount in wei\\n     */\\n    function getDonation(address donor) external view returns (uint256) {\\n        return donations[donor];\\n    }\\n\\n    /**\\n     * @notice Gets the total number of members\\n     * @return Member count\\n     */\\n    function getMemberCount() external view returns (uint256) {\\n        return members.length;\\n    }\\n\\n    /**\\n     * @notice Gets all members\\n     * @return Array of member addresses\\n     */\\n    function getMembers() external view returns (address[] memory) {\\n        return members;\\n    }\\n\\n    /**\\n     * @notice Gets the total number of donors\\n     * @return Donor count\\n     */\\n    function getDonorCount() external view returns (uint256) {\\n        return donors.length;\\n    }\\n\\n    /**\\n     * @notice Gets all donors\\n     * @return Array of donor addresses\\n     */\\n    function getDonors() external view returns (address[] memory) {\\n        return donors;\\n    }\\n\\n    /**\\n     * @notice Gets the time remaining until deadline\\n     * @return Seconds remaining, or 0 if deadline passed\\n     */\\n    function getTimeRemaining() external view returns (uint256) {\\n        if (block.timestamp >= deadline) {\\n            return 0;\\n        }\\n        return deadline - block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Gets the current fundraising progress\\n     * @return raised Current amount raised\\n     * @return goal Goal amount\\n     */\\n    function getProgress() external view returns (uint256 raised, uint256 goal) {\\n        return (totalRaised, goalAmount);\\n    }\\n\\n    /**\\n     * @notice Checks if the fundraising goal has been reached\\n     * @return True if goal reached, false otherwise\\n     */\\n    function isGoalReached() external view returns (bool) {\\n        return totalRaised >= goalAmount;\\n    }\\n\\n    /**\\n     * @notice Gets the contract's current balance\\n     * @return Balance in wei\\n     */\\n    function getContractBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n}\\n\",\"keccak256\":\"0x5ca31fd76394fc8fae27d86c751c31a70349b7be8afadb37447ad759227f32bd\",\"license\":\"MIT\"},\"contracts/pools/ROSCAPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"../interfaces/IXershaPool.sol\\\";\\n\\n/**\\n * @title ROSCAPool\\n * @notice Rotating Savings and Credit Association pool implementation\\n * @dev Members contribute fixed amounts each round, one member receives the pot each round\\n * Payout order is provided off-chain by the creator for fairness and transparency\\n */\\ncontract ROSCAPool is IXershaPool, ReentrancyGuard, Pausable {\\n    // ========== Constants ==========\\n\\n    /// @notice Duration of each cycle/round in seconds (30 days)\\n    uint256 public constant CYCLE_DURATION = 30 days;\\n\\n    /// @notice Minimum number of members required to start a ROSCA\\n    uint8 public constant MIN_MEMBERS = 5;\\n\\n    /// @notice Maximum number of members allowed in a ROSCA\\n    uint8 public constant MAX_MEMBERS = 12;\\n\\n    // ========== State Variables ==========\\n\\n    /// @notice Address of the user who created this pool\\n    address public creator;\\n\\n    /// @notice Address of the Lens.xyz circle contract\\n    address public circleId;\\n\\n    /// @notice Human-readable name of the circle\\n    string public circleName;\\n\\n    /// @notice Fixed contribution amount per round in wei\\n    uint256 public contributionAmount;\\n\\n    /// @notice Array of all members in the pool\\n    address[] public members;\\n\\n    /// @notice Mapping to check if an address is a member\\n    mapping(address => bool) public isMember;\\n\\n    /// @notice Mapping to check if an address has been invited\\n    mapping(address => bool) public isInvited;\\n\\n    /// @notice Total amount contributed by each member across all rounds\\n    mapping(address => uint256) public totalContributed;\\n\\n    /// @notice Array defining the order in which members receive payouts\\n    address[] public payoutOrder;\\n\\n    /// @notice Current round number (1-indexed)\\n    uint8 public currentRound;\\n\\n    /// @notice Whether the current round's payout has been completed\\n    bool public currentRoundPaidOut;\\n\\n    /// @notice Mapping to track which members have received their payout\\n    mapping(address => bool) public hasReceivedPayout;\\n\\n    /// @notice Tracks whether a member has paid for a specific round\\n    mapping(address => mapping(uint8 => bool)) public hasPaid;\\n\\n    /// @notice Timestamp when the ROSCA was started\\n    uint256 public roscaStartTime;\\n\\n    /// @notice Timestamp when the current round started\\n    uint256 public currentRoundStartTime;\\n\\n    /// @notice Whether the ROSCA is currently active\\n    bool public isActive;\\n\\n    /// @notice Whether the ROSCA has completed all rounds\\n    bool public isComplete;\\n\\n    // ========== Events ==========\\n\\n    event ROSCACreated(address indexed circleId, address indexed creator, uint256 contributionAmount);\\n    event MemberInvited(address indexed member, address indexed invitedBy);\\n    event MemberJoined(address indexed member, uint256 timestamp);\\n    event ROSCAStarted(address[] payoutOrder, uint256 startTime);\\n    event ContributionMade(address indexed member, uint8 round, uint256 amount);\\n    event AllMembersContributed(uint8 round);\\n    event PayoutTriggered(address indexed recipient, uint256 amount, uint8 round);\\n    event RoundStarted(uint8 round, uint256 startTime);\\n    event ROSCACompleted(uint256 completionTime);\\n\\n    // ========== Modifiers ==========\\n\\n    modifier onlyCreator() {\\n        require(msg.sender == creator, \\\"Only creator can call this\\\");\\n        _;\\n    }\\n\\n    modifier onlyMember() {\\n        require(isMember[msg.sender], \\\"Not a member\\\");\\n        _;\\n    }\\n\\n    modifier onlyInvited() {\\n        require(isInvited[msg.sender], \\\"Not invited\\\");\\n        _;\\n    }\\n\\n    modifier poolActive() {\\n        require(isActive && !isComplete, \\\"Pool not active\\\");\\n        _;\\n    }\\n\\n    // ========== Constructor ==========\\n\\n    /**\\n     * @notice Creates a new ROSCA pool\\n     * @param _creator Address of the user creating the pool\\n     * @param _circleId Address of the Lens.xyz circle contract\\n     * @param _circleName Name of the circle\\n     * @param _contributionAmount Fixed contribution amount per round\\n     */\\n    constructor(\\n        address _creator,\\n        address _circleId,\\n        string memory _circleName,\\n        uint256 _contributionAmount\\n    ) {\\n        require(_contributionAmount > 0, \\\"Invalid contribution amount\\\");\\n\\n        creator = _creator;\\n        circleId = _circleId;\\n        circleName = _circleName;\\n        contributionAmount = _contributionAmount;\\n\\n        // Creator automatically becomes a member\\n        members.push(_creator);\\n        isMember[_creator] = true;\\n        isInvited[_creator] = true;\\n\\n        emit ROSCACreated(_circleId, _creator, _contributionAmount);\\n        emit MemberJoined(_creator, block.timestamp);\\n    }\\n\\n    // ========== Member Management ==========\\n\\n    /**\\n     * @notice Invites a new member to the ROSCA\\n     * @dev Only creator can invite, only before ROSCA starts\\n     * @param member Address of the member to invite\\n     */\\n    function inviteMember(address member) external onlyCreator whenNotPaused {\\n        require(!isActive, \\\"Cannot invite after ROSCA starts\\\");\\n        require(!isInvited[member], \\\"Already invited\\\");\\n        require(members.length < MAX_MEMBERS, \\\"Max members reached\\\");\\n\\n        isInvited[member] = true;\\n        emit MemberInvited(member, creator);\\n    }\\n\\n    /**\\n     * @notice Allows an invited member to join the pool\\n     * @dev Can only join before ROSCA starts\\n     */\\n    function joinPool() external onlyInvited whenNotPaused {\\n        require(!isActive, \\\"Cannot join after ROSCA starts\\\");\\n        require(!isMember[msg.sender], \\\"Already a member\\\");\\n\\n        members.push(msg.sender);\\n        isMember[msg.sender] = true;\\n\\n        emit MemberJoined(msg.sender, block.timestamp);\\n    }\\n\\n    // ========== ROSCA Lifecycle ==========\\n\\n    /**\\n     * @notice Starts the ROSCA with a provided payout order\\n     * @dev Only creator can start, requires min members, payout order generated off-chain\\n     * @param _payoutOrder Array of addresses defining payout order (must include all members exactly once)\\n     */\\n    function startROSCA(address[] calldata _payoutOrder) external onlyCreator whenNotPaused {\\n        require(!isActive, \\\"Already started\\\");\\n        require(members.length >= MIN_MEMBERS, \\\"Not enough members\\\");\\n        require(_payoutOrder.length == members.length, \\\"Invalid payout order length\\\");\\n\\n        // Validate payout order contains all members exactly once\\n        _validatePayoutOrder(_payoutOrder);\\n\\n        payoutOrder = _payoutOrder;\\n        isActive = true;\\n        currentRound = 1;\\n        roscaStartTime = block.timestamp;\\n        currentRoundStartTime = block.timestamp;\\n\\n        emit ROSCAStarted(_payoutOrder, block.timestamp);\\n        emit RoundStarted(1, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Validates that payout order contains all members exactly once\\n     * @param _payoutOrder The payout order array to validate\\n     */\\n    function _validatePayoutOrder(address[] calldata _payoutOrder) private view {\\n        // Validate each member is in the payout order and check for duplicates\\n        for (uint256 i = 0; i < _payoutOrder.length; i++) {\\n            address recipient = _payoutOrder[i];\\n            require(isMember[recipient], \\\"Payout order contains non-member\\\");\\n\\n            // Check for duplicates by using a simple loop (gas-efficient for small arrays)\\n            for (uint256 j = i + 1; j < _payoutOrder.length; j++) {\\n                require(_payoutOrder[i] != _payoutOrder[j], \\\"Duplicate in payout order\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows a member to contribute for the current round\\n     * @dev Must send exact contribution amount, can only contribute once per round\\n     */\\n    function contribute() external payable onlyMember poolActive whenNotPaused nonReentrant {\\n        require(msg.value == contributionAmount, \\\"Incorrect amount\\\");\\n        require(!hasPaid[msg.sender][currentRound], \\\"Already contributed\\\");\\n        require(currentRound <= members.length, \\\"All rounds complete\\\");\\n\\n        hasPaid[msg.sender][currentRound] = true;\\n        totalContributed[msg.sender] += msg.value;\\n\\n        emit ContributionMade(msg.sender, currentRound, msg.value);\\n\\n        if (_everyonePaid()) {\\n            emit AllMembersContributed(currentRound);\\n        }\\n    }\\n\\n    /**\\n     * @notice Triggers the payout for the current round\\n     * @dev Only the designated recipient can trigger their own payout\\n     * Requires all members to have contributed for the current round\\n     */\\n    function triggerPayout() external poolActive whenNotPaused nonReentrant {\\n        require(_everyonePaid(), \\\"Not everyone has paid\\\");\\n        require(!currentRoundPaidOut, \\\"Round already paid out\\\");\\n\\n        address recipient = payoutOrder[currentRound - 1];\\n        require(msg.sender == recipient, \\\"Only recipient can claim payout\\\");\\n\\n        currentRoundPaidOut = true;\\n        hasReceivedPayout[recipient] = true;\\n\\n        uint256 payoutAmount = contributionAmount * members.length;\\n\\n        // Use call instead of transfer for better compatibility\\n        (bool success, ) = payable(recipient).call{value: payoutAmount}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n\\n        emit PayoutTriggered(recipient, payoutAmount, currentRound);\\n\\n        // Check if ROSCA is complete\\n        if (currentRound >= members.length) {\\n            isComplete = true;\\n            isActive = false;\\n            emit ROSCACompleted(block.timestamp);\\n        }\\n    }\\n\\n    /**\\n     * @notice Starts the next round after the cycle duration has passed\\n     * @dev Any member can call this after the 30-day cycle is complete\\n     */\\n    function startNextRound() external onlyMember whenNotPaused {\\n        require(isActive && !isComplete, \\\"ROSCA not active\\\");\\n        require(currentRoundPaidOut, \\\"Current round not paid out\\\");\\n        require(currentRound < members.length, \\\"All rounds complete\\\");\\n        require(\\n            block.timestamp >= currentRoundStartTime + CYCLE_DURATION,\\n            \\\"30-day cycle not complete\\\"\\n        );\\n\\n        currentRound++;\\n        currentRoundStartTime = block.timestamp;\\n        currentRoundPaidOut = false;\\n\\n        emit RoundStarted(currentRound, block.timestamp);\\n    }\\n\\n    // ========== Emergency Functions ==========\\n\\n    /**\\n     * @notice Pauses the contract in case of emergency\\n     * @dev Only creator can pause\\n     */\\n    function pause() external onlyCreator {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpauses the contract\\n     * @dev Only creator can unpause\\n     */\\n    function unpause() external onlyCreator {\\n        _unpause();\\n    }\\n\\n    // ========== View Functions ==========\\n\\n    /**\\n     * @notice Checks if everyone has paid for the current round\\n     * @return True if all members have contributed, false otherwise\\n     */\\n    function everyonePaid() external view returns (bool) {\\n        return _everyonePaid();\\n    }\\n\\n    /**\\n     * @notice Internal function to check if everyone has paid\\n     * @return True if all members have contributed, false otherwise\\n     */\\n    function _everyonePaid() private view returns (bool) {\\n        for (uint256 i = 0; i < members.length; i++) {\\n            if (!hasPaid[members[i]][currentRound]) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Gets the current round's recipient\\n     * @return Address of the member who should receive payout this round\\n     */\\n    function getCurrentRecipient() external view returns (address) {\\n        if (currentRound == 0 || currentRound > payoutOrder.length) {\\n            return address(0);\\n        }\\n        return payoutOrder[currentRound - 1];\\n    }\\n\\n    /**\\n     * @notice Gets the total number of members\\n     * @return Member count\\n     */\\n    function getMemberCount() external view returns (uint256) {\\n        return members.length;\\n    }\\n\\n    /**\\n     * @notice Gets all members\\n     * @return Array of member addresses\\n     */\\n    function getMembers() external view returns (address[] memory) {\\n        return members;\\n    }\\n\\n    /**\\n     * @notice Gets the complete payout order\\n     * @return Array of addresses in payout order\\n     */\\n    function getPayoutOrder() external view returns (address[] memory) {\\n        return payoutOrder;\\n    }\\n\\n    /**\\n     * @notice Gets list of members who have contributed in the current round\\n     * @return Array of addresses who have paid\\n     */\\n    function getRoundContributors() external view returns (address[] memory) {\\n        uint256 contributorCount = 0;\\n\\n        // Count contributors\\n        for (uint256 i = 0; i < members.length; i++) {\\n            if (hasPaid[members[i]][currentRound]) {\\n                contributorCount++;\\n            }\\n        }\\n\\n        // Build contributor array\\n        address[] memory contributors = new address[](contributorCount);\\n        uint256 index = 0;\\n\\n        for (uint256 i = 0; i < members.length; i++) {\\n            if (hasPaid[members[i]][currentRound]) {\\n                contributors[index] = members[i];\\n                index++;\\n            }\\n        }\\n\\n        return contributors;\\n    }\\n\\n    /**\\n     * @notice Gets the contract's current balance\\n     * @return Balance in wei\\n     */\\n    function getBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n}\\n\",\"keccak256\":\"0xc53a4b0c2e4ca06122521b9d456cce8b5aa3a20d93da44a2921f407329401476\",\"license\":\"MIT\"},\"contracts/pools/SavingsPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"../interfaces/IXershaPool.sol\\\";\\n\\n/**\\n * @title SavingsPool\\n * @notice Collective savings pool where members can deposit and withdraw freely\\n * @dev Members maintain individual balances and can set collective savings goals\\n */\\ncontract SavingsPool is IXershaPool, ReentrancyGuard, Pausable {\\n    // ========== State Variables ==========\\n\\n    /// @notice Address of the user who created this pool\\n    address public creator;\\n\\n    /// @notice Address of the Lens.xyz circle contract\\n    address public circleId;\\n\\n    /// @notice Human-readable name of the circle\\n    string public circleName;\\n\\n    /// @notice Individual balances for each member\\n    mapping(address => uint256) public balances;\\n\\n    /// @notice Total amount saved across all members\\n    uint256 public totalSaved;\\n\\n    /// @notice Array of all members in the pool\\n    address[] public members;\\n\\n    /// @notice Mapping to check if an address is a member\\n    mapping(address => bool) public isMember;\\n\\n    /// @notice Mapping to check if an address has been invited\\n    mapping(address => bool) public isInvited;\\n\\n    /// @notice Optional target savings amount set by creator\\n    uint256 public targetAmount;\\n\\n    /// @notice Optional target date for reaching the goal\\n    uint256 public targetDate;\\n\\n    /// @notice Whether the pool is currently active\\n    bool public isActive;\\n\\n    // ========== Events ==========\\n\\n    event PoolCreated(address indexed circleId, address indexed creator);\\n    event MemberInvited(address indexed member, address indexed invitedBy);\\n    event MemberJoined(address indexed member);\\n    event Deposited(address indexed member, uint256 amount);\\n    event Withdrawn(address indexed member, uint256 amount);\\n    event TargetSet(uint256 amount, uint256 date);\\n    event PoolClosed(uint256 timestamp);\\n\\n    // ========== Modifiers ==========\\n\\n    modifier onlyCreator() {\\n        require(msg.sender == creator, \\\"Only creator can call this\\\");\\n        _;\\n    }\\n\\n    modifier onlyMember() {\\n        require(isMember[msg.sender], \\\"Not a member\\\");\\n        _;\\n    }\\n\\n    modifier onlyInvited() {\\n        require(isInvited[msg.sender], \\\"Not invited\\\");\\n        _;\\n    }\\n\\n    modifier poolIsActive() {\\n        require(isActive, \\\"Pool not active\\\");\\n        _;\\n    }\\n\\n    // ========== Constructor ==========\\n\\n    /**\\n     * @notice Creates a new Savings pool\\n     * @param _creator Address of the user creating the pool\\n     * @param _circleId Address of the Lens.xyz circle contract\\n     * @param _circleName Name of the circle\\n     */\\n    constructor(address _creator, address _circleId, string memory _circleName) {\\n        creator = _creator;\\n        circleId = _circleId;\\n        circleName = _circleName;\\n        isActive = true;\\n\\n        // Creator automatically becomes a member\\n        members.push(_creator);\\n        isMember[_creator] = true;\\n        isInvited[_creator] = true;\\n\\n        emit PoolCreated(_circleId, _creator);\\n        emit MemberJoined(_creator);\\n    }\\n\\n    // ========== Member Management ==========\\n\\n    /**\\n     * @notice Invites a new member to the pool\\n     * @dev Only creator can invite members\\n     * @param member Address of the member to invite\\n     */\\n    function inviteMember(address member) external onlyCreator whenNotPaused {\\n        require(!isInvited[member], \\\"Already invited\\\");\\n        require(member != address(0), \\\"Invalid address\\\");\\n\\n        isInvited[member] = true;\\n        emit MemberInvited(member, creator);\\n    }\\n\\n    /**\\n     * @notice Allows an invited member to join the pool\\n     */\\n    function joinPool() external onlyInvited whenNotPaused {\\n        require(!isMember[msg.sender], \\\"Already a member\\\");\\n\\n        members.push(msg.sender);\\n        isMember[msg.sender] = true;\\n\\n        emit MemberJoined(msg.sender);\\n    }\\n\\n    // ========== Deposits & Withdrawals ==========\\n\\n    /**\\n     * @notice Allows a member to deposit funds into their savings\\n     * @dev Amount is tracked in member's individual balance\\n     */\\n    function deposit() external payable onlyMember poolIsActive whenNotPaused nonReentrant {\\n        require(msg.value > 0, \\\"Must deposit something\\\");\\n\\n        balances[msg.sender] += msg.value;\\n        totalSaved += msg.value;\\n\\n        emit Deposited(msg.sender, msg.value);\\n    }\\n\\n    /**\\n     * @notice Allows a member to withdraw from their savings balance\\n     * @param amount Amount to withdraw in wei\\n     */\\n    function withdraw(uint256 amount) external onlyMember whenNotPaused nonReentrant {\\n        require(amount > 0, \\\"Must withdraw something\\\");\\n        require(balances[msg.sender] >= amount, \\\"Insufficient balance\\\");\\n\\n        balances[msg.sender] -= amount;\\n        totalSaved -= amount;\\n\\n        // Use call instead of transfer for better compatibility\\n        (bool success, ) = payable(msg.sender).call{value: amount}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    // ========== Goal Management ==========\\n\\n    /**\\n     * @notice Sets or updates the savings goal for the pool\\n     * @dev Only creator can set goals\\n     * @param _amount Target savings amount in wei\\n     * @param _date Target date as Unix timestamp\\n     */\\n    function setTarget(uint256 _amount, uint256 _date) external onlyCreator whenNotPaused {\\n        require(_amount > 0, \\\"Target amount must be positive\\\");\\n        require(_date > block.timestamp, \\\"Target date must be in future\\\");\\n\\n        targetAmount = _amount;\\n        targetDate = _date;\\n\\n        emit TargetSet(_amount, _date);\\n    }\\n\\n    // ========== Pool Management ==========\\n\\n    /**\\n     * @notice Closes the pool, preventing further deposits\\n     * @dev Only creator can close. Members can still withdraw their balances.\\n     */\\n    function closePool() external onlyCreator whenNotPaused {\\n        isActive = false;\\n        emit PoolClosed(block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Pauses the contract in case of emergency\\n     * @dev Only creator can pause\\n     */\\n    function pause() external onlyCreator {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpauses the contract\\n     * @dev Only creator can unpause\\n     */\\n    function unpause() external onlyCreator {\\n        _unpause();\\n    }\\n\\n    // ========== View Functions ==========\\n\\n    /**\\n     * @notice Gets a member's savings balance\\n     * @param member Address of the member\\n     * @return Balance in wei\\n     */\\n    function getBalance(address member) external view returns (uint256) {\\n        return balances[member];\\n    }\\n\\n    /**\\n     * @notice Gets the total number of members\\n     * @return Member count\\n     */\\n    function getMemberCount() external view returns (uint256) {\\n        return members.length;\\n    }\\n\\n    /**\\n     * @notice Gets all members\\n     * @return Array of member addresses\\n     */\\n    function getMembers() external view returns (address[] memory) {\\n        return members;\\n    }\\n\\n    /**\\n     * @notice Gets the current progress toward the savings goal\\n     * @return current Current total savings\\n     * @return target Target savings amount\\n     */\\n    function getProgress() external view returns (uint256 current, uint256 target) {\\n        return (totalSaved, targetAmount);\\n    }\\n\\n    /**\\n     * @notice Checks if the savings goal has been reached\\n     * @return True if target is set and reached, false otherwise\\n     */\\n    function isGoalReached() external view returns (bool) {\\n        if (targetAmount == 0) return false;\\n        return totalSaved >= targetAmount;\\n    }\\n\\n    /**\\n     * @notice Gets the contract's current balance\\n     * @return Balance in wei\\n     */\\n    function getContractBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n}\\n\",\"keccak256\":\"0x038f16d365e4f979d08bd32474c5e1d6bae9910fcd9620305573fb1066ce6435\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615f78806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620000b75760003560e01c806393723123116200007a57806393723123146200018a578063a71b324214620001a1578063ce7ae1f914620001b8578063d3ffe67a14620001e4578063d88ff1f414620001f6578063eb0227be146200020f57600080fd5b806307396aa514620000bc5780630c1e2c3114620000f057806341d1de97146200010757806344b403ea146200011e5780635ab78ee11462000153575b600080fd5b620000d3620000cd36600462000982565b6200023e565b6040516001600160a01b0390911681526020015b60405180910390f35b620000d362000101366004620009d6565b6200033f565b620000d36200011836600462000a4e565b62000513565b620001446200012f36600462000a68565b60026020526000908152604090205460ff1681565b604051620000e7919062000aa3565b620001796200016436600462000a68565b60016020526000908152604090205460ff1681565b6040519015158152602001620000e7565b620000d36200019b36600462000acc565b6200053e565b62000144620001b236600462000a68565b6200068b565b620000d3620001c936600462000a68565b6000602081905290815260409020546001600160a01b031681565b600354604051908152602001620000e7565b620002006200070b565b604051620000e7919062000b29565b620000d36200022036600462000a68565b6001600160a01b039081166000908152602081905260409020541690565b60006200024b836200076f565b6001600160a01b0383811660009081526020819052604090205416156200028f5760405162461bcd60e51b8152600401620002869062000b78565b60405180910390fd5b6000338484604051620002a29062000890565b620002b09392919062000bf7565b604051809103906000f080158015620002cd573d6000803e3d6000fd5b50905080620002df85826001620007ca565b336001600160a01b0316816001600160a01b0316866001600160a01b03167f645ee41665486bc487a04a91a2bd296d2d2395cabf7747b152436dd15f9d4f8f60016040516200032f919062000aa3565b60405180910390a4949350505050565b60006200034c866200076f565b6001600160a01b038681166000908152602081905260409020541615620003875760405162461bcd60e51b8152600401620002869062000b78565b6001600160a01b038416620003d55760405162461bcd60e51b8152602060048201526013602482015272496e76616c69642062656e656669636961727960681b604482015260640162000286565b60008311620004165760405162461bcd60e51b815260206004820152600c60248201526b125b9d985b1a590819dbd85b60a21b604482015260640162000286565b4282116200045a5760405162461bcd60e51b815260206004820152601060248201526f496e76616c696420646561646c696e6560801b604482015260640162000286565b600033878787878760405162000470906200089e565b620004819695949392919062000c2e565b604051809103906000f0801580156200049e573d6000803e3d6000fd5b50905080620004b088826002620007ca565b336001600160a01b0316816001600160a01b0316896001600160a01b03167f645ee41665486bc487a04a91a2bd296d2d2395cabf7747b152436dd15f9d4f8f600260405162000500919062000aa3565b60405180910390a4979650505050505050565b600381815481106200052457600080fd5b6000918252602090912001546001600160a01b0316905081565b60006200054b846200076f565b6001600160a01b038481166000908152602081905260409020541615620005865760405162461bcd60e51b8152600401620002869062000b78565b60008211620005d85760405162461bcd60e51b815260206004820152601b60248201527f496e76616c696420636f6e747269627574696f6e20616d6f756e740000000000604482015260640162000286565b600033858585604051620005ec90620008ac565b620005fb949392919062000c77565b604051809103906000f08015801562000618573d6000803e3d6000fd5b509050806200062a86826000620007ca565b336001600160a01b0316816001600160a01b0316876001600160a01b03167f645ee41665486bc487a04a91a2bd296d2d2395cabf7747b152436dd15f9d4f8f60006040516200067a919062000aa3565b60405180910390a495945050505050565b6001600160a01b03811660009081526001602052604081205460ff16620006ec5760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420706f6f6c206164647265737360601b604482015260640162000286565b506001600160a01b031660009081526002602052604090205460ff1690565b606060038054806020026020016040519081016040528092919081815260200182805480156200076557602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000746575b5050505050905090565b6001600160a01b038116620007c75760405162461bcd60e51b815260206004820152601860248201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604482015260640162000286565b50565b6001600160a01b0383811660009081526020818152604080832080546001600160a01b03191694871694851790559282526001808252838320805460ff19908116831790915560029283905293909220805485949193911691849081111562000837576200083762000a8d565b021790555050600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319166001600160a01b039290921691909117905550565b6114d38062000cb783390190565b611b0f806200218a83390190565b6122aa8062003c9983390190565b80356001600160a01b0381168114620008d257600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620008ff57600080fd5b813567ffffffffffffffff808211156200091d576200091d620008d7565b604051601f8301601f19908116603f01168101908282118183101715620009485762000948620008d7565b816040528381528660208588010111156200096257600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156200099657600080fd5b620009a183620008ba565b9150602083013567ffffffffffffffff811115620009be57600080fd5b620009cc85828601620008ed565b9150509250929050565b600080600080600060a08688031215620009ef57600080fd5b620009fa86620008ba565b9450602086013567ffffffffffffffff81111562000a1757600080fd5b62000a2588828901620008ed565b94505062000a3660408701620008ba565b94979396509394606081013594506080013592915050565b60006020828403121562000a6157600080fd5b5035919050565b60006020828403121562000a7b57600080fd5b62000a8682620008ba565b9392505050565b634e487b7160e01b600052602160045260246000fd5b602081016003831062000ac657634e487b7160e01b600052602160045260246000fd5b91905290565b60008060006060848603121562000ae257600080fd5b62000aed84620008ba565b9250602084013567ffffffffffffffff81111562000b0a57600080fd5b62000b1886828701620008ed565b925050604084013590509250925092565b6020808252825182820181905260009190848201906040850190845b8181101562000b6c5783516001600160a01b03168352928401929184019160010162000b45565b50909695505050505050565b60208082526017908201527f436972636c6520616c72656164792068617320706f6f6c000000000000000000604082015260600190565b6000815180845260005b8181101562000bd75760208185018101518683018201520162000bb9565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b0384811682528316602082015260606040820181905260009062000c259083018462000baf565b95945050505050565b600060018060a01b038089168352808816602084015260c0604084015262000c5a60c084018862000baf565b9516606083015250608081019290925260a0909101529392505050565b6001600160a01b0385811682528416602082015260806040820181905260009062000ca59083018562000baf565b90508260608301529594505050505056fe60806040523480156200001157600080fd5b50604051620014d3380380620014d38339810160408190526200003491620001a5565b6001600081905580546001600160a81b0319166101006001600160a01b038681169190910291909117909155600280546001600160a01b03191691841691909117905560036200008582826200032e565b50600b8054600160ff199182168117909255600680548084019091557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0319166001600160a01b0387811691821790925560008181526007602090815260408083208054871688179055600890915280822080549095169095179093559251908516917f4f2ce4e40f623ca765fc0167a25cb7842ceaafb8d82d3dec26ca0d0e0d2d489691a36040516001600160a01b038416907f0abf3b3f643594d958297062a019458e27d7766629590ac621aa1000fa1298ab90600090a2505050620003fa565b80516001600160a01b03811681146200018a57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080600060608486031215620001bb57600080fd5b620001c68462000172565b92506020620001d781860162000172565b60408601519093506001600160401b0380821115620001f557600080fd5b818701915087601f8301126200020a57600080fd5b8151818111156200021f576200021f6200018f565b604051601f8201601f19908116603f011681019083821181831017156200024a576200024a6200018f565b816040528281528a868487010111156200026357600080fd5b600093505b8284101562000287578484018601518185018701529285019262000268565b60008684830101528096505050505050509250925092565b600181811c90821680620002b457607f821691505b602082108103620002d557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200032957600081815260208120601f850160051c81016020861015620003045750805b601f850160051c820191505b81811015620003255782815560010162000310565b5050505b505050565b81516001600160401b038111156200034a576200034a6200018f565b62000362816200035b84546200029f565b84620002db565b602080601f8311600181146200039a5760008415620003815750858301515b600019600386901b1c1916600185901b17855562000325565b600085815260208120601f198616915b82811015620003cb57888601518255948401946001909101908401620003aa565b5085821015620003ea5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6110c9806200040a6000396000f3fe6080604052600436106101815760003560e01c80638371e6b4116100d1578063a230c5241161008a578063cccf256011610064578063cccf25601461044f578063d0e30db014610471578063d3eb6f6114610479578063f8b2cb4f1461048e57600080fd5b8063a230c524146103e9578063b514ff3e14610419578063c30db7461461042f57600080fd5b80638371e6b41461034a5780638456cb591461035f578063939c445614610374578063953b8fb81461039c578063997072f7146103b25780639eab5253146103c757600080fd5b80632f890b931161013e5780635c975abb116101185780635c975abb146102ea5780635daf08ca1461030257806366805de5146103225780636f9fb98a1461033757600080fd5b80632f890b931461029f5780633f4ba83a146102bf578063488c2ad2146102d457600080fd5b806302d05d3f146101865780631d0f2c99146101c85780631dcbe500146101ea57806322f3e2d41461022a57806327e235e3146102445780632e1a7d4d1461027f575b600080fd5b34801561019257600080fd5b506001546101ab9061010090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101d457600080fd5b506101e86101e3366004610eda565b6104c4565b005b3480156101f657600080fd5b5061021a610205366004610efc565b60086020526000908152604090205460ff1681565b60405190151581526020016101bf565b34801561023657600080fd5b50600b5461021a9060ff1681565b34801561025057600080fd5b5061027161025f366004610efc565b60046020526000908152604090205481565b6040519081526020016101bf565b34801561028b57600080fd5b506101e861029a366004610f2c565b6105ea565b3480156102ab57600080fd5b506101e86102ba366004610efc565b6107f8565b3480156102cb57600080fd5b506101e861092e565b3480156102e057600080fd5b50610271600a5481565b3480156102f657600080fd5b5060015460ff1661021a565b34801561030e57600080fd5b506101ab61031d366004610f2c565b610967565b34801561032e57600080fd5b506101e8610991565b34801561034357600080fd5b5047610271565b34801561035657600080fd5b506101e8610a08565b34801561036b57600080fd5b506101e8610b35565b34801561038057600080fd5b50600554600954604080519283526020830191909152016101bf565b3480156103a857600080fd5b5061027160095481565b3480156103be57600080fd5b50600654610271565b3480156103d357600080fd5b506103dc610b6c565b6040516101bf9190610f45565b3480156103f557600080fd5b5061021a610404366004610efc565b60076020526000908152604090205460ff1681565b34801561042557600080fd5b5061027160055481565b34801561043b57600080fd5b506002546101ab906001600160a01b031681565b34801561045b57600080fd5b50610464610bce565b6040516101bf9190610f92565b6101e8610c5c565b34801561048557600080fd5b5061021a610dc3565b34801561049a57600080fd5b506102716104a9366004610efc565b6001600160a01b031660009081526004602052604090205490565b60015461010090046001600160a01b031633146104fc5760405162461bcd60e51b81526004016104f390610fe0565b60405180910390fd5b610504610de1565b600082116105545760405162461bcd60e51b815260206004820152601e60248201527f54617267657420616d6f756e74206d75737420626520706f736974697665000060448201526064016104f3565b4281116105a35760405162461bcd60e51b815260206004820152601d60248201527f5461726765742064617465206d75737420626520696e2066757475726500000060448201526064016104f3565b6009829055600a81905560408051838152602081018390527f36cbb4d8bcb4cdd7abe6491bf62932ce6bf0715ddff61fa0f3b5f3ad2a55b765910160405180910390a15050565b3360009081526007602052604090205460ff166106385760405162461bcd60e51b815260206004820152600c60248201526b2737ba10309036b2b6b132b960a11b60448201526064016104f3565b610640610de1565b610648610e05565b600081116106985760405162461bcd60e51b815260206004820152601760248201527f4d75737420776974686472617720736f6d657468696e6700000000000000000060448201526064016104f3565b336000908152600460205260409020548111156106ee5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b60448201526064016104f3565b336000908152600460205260408120805483929061070d90849061102d565b925050819055508060056000828254610726919061102d565b9091555050604051600090339083908381818185875af1925050503d806000811461076d576040519150601f19603f3d011682016040523d82523d6000602084013e610772565b606091505b50509050806107b55760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064016104f3565b60405182815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59060200160405180910390a2506107f56001600055565b50565b60015461010090046001600160a01b031633146108275760405162461bcd60e51b81526004016104f390610fe0565b61082f610de1565b6001600160a01b03811660009081526008602052604090205460ff161561088a5760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e481a5b9d9a5d1959608a1b60448201526064016104f3565b6001600160a01b0381166108d25760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b60448201526064016104f3565b6001600160a01b03808216600081815260086020526040808220805460ff19166001908117909155549051610100909104909316927f6c246c8894ac239253d22cd508dbe8eb7e027e0589cdd4ff16dbb4238ccd98349190a350565b60015461010090046001600160a01b0316331461095d5760405162461bcd60e51b81526004016104f390610fe0565b610965610e2f565b565b6006818154811061097757600080fd5b6000918252602090912001546001600160a01b0316905081565b60015461010090046001600160a01b031633146109c05760405162461bcd60e51b81526004016104f390610fe0565b6109c8610de1565b600b805460ff191690556040514281527f925a19753e677c9dc36a80e0fc824ca0c5b1afde494872b43daccab9ffeaffd4906020015b60405180910390a1565b3360009081526008602052604090205460ff16610a555760405162461bcd60e51b815260206004820152600b60248201526a139bdd081a5b9d9a5d195960aa1b60448201526064016104f3565b610a5d610de1565b3360009081526007602052604090205460ff1615610ab05760405162461bcd60e51b815260206004820152601060248201526f20b63932b0b23c90309036b2b6b132b960811b60448201526064016104f3565b6006805460018181019092557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b03191633908117909155600081815260076020526040808220805460ff1916909417909355915190917f0abf3b3f643594d958297062a019458e27d7766629590ac621aa1000fa1298ab91a2565b60015461010090046001600160a01b03163314610b645760405162461bcd60e51b81526004016104f390610fe0565b610965610e7c565b60606006805480602002602001604051908101604052809291908181526020018280548015610bc457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ba6575b5050505050905090565b60038054610bdb90611046565b80601f0160208091040260200160405190810160405280929190818152602001828054610c0790611046565b8015610c545780601f10610c2957610100808354040283529160200191610c54565b820191906000526020600020905b815481529060010190602001808311610c3757829003601f168201915b505050505081565b3360009081526007602052604090205460ff16610caa5760405162461bcd60e51b815260206004820152600c60248201526b2737ba10309036b2b6b132b960a11b60448201526064016104f3565b600b5460ff16610cee5760405162461bcd60e51b815260206004820152600f60248201526e506f6f6c206e6f742061637469766560881b60448201526064016104f3565b610cf6610de1565b610cfe610e05565b60003411610d475760405162461bcd60e51b81526020600482015260166024820152754d757374206465706f73697420736f6d657468696e6760501b60448201526064016104f3565b3360009081526004602052604081208054349290610d66908490611080565b925050819055503460056000828254610d7f9190611080565b909155505060405134815233907f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c49060200160405180910390a26109656001600055565b6000600954600003610dd55750600090565b50600954600554101590565b60015460ff16156109655760405163d93c066560e01b815260040160405180910390fd5b600260005403610e2857604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b610e37610eb7565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b0390911681526020016109fe565b610e84610de1565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833610e64565b60015460ff1661096557604051638dfc202b60e01b815260040160405180910390fd5b60008060408385031215610eed57600080fd5b50508035926020909101359150565b600060208284031215610f0e57600080fd5b81356001600160a01b0381168114610f2557600080fd5b9392505050565b600060208284031215610f3e57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015610f865783516001600160a01b031683529284019291840191600101610f61565b50909695505050505050565b600060208083528351808285015260005b81811015610fbf57858101830151858201604001528201610fa3565b506000604082860101526040601f19601f8301168501019250505092915050565b6020808252601a908201527f4f6e6c792063726561746f722063616e2063616c6c2074686973000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561104057611040611017565b92915050565b600181811c9082168061105a57607f821691505b60208210810361107a57634e487b7160e01b600052602260045260246000fd5b50919050565b808201808211156110405761104061101756fea264697066735822122080d48858ad22f8e3c132846909579534b8fbeaa27427aff8e286fb47d38d0a0f64736f6c6343000814003360806040523480156200001157600080fd5b5060405162001b0f38038062001b0f8339810160408190526200003491620002e8565b60016000819055805460ff191690556001600160a01b0383166200009f5760405162461bcd60e51b815260206004820152601360248201527f496e76616c69642062656e65666963696172790000000000000000000000000060448201526064015b60405180910390fd5b60008211620000f15760405162461bcd60e51b815260206004820152601560248201527f476f616c206d75737420626520706f7369746976650000000000000000000000604482015260640162000096565b428111620001425760405162461bcd60e51b815260206004820152601760248201527f446561646c696e65206d75737420626520667574757265000000000000000000604482015260640162000096565b60018054610100600160a81b0319166101006001600160a01b038981169190910291909117909155600280546001600160a01b03191691871691909117905560036200018f858262000496565b50600480546001600160a01b038581166001600160a01b0319928316811790935560058590556006849055600d805461ff0019166101001790556009805460018181019092557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0180548b84169416841790556000838152600a60209081526040808320805460ff199081168617909155600b83529281902080549093169093179091558151948552840186905283018490529091908716907f7b5c292074d28589558035864cd03ab61b59880d01a5b6228edb5adf73656e139060600160405180910390a36040516001600160a01b038716907f0abf3b3f643594d958297062a019458e27d7766629590ac621aa1000fa1298ab90600090a250505050505062000562565b80516001600160a01b0381168114620002cd57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060c087890312156200030257600080fd5b6200030d87620002b5565b955060206200031e818901620002b5565b60408901519096506001600160401b03808211156200033c57600080fd5b818a0191508a601f8301126200035157600080fd5b815181811115620003665762000366620002d2565b604051601f8201601f19908116603f01168101908382118183101715620003915762000391620002d2565b816040528281528d86848701011115620003aa57600080fd5b600093505b82841015620003ce5784840186015181850187015292850192620003af565b6000868483010152809950505050505050620003ed60608801620002b5565b92506080870151915060a087015190509295509295509295565b600181811c908216806200041c57607f821691505b6020821081036200043d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200049157600081815260208120601f850160051c810160208610156200046c5750805b601f850160051c820191505b818110156200048d5782815560010162000478565b5050505b505050565b81516001600160401b03811115620004b257620004b2620002d2565b620004ca81620004c3845462000407565b8462000443565b602080601f831160018114620005025760008415620004e95750858301515b600019600386901b1c1916600185901b1785556200048d565b600085815260208120601f198616915b82811015620005335788860151825594840194600190910190840162000512565b5085821015620005525787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61159d80620005726000396000f3fe6080604052600436106101ee5760003560e01c80638371e6b41161010d578063b5545a3c116100a0578063cc6cb19a1161006f578063cc6cb19a14610558578063cccf256014610585578063d3eb6f61146105a7578063dac6270d146105c1578063ed88c68e146105d657600080fd5b8063b5545a3c146104f3578063b564e92614610508578063c30db74614610522578063c5c4744c1461054257600080fd5b806396f300d4116100dc57806396f300d414610477578063997072f7146104995780639eab5253146104ae578063a230c524146104c357600080fd5b80638371e6b4146104105780638456cb59146104255780638c52dc411461043a578063939c44561461044f57600080fd5b8063410a1d32116101855780635daf08ca116101545780635daf08ca146103b357806369bc2f1e146103d357806369d89575146103e85780636f9fb98a146103fd57600080fd5b8063410a1d32146103255780634abfa1631461035b578063532f11791461037b5780635c975abb1461039b57600080fd5b806329dcb0cf116101c157806329dcb0cf146102b85780632f890b93146102ce57806338af3eed146102f05780633f4ba83a1461031057600080fd5b806302d05d3f146101f35780631dcbe5001461023557806322f3e2d4146102755780632636b94514610294575b600080fd5b3480156101ff57600080fd5b506001546102189061010090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561024157600080fd5b506102656102503660046113d0565b600b6020526000908152604090205460ff1681565b604051901515815260200161022c565b34801561028157600080fd5b50600d5461026590610100900460ff1681565b3480156102a057600080fd5b506102aa60055481565b60405190815260200161022c565b3480156102c457600080fd5b506102aa60065481565b3480156102da57600080fd5b506102ee6102e93660046113d0565b6105de565b005b3480156102fc57600080fd5b50600454610218906001600160a01b031681565b34801561031c57600080fd5b506102ee61071d565b34801561033157600080fd5b506102aa6103403660046113d0565b6001600160a01b031660009081526008602052604090205490565b34801561036757600080fd5b50610218610376366004611400565b610756565b34801561038757600080fd5b50600d546102659062010000900460ff1681565b3480156103a757600080fd5b5060015460ff16610265565b3480156103bf57600080fd5b506102186103ce366004611400565b610780565b3480156103df57600080fd5b50600c546102aa565b3480156103f457600080fd5b506102ee610790565b34801561040957600080fd5b50476102aa565b34801561041c57600080fd5b506102ee6109c2565b34801561043157600080fd5b506102ee610aef565b34801561044657600080fd5b506102ee610b26565b34801561045b57600080fd5b506007546005546040805192835260208301919091520161022c565b34801561048357600080fd5b5061048c610cd8565b60405161022c9190611419565b3480156104a557600080fd5b506009546102aa565b3480156104ba57600080fd5b5061048c610d3a565b3480156104cf57600080fd5b506102656104de3660046113d0565b600a6020526000908152604090205460ff1681565b3480156104ff57600080fd5b506102ee610d9a565b34801561051457600080fd5b50600d546102659060ff1681565b34801561052e57600080fd5b50600254610218906001600160a01b031681565b34801561054e57600080fd5b506102aa60075481565b34801561056457600080fd5b506102aa6105733660046113d0565b60086020526000908152604090205481565b34801561059157600080fd5b5061059a610f31565b60405161022c9190611466565b3480156105b357600080fd5b506005546007541015610265565b3480156105cd57600080fd5b506102aa610fbf565b6102ee610fe3565b60015461010090046001600160a01b031633146106165760405162461bcd60e51b815260040161060d906114b4565b60405180910390fd5b61061e6112d7565b6001600160a01b0381166000908152600b602052604090205460ff16156106795760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e481a5b9d9a5d1959608a1b604482015260640161060d565b6001600160a01b0381166106c15760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015260640161060d565b6001600160a01b038082166000818152600b6020526040808220805460ff19166001908117909155549051610100909104909316927f6c246c8894ac239253d22cd508dbe8eb7e027e0589cdd4ff16dbb4238ccd98349190a350565b60015461010090046001600160a01b0316331461074c5760405162461bcd60e51b815260040161060d906114b4565b6107546112fb565b565b600c818154811061076657600080fd5b6000918252602090912001546001600160a01b0316905081565b6009818154811061076657600080fd5b60015461010090046001600160a01b031633146107bf5760405162461bcd60e51b815260040161060d906114b4565b6107c76112d7565b6107cf611348565b600d5460ff16156108155760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481c995b19585cd95960821b604482015260640161060d565b600d5462010000900460ff16156108605760405162461bcd60e51b815260206004820152600f60248201526e1499599d5b991cc8195b98589b1959608a1b604482015260640161060d565b600554600754101580610874575060065442115b6108cc5760405162461bcd60e51b8152602060048201526024808201527f476f616c206e6f74206d657420616e6420646561646c696e65206e6f742070616044820152631cdcd95960e21b606482015260840161060d565b600d805461ffff1916600117905560045460405147916000916001600160a01b039091169083908381818185875af1925050503d806000811461092b576040519150601f19603f3d011682016040523d82523d6000602084013e610930565b606091505b50509050806109735760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b604482015260640161060d565b6004546040518381526001600160a01b03909116907f221c08a06b07a64803b3787861a3f276212fcccb51c2e6234077a9b8cb13047a906020015b60405180910390a250506107546001600055565b336000908152600b602052604090205460ff16610a0f5760405162461bcd60e51b815260206004820152600b60248201526a139bdd081a5b9d9a5d195960aa1b604482015260640161060d565b610a176112d7565b336000908152600a602052604090205460ff1615610a6a5760405162461bcd60e51b815260206004820152601060248201526f20b63932b0b23c90309036b2b6b132b960811b604482015260640161060d565b6009805460018181019092557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0180546001600160a01b031916339081179091556000818152600a6020526040808220805460ff1916909417909355915190917f0abf3b3f643594d958297062a019458e27d7766629590ac621aa1000fa1298ab91a2565b60015461010090046001600160a01b03163314610b1e5760405162461bcd60e51b815260040161060d906114b4565b610754611372565b60015461010090046001600160a01b03163314610b555760405162461bcd60e51b815260040161060d906114b4565b610b5d6112d7565b600d5460ff1615610ba95760405162461bcd60e51b8152602060048201526016602482015275119d5b991cc8185b1c9958591e481c995b19585cd95960521b604482015260640161060d565b600d5462010000900460ff1615610c025760405162461bcd60e51b815260206004820152601760248201527f526566756e647320616c726561647920656e61626c6564000000000000000000604482015260640161060d565b6006544211610c495760405162461bcd60e51b8152602060048201526013602482015272111958591b1a5b99481b9bdd081c185cdcd959606a1b604482015260640161060d565b60055460075410610c8b5760405162461bcd60e51b815260206004820152600c60248201526b11dbd85b081dd85cc81b595d60a21b604482015260640161060d565b600d805462ffff001916620100001790556040517f01fd9d9d9f159bbb346cbe96d08df5b61108b672fa79a2d53fb9c67b9717d27390610cce9042815260200190565b60405180910390a1565b6060600c805480602002602001604051908101604052809291908181526020018280548015610d3057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610d12575b5050505050905090565b60606009805480602002602001604051908101604052809291908181526020018280548015610d30576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610d12575050505050905090565b610da26112d7565b610daa611348565b600d5462010000900460ff16610df85760405162461bcd60e51b81526020600482015260136024820152721499599d5b991cc81b9bdd08195b98589b1959606a1b604482015260640161060d565b33600090815260086020526040902054610e485760405162461bcd60e51b8152602060048201526011602482015270139bdd1a1a5b99c81d1bc81c99599d5b99607a1b604482015260640161060d565b3360009081526008602052604081208054908290556007805491928392610e70908490611501565b9091555050604051600090339083908381818185875af1925050503d8060008114610eb7576040519150601f19603f3d011682016040523d82523d6000602084013e610ebc565b606091505b5050905080610eff5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b604482015260640161060d565b60405182815233907f358fe4192934d3bf28ae181feda1f4bd08ca67f5e2fad55582cce5eb67304ae9906020016109ae565b60038054610f3e9061151a565b80601f0160208091040260200160405190810160405280929190818152602001828054610f6a9061151a565b8015610fb75780601f10610f8c57610100808354040283529160200191610fb7565b820191906000526020600020905b815481529060010190602001808311610f9a57829003601f168201915b505050505081565b60006006544210610fd05750600090565b42600654610fde9190611501565b905090565b336000908152600a602052604090205460ff166110315760405162461bcd60e51b815260206004820152600c60248201526b2737ba10309036b2b6b132b960a11b604482015260640161060d565b6110396112d7565b611041611348565b600034116110895760405162461bcd60e51b81526020600482015260156024820152744d75737420646f6e61746520736f6d657468696e6760581b604482015260640161060d565b6006544211156110cd5760405162461bcd60e51b815260206004820152600f60248201526e111958591b1a5b99481c185cdcd959608a1b604482015260640161060d565b600d5460ff16156111195760405162461bcd60e51b8152602060048201526016602482015275119d5b991cc8185b1c9958591e481c995b19585cd95960521b604482015260640161060d565b600d5462010000900460ff16156111725760405162461bcd60e51b815260206004820152601e60248201527f526566756e647320656e61626c65642c2063616e6e6f7420646f6e6174650000604482015260640161060d565b600d54610100900460ff166111bb5760405162461bcd60e51b815260206004820152600f60248201526e506f6f6c206e6f742061637469766560881b604482015260640161060d565b33600090815260086020526040812054900361121457600c80546001810182556000919091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70180546001600160a01b031916331790555b3360009081526008602052604081208054349290611233908490611554565b92505081905550346007600082825461124c9190611554565b909155505060405134815233907faa13962bc79c7a0bc42cb8169b1705f0a6b55cc404ffb8a589d771ca786759789060200160405180910390a2600554600754106112cd577ffbfd8ab7c24300fa9888cd721c8565a7da56759384781283684dcf7c7c4a846b6007546040516112c491815260200190565b60405180910390a15b6107546001600055565b60015460ff16156107545760405163d93c066560e01b815260040160405180910390fd5b6113036113ad565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b039091168152602001610cce565b60026000540361136b57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b61137a6112d7565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833611330565b60015460ff1661075457604051638dfc202b60e01b815260040160405180910390fd5b6000602082840312156113e257600080fd5b81356001600160a01b03811681146113f957600080fd5b9392505050565b60006020828403121561141257600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561145a5783516001600160a01b031683529284019291840191600101611435565b50909695505050505050565b600060208083528351808285015260005b8181101561149357858101830151858201604001528201611477565b506000604082860101526040601f19601f8301168501019250505092915050565b6020808252601a908201527f4f6e6c792063726561746f722063616e2063616c6c2074686973000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b81810381811115611514576115146114eb565b92915050565b600181811c9082168061152e57607f821691505b60208210810361154e57634e487b7160e01b600052602260045260246000fd5b50919050565b80820180821115611514576115146114eb56fea264697066735822122011b37fb80d481a1ea250376a345482467d3037fafe2fad1246e69ef097b9620064736f6c6343000814003360806040523480156200001157600080fd5b50604051620022aa380380620022aa83398101604081905262000034916200021b565b60016000819055805460ff1916905580620000955760405162461bcd60e51b815260206004820152601b60248201527f496e76616c696420636f6e747269627574696f6e20616d6f756e740000000000604482015260640160405180910390fd5b60018054610100600160a81b0319166101006001600160a01b038781169190910291909117909155600280546001600160a01b0319169185169190911790556003620000e28382620003ac565b5060048190556005805460018082019092557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319166001600160a01b038781169182179092556000818152600660209081526040808320805460ff1990811688179091556007835292819020805490931690951790915592518481529092918616917f8e5acdd034f8bf8fded53cd37f8b0cb6a72b385988e92dc71f664f5dfcfcd8a7910160405180910390a3836001600160a01b03167f7f3b9effe05cfb4f31f854004de03199fd03fe56bf38a48b2aa9a9f4402d6e2342604051620001d691815260200190565b60405180910390a25050505062000478565b80516001600160a01b03811681146200020057600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156200023257600080fd5b6200023d85620001e8565b935060206200024e818701620001e8565b60408701519094506001600160401b03808211156200026c57600080fd5b818801915088601f8301126200028157600080fd5b81518181111562000296576200029662000205565b604051601f8201601f19908116603f01168101908382118183101715620002c157620002c162000205565b816040528281528b86848701011115620002da57600080fd5b600093505b82841015620002fe5784840186015181850187015292850192620002df565b6000928101909501919091525050506060959095015193969295505050565b600181811c908216806200033257607f821691505b6020821081036200035357634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003a757600081815260208120601f850160051c81016020861015620003825750805b601f850160051c820191505b81811015620003a3578281556001016200038e565b5050505b505050565b81516001600160401b03811115620003c857620003c862000205565b620003e081620003d984546200031d565b8462000359565b602080601f831160018114620004185760008415620003ff5750858301515b600019600386901b1c1916600185901b178555620003a3565b600085815260208120601f198616915b82811015620004495788860151825594840194600190910190840162000428565b5085821015620004685787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b611e2280620004886000396000f3fe60806040526004361061020f5760003560e01c80635fa0b65f11610118578063a9e6c7fb116100a0578063cd421fbf1161006f578063cd421fbf146105f1578063d7bb99ba14610608578063d9a6722014610610578063ea0e35b114610625578063eca42fba1461063a57600080fd5b8063a9e6c7fb1461057a578063b2fa1c9e14610590578063c30db746146105af578063cccf2560146105cf57600080fd5b80638a19c8bc116100e75780638a19c8bc146104c7578063997072f7146104f35780639eab525314610508578063a0f243b81461051d578063a230c5241461054a57600080fd5b80635fa0b65f1461047257806362a4e0f1146104885780638371e6b41461049d5780638456cb59146104b257600080fd5b8063346477c71161019b5780633f4ba83a1161016a5780633f4ba83a146103ee57806343662f4e1461040357806359bbcb3d146104255780635c975abb1461043a5780635daf08ca1461045257600080fd5b8063346477c714610358578063380dd901146103885780633c3ccc441461039e5780633f08399c146103b357600080fd5b806312065fe0116101e257806312065fe0146102bc578063194e36f5146102d95780631dcbe500146102ee57806322f3e2d41461031e5780632f890b931461033857600080fd5b806302d05d3f1461021457806305a95f0414610256578063063fcfcc1461026d5780630b529a171461029c575b600080fd5b34801561022057600080fd5b506001546102399061010090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561026257600080fd5b5061026b61065a565b005b34801561027957600080fd5b50600a5461028c90610100900460ff1681565b604051901515815260200161024d565b3480156102a857600080fd5b506102396102b7366004611ac0565b61097f565b3480156102c857600080fd5b50475b60405190815260200161024d565b3480156102e557600080fd5b506102396109a9565b3480156102fa57600080fd5b5061028c610309366004611af5565b60076020526000908152604090205460ff1681565b34801561032a57600080fd5b50600f5461028c9060ff1681565b34801561034457600080fd5b5061026b610353366004611af5565b610a11565b34801561036457600080fd5b5061028c610373366004611af5565b600b6020526000908152604090205460ff1681565b34801561039457600080fd5b506102cb600e5481565b3480156103aa57600080fd5b5061026b610b9a565b3480156103bf57600080fd5b5061028c6103ce366004611b17565b600c60209081526000928352604080842090915290825290205460ff1681565b3480156103fa57600080fd5b5061026b610dcd565b34801561040f57600080fd5b50610418610e04565b60405161024d9190611b54565b34801561043157600080fd5b5061028c610e66565b34801561044657600080fd5b5060015460ff1661028c565b34801561045e57600080fd5b5061023961046d366004611ac0565b610e75565b34801561047e57600080fd5b506102cb60045481565b34801561049457600080fd5b50610418610e85565b3480156104a957600080fd5b5061026b611033565b3480156104be57600080fd5b5061026b6111c6565b3480156104d357600080fd5b50600a546104e19060ff1681565b60405160ff909116815260200161024d565b3480156104ff57600080fd5b506005546102cb565b34801561051457600080fd5b506104186111fd565b34801561052957600080fd5b506102cb610538366004611af5565b60086020526000908152604090205481565b34801561055657600080fd5b5061028c610565366004611af5565b60066020526000908152604090205460ff1681565b34801561058657600080fd5b506102cb600d5481565b34801561059c57600080fd5b50600f5461028c90610100900460ff1681565b3480156105bb57600080fd5b50600254610239906001600160a01b031681565b3480156105db57600080fd5b506105e461125d565b60405161024d9190611ba1565b3480156105fd57600080fd5b506102cb62278d0081565b61026b6112eb565b34801561061c57600080fd5b506104e1600581565b34801561063157600080fd5b506104e1600c81565b34801561064657600080fd5b5061026b610655366004611bef565b611574565b600f5460ff1680156106745750600f54610100900460ff16155b6106b75760405162461bcd60e51b815260206004820152600f60248201526e506f6f6c206e6f742061637469766560881b60448201526064015b60405180910390fd5b6106bf61173e565b6106c7611762565b6106cf61178c565b6107135760405162461bcd60e51b8152602060048201526015602482015274139bdd08195d995c9e5bdb99481a185cc81c185a59605a1b60448201526064016106ae565b600a54610100900460ff16156107645760405162461bcd60e51b8152602060048201526016602482015275149bdd5b9908185b1c9958591e481c185a59081bdd5d60521b60448201526064016106ae565b600a5460009060099061077c9060019060ff16611c7a565b60ff168154811061078f5761078f611c99565b6000918252602090912001546001600160a01b031690503381146107f55760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920726563697069656e742063616e20636c61696d207061796f75740060448201526064016106ae565b600a805461ff0019166101001790556001600160a01b0381166000908152600b60205260408120805460ff191660011790556005546004546108379190611caf565b90506000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610886576040519150601f19603f3d011682016040523d82523d6000602084013e61088b565b606091505b50509050806108ce5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064016106ae565b600a546040805184815260ff90921660208301526001600160a01b038516917f882acae0bded9e8351bc191c3a610fdfdfc5c20f670b69c7569ae0fbdeda81b8910160405180910390a2600554600a5460ff161061097057600f805461ffff19166101001790556040517fd57799724d5c069e66abd552aca9bc70e8f36d98f34d0d84841983bc469a4e4a906109679042815260200190565b60405180910390a15b50505061097d6001600055565b565b6009818154811061098f57600080fd5b6000918252602090912001546001600160a01b0316905081565b600a5460009060ff1615806109c45750600954600a5460ff16115b156109cf5750600090565b600a546009906109e49060019060ff16611c7a565b60ff16815481106109f7576109f7611c99565b6000918252602090912001546001600160a01b0316919050565b60015461010090046001600160a01b03163314610a405760405162461bcd60e51b81526004016106ae90611cc6565b610a4861173e565b600f5460ff1615610a9b5760405162461bcd60e51b815260206004820181905260248201527f43616e6e6f7420696e7669746520616674657220524f5343412073746172747360448201526064016106ae565b6001600160a01b03811660009081526007602052604090205460ff1615610af65760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e481a5b9d9a5d1959608a1b60448201526064016106ae565b600554600c11610b3e5760405162461bcd60e51b815260206004820152601360248201527213585e081b595b58995c9cc81c995858da1959606a1b60448201526064016106ae565b6001600160a01b03808216600081815260076020526040808220805460ff19166001908117909155549051610100909104909316927f6c246c8894ac239253d22cd508dbe8eb7e027e0589cdd4ff16dbb4238ccd98349190a350565b3360009081526006602052604090205460ff16610be85760405162461bcd60e51b815260206004820152600c60248201526b2737ba10309036b2b6b132b960a11b60448201526064016106ae565b610bf061173e565b600f5460ff168015610c0a5750600f54610100900460ff16155b610c495760405162461bcd60e51b815260206004820152601060248201526f524f534341206e6f742061637469766560801b60448201526064016106ae565b600a54610100900460ff16610ca05760405162461bcd60e51b815260206004820152601a60248201527f43757272656e7420726f756e64206e6f742070616964206f757400000000000060448201526064016106ae565b600554600a5460ff1610610cec5760405162461bcd60e51b8152602060048201526013602482015272416c6c20726f756e647320636f6d706c65746560681b60448201526064016106ae565b62278d00600e54610cfd9190611cfd565b421015610d4c5760405162461bcd60e51b815260206004820152601960248201527f33302d646179206379636c65206e6f7420636f6d706c6574650000000000000060448201526064016106ae565b600a805460ff16906000610d5f83611d10565b82546101009290920a60ff81810219909316918316021790915542600e819055600a805461ff001981169091556040805191909316815260208101919091527ff7104ec8d70cbee7bb54da17843aa32c11b77c11c6197f005ec8b2b4f5de69589250015b60405180910390a1565b60015461010090046001600160a01b03163314610dfc5760405162461bcd60e51b81526004016106ae90611cc6565b61097d61180d565b60606009805480602002602001604051908101604052809291908181526020018280548015610e5c57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610e3e575b5050505050905090565b6000610e7061178c565b905090565b6005818154811061098f57600080fd5b60606000805b600554811015610f0757600c600060058381548110610eac57610eac611c99565b60009182526020808320909101546001600160a01b031683528281019390935260409182018120600a5460ff9081168352935220541615610ef55781610ef181611d2f565b9250505b80610eff81611d2f565b915050610e8b565b5060008167ffffffffffffffff811115610f2357610f23611d48565b604051908082528060200260200182016040528015610f4c578160200160208202803683370190505b5090506000805b60055481101561102a57600c600060058381548110610f7457610f74611c99565b60009182526020808320909101546001600160a01b031683528281019390935260409182018120600a5460ff90811683529352205416156110185760058181548110610fc257610fc2611c99565b9060005260206000200160009054906101000a90046001600160a01b0316838381518110610ff257610ff2611c99565b6001600160a01b03909216602092830291909101909101528161101481611d2f565b9250505b8061102281611d2f565b915050610f53565b50909392505050565b3360009081526007602052604090205460ff166110805760405162461bcd60e51b815260206004820152600b60248201526a139bdd081a5b9d9a5d195960aa1b60448201526064016106ae565b61108861173e565b600f5460ff16156110db5760405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f74206a6f696e20616674657220524f53434120737461727473000060448201526064016106ae565b3360009081526006602052604090205460ff161561112e5760405162461bcd60e51b815260206004820152601060248201526f20b63932b0b23c90309036b2b6b132b960811b60448201526064016106ae565b6005805460018181019092557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319163390811790915560008181526006602052604090819020805460ff191690931790925590517f7f3b9effe05cfb4f31f854004de03199fd03fe56bf38a48b2aa9a9f4402d6e23906111bc9042815260200190565b60405180910390a2565b60015461010090046001600160a01b031633146111f55760405162461bcd60e51b81526004016106ae90611cc6565b61097d61185a565b60606005805480602002602001604051908101604052809291908181526020018280548015610e5c576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610e3e575050505050905090565b6003805461126a90611d5e565b80601f016020809104026020016040519081016040528092919081815260200182805461129690611d5e565b80156112e35780601f106112b8576101008083540402835291602001916112e3565b820191906000526020600020905b8154815290600101906020018083116112c657829003601f168201915b505050505081565b3360009081526006602052604090205460ff166113395760405162461bcd60e51b815260206004820152600c60248201526b2737ba10309036b2b6b132b960a11b60448201526064016106ae565b600f5460ff1680156113535750600f54610100900460ff16155b6113915760405162461bcd60e51b815260206004820152600f60248201526e506f6f6c206e6f742061637469766560881b60448201526064016106ae565b61139961173e565b6113a1611762565b60045434146113e55760405162461bcd60e51b815260206004820152601060248201526f125b98dbdc9c9958dd08185b5bdd5b9d60821b60448201526064016106ae565b336000908152600c60209081526040808320600a5460ff9081168552925290912054161561144b5760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e4818dbdb9d1c9a589d5d1959606a1b60448201526064016106ae565b600554600a5460ff1611156114985760405162461bcd60e51b8152602060048201526013602482015272416c6c20726f756e647320636f6d706c65746560681b60448201526064016106ae565b336000818152600c60209081526040808320600a5460ff1684528252808320805460ff191660011790559282526008905290812080543492906114dc908490611cfd565b9091555050600a546040805160ff909216825234602083015233917fe18ade3c83eb782f6b575ec07c91d1dce24ca2893272cabc5d86e759110d3b65910160405180910390a261152a61178c565b1561156a57600a5460405160ff90911681527f78a0925e040149ea78c23d3aabf9577f31cb0afe2252a07da3322fb93f9c697d9060200160405180910390a15b61097d6001600055565b60015461010090046001600160a01b031633146115a35760405162461bcd60e51b81526004016106ae90611cc6565b6115ab61173e565b600f5460ff16156115f05760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e481cdd185c9d1959608a1b60448201526064016106ae565b6005805410156116375760405162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f756768206d656d6265727360701b60448201526064016106ae565b60055481146116885760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964207061796f7574206f72646572206c656e677468000000000060448201526064016106ae565b6116928282611895565b61169e60098383611a48565b50600f8054600160ff199182168117909255600a8054909116909117905542600d819055600e8190556040517f7e680909351c6b66c0ef9f13e0724b2785bb330a595466a2b2bf175f69df01e8916116f99185918591611d98565b60405180910390a160408051600181524260208201527ff7104ec8d70cbee7bb54da17843aa32c11b77c11c6197f005ec8b2b4f5de6958910160405180910390a15050565b60015460ff161561097d5760405163d93c066560e01b815260040160405180910390fd5b60026000540361178557604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6000805b60055481101561180557600c6000600583815481106117b1576117b1611c99565b60009182526020808320909101546001600160a01b031683528281019390935260409182018120600a5460ff908116835293522054166117f357600091505090565b806117fd81611d2f565b915050611790565b506001905090565b611815611a25565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b039091168152602001610dc3565b61186261173e565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833611842565b60005b81811015611a205760008383838181106118b4576118b4611c99565b90506020020160208101906118c99190611af5565b6001600160a01b03811660009081526006602052604090205490915060ff166119345760405162461bcd60e51b815260206004820181905260248201527f5061796f7574206f7264657220636f6e7461696e73206e6f6e2d6d656d62657260448201526064016106ae565b6000611941836001611cfd565b90505b83811015611a0b5784848281811061195e5761195e611c99565b90506020020160208101906119739190611af5565b6001600160a01b031685858581811061198e5761198e611c99565b90506020020160208101906119a39190611af5565b6001600160a01b0316036119f95760405162461bcd60e51b815260206004820152601960248201527f4475706c696361746520696e207061796f7574206f726465720000000000000060448201526064016106ae565b80611a0381611d2f565b915050611944565b50508080611a1890611d2f565b915050611898565b505050565b60015460ff1661097d57604051638dfc202b60e01b815260040160405180910390fd5b828054828255906000526020600020908101928215611a9b579160200282015b82811115611a9b5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190611a68565b50611aa7929150611aab565b5090565b5b80821115611aa75760008155600101611aac565b600060208284031215611ad257600080fd5b5035919050565b80356001600160a01b0381168114611af057600080fd5b919050565b600060208284031215611b0757600080fd5b611b1082611ad9565b9392505050565b60008060408385031215611b2a57600080fd5b611b3383611ad9565b9150602083013560ff81168114611b4957600080fd5b809150509250929050565b6020808252825182820181905260009190848201906040850190845b81811015611b955783516001600160a01b031683529284019291840191600101611b70565b50909695505050505050565b600060208083528351808285015260005b81811015611bce57858101830151858201604001528201611bb2565b506000604082860101526040601f19601f8301168501019250505092915050565b60008060208385031215611c0257600080fd5b823567ffffffffffffffff80821115611c1a57600080fd5b818501915085601f830112611c2e57600080fd5b813581811115611c3d57600080fd5b8660208260051b8501011115611c5257600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052601160045260246000fd5b60ff8281168282160390811115611c9357611c93611c64565b92915050565b634e487b7160e01b600052603260045260246000fd5b8082028115828204841417611c9357611c93611c64565b6020808252601a908201527f4f6e6c792063726561746f722063616e2063616c6c2074686973000000000000604082015260600190565b80820180821115611c9357611c93611c64565b600060ff821660ff8103611d2657611d26611c64565b60010192915050565b600060018201611d4157611d41611c64565b5060010190565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680611d7257607f821691505b602082108103611d9257634e487b7160e01b600052602260045260246000fd5b50919050565b6040808252810183905260008460608301825b86811015611dd9576001600160a01b03611dc484611ad9565b16825260209283019290910190600101611dab565b506020939093019390935250939250505056fea2646970667358221220cb974d4d22168fd68f32788566da5709e2730287e3a33a47a5072017b818767d64736f6c63430008140033a2646970667358221220964de270f3b90c84f3cccc73db3f50e37a3d4bab08ac1e4c1b690f209823b65264736f6c63430008140033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000b75760003560e01c806393723123116200007a57806393723123146200018a578063a71b324214620001a1578063ce7ae1f914620001b8578063d3ffe67a14620001e4578063d88ff1f414620001f6578063eb0227be146200020f57600080fd5b806307396aa514620000bc5780630c1e2c3114620000f057806341d1de97146200010757806344b403ea146200011e5780635ab78ee11462000153575b600080fd5b620000d3620000cd36600462000982565b6200023e565b6040516001600160a01b0390911681526020015b60405180910390f35b620000d362000101366004620009d6565b6200033f565b620000d36200011836600462000a4e565b62000513565b620001446200012f36600462000a68565b60026020526000908152604090205460ff1681565b604051620000e7919062000aa3565b620001796200016436600462000a68565b60016020526000908152604090205460ff1681565b6040519015158152602001620000e7565b620000d36200019b36600462000acc565b6200053e565b62000144620001b236600462000a68565b6200068b565b620000d3620001c936600462000a68565b6000602081905290815260409020546001600160a01b031681565b600354604051908152602001620000e7565b620002006200070b565b604051620000e7919062000b29565b620000d36200022036600462000a68565b6001600160a01b039081166000908152602081905260409020541690565b60006200024b836200076f565b6001600160a01b0383811660009081526020819052604090205416156200028f5760405162461bcd60e51b8152600401620002869062000b78565b60405180910390fd5b6000338484604051620002a29062000890565b620002b09392919062000bf7565b604051809103906000f080158015620002cd573d6000803e3d6000fd5b50905080620002df85826001620007ca565b336001600160a01b0316816001600160a01b0316866001600160a01b03167f645ee41665486bc487a04a91a2bd296d2d2395cabf7747b152436dd15f9d4f8f60016040516200032f919062000aa3565b60405180910390a4949350505050565b60006200034c866200076f565b6001600160a01b038681166000908152602081905260409020541615620003875760405162461bcd60e51b8152600401620002869062000b78565b6001600160a01b038416620003d55760405162461bcd60e51b8152602060048201526013602482015272496e76616c69642062656e656669636961727960681b604482015260640162000286565b60008311620004165760405162461bcd60e51b815260206004820152600c60248201526b125b9d985b1a590819dbd85b60a21b604482015260640162000286565b4282116200045a5760405162461bcd60e51b815260206004820152601060248201526f496e76616c696420646561646c696e6560801b604482015260640162000286565b600033878787878760405162000470906200089e565b620004819695949392919062000c2e565b604051809103906000f0801580156200049e573d6000803e3d6000fd5b50905080620004b088826002620007ca565b336001600160a01b0316816001600160a01b0316896001600160a01b03167f645ee41665486bc487a04a91a2bd296d2d2395cabf7747b152436dd15f9d4f8f600260405162000500919062000aa3565b60405180910390a4979650505050505050565b600381815481106200052457600080fd5b6000918252602090912001546001600160a01b0316905081565b60006200054b846200076f565b6001600160a01b038481166000908152602081905260409020541615620005865760405162461bcd60e51b8152600401620002869062000b78565b60008211620005d85760405162461bcd60e51b815260206004820152601b60248201527f496e76616c696420636f6e747269627574696f6e20616d6f756e740000000000604482015260640162000286565b600033858585604051620005ec90620008ac565b620005fb949392919062000c77565b604051809103906000f08015801562000618573d6000803e3d6000fd5b509050806200062a86826000620007ca565b336001600160a01b0316816001600160a01b0316876001600160a01b03167f645ee41665486bc487a04a91a2bd296d2d2395cabf7747b152436dd15f9d4f8f60006040516200067a919062000aa3565b60405180910390a495945050505050565b6001600160a01b03811660009081526001602052604081205460ff16620006ec5760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420706f6f6c206164647265737360601b604482015260640162000286565b506001600160a01b031660009081526002602052604090205460ff1690565b606060038054806020026020016040519081016040528092919081815260200182805480156200076557602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000746575b5050505050905090565b6001600160a01b038116620007c75760405162461bcd60e51b815260206004820152601860248201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604482015260640162000286565b50565b6001600160a01b0383811660009081526020818152604080832080546001600160a01b03191694871694851790559282526001808252838320805460ff19908116831790915560029283905293909220805485949193911691849081111562000837576200083762000a8d565b021790555050600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319166001600160a01b039290921691909117905550565b6114d38062000cb783390190565b611b0f806200218a83390190565b6122aa8062003c9983390190565b80356001600160a01b0381168114620008d257600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620008ff57600080fd5b813567ffffffffffffffff808211156200091d576200091d620008d7565b604051601f8301601f19908116603f01168101908282118183101715620009485762000948620008d7565b816040528381528660208588010111156200096257600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156200099657600080fd5b620009a183620008ba565b9150602083013567ffffffffffffffff811115620009be57600080fd5b620009cc85828601620008ed565b9150509250929050565b600080600080600060a08688031215620009ef57600080fd5b620009fa86620008ba565b9450602086013567ffffffffffffffff81111562000a1757600080fd5b62000a2588828901620008ed565b94505062000a3660408701620008ba565b94979396509394606081013594506080013592915050565b60006020828403121562000a6157600080fd5b5035919050565b60006020828403121562000a7b57600080fd5b62000a8682620008ba565b9392505050565b634e487b7160e01b600052602160045260246000fd5b602081016003831062000ac657634e487b7160e01b600052602160045260246000fd5b91905290565b60008060006060848603121562000ae257600080fd5b62000aed84620008ba565b9250602084013567ffffffffffffffff81111562000b0a57600080fd5b62000b1886828701620008ed565b925050604084013590509250925092565b6020808252825182820181905260009190848201906040850190845b8181101562000b6c5783516001600160a01b03168352928401929184019160010162000b45565b50909695505050505050565b60208082526017908201527f436972636c6520616c72656164792068617320706f6f6c000000000000000000604082015260600190565b6000815180845260005b8181101562000bd75760208185018101518683018201520162000bb9565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b0384811682528316602082015260606040820181905260009062000c259083018462000baf565b95945050505050565b600060018060a01b038089168352808816602084015260c0604084015262000c5a60c084018862000baf565b9516606083015250608081019290925260a0909101529392505050565b6001600160a01b0385811682528416602082015260806040820181905260009062000ca59083018562000baf565b90508260608301529594505050505056fe60806040523480156200001157600080fd5b50604051620014d3380380620014d38339810160408190526200003491620001a5565b6001600081905580546001600160a81b0319166101006001600160a01b038681169190910291909117909155600280546001600160a01b03191691841691909117905560036200008582826200032e565b50600b8054600160ff199182168117909255600680548084019091557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0319166001600160a01b0387811691821790925560008181526007602090815260408083208054871688179055600890915280822080549095169095179093559251908516917f4f2ce4e40f623ca765fc0167a25cb7842ceaafb8d82d3dec26ca0d0e0d2d489691a36040516001600160a01b038416907f0abf3b3f643594d958297062a019458e27d7766629590ac621aa1000fa1298ab90600090a2505050620003fa565b80516001600160a01b03811681146200018a57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080600060608486031215620001bb57600080fd5b620001c68462000172565b92506020620001d781860162000172565b60408601519093506001600160401b0380821115620001f557600080fd5b818701915087601f8301126200020a57600080fd5b8151818111156200021f576200021f6200018f565b604051601f8201601f19908116603f011681019083821181831017156200024a576200024a6200018f565b816040528281528a868487010111156200026357600080fd5b600093505b8284101562000287578484018601518185018701529285019262000268565b60008684830101528096505050505050509250925092565b600181811c90821680620002b457607f821691505b602082108103620002d557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200032957600081815260208120601f850160051c81016020861015620003045750805b601f850160051c820191505b81811015620003255782815560010162000310565b5050505b505050565b81516001600160401b038111156200034a576200034a6200018f565b62000362816200035b84546200029f565b84620002db565b602080601f8311600181146200039a5760008415620003815750858301515b600019600386901b1c1916600185901b17855562000325565b600085815260208120601f198616915b82811015620003cb57888601518255948401946001909101908401620003aa565b5085821015620003ea5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6110c9806200040a6000396000f3fe6080604052600436106101815760003560e01c80638371e6b4116100d1578063a230c5241161008a578063cccf256011610064578063cccf25601461044f578063d0e30db014610471578063d3eb6f6114610479578063f8b2cb4f1461048e57600080fd5b8063a230c524146103e9578063b514ff3e14610419578063c30db7461461042f57600080fd5b80638371e6b41461034a5780638456cb591461035f578063939c445614610374578063953b8fb81461039c578063997072f7146103b25780639eab5253146103c757600080fd5b80632f890b931161013e5780635c975abb116101185780635c975abb146102ea5780635daf08ca1461030257806366805de5146103225780636f9fb98a1461033757600080fd5b80632f890b931461029f5780633f4ba83a146102bf578063488c2ad2146102d457600080fd5b806302d05d3f146101865780631d0f2c99146101c85780631dcbe500146101ea57806322f3e2d41461022a57806327e235e3146102445780632e1a7d4d1461027f575b600080fd5b34801561019257600080fd5b506001546101ab9061010090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101d457600080fd5b506101e86101e3366004610eda565b6104c4565b005b3480156101f657600080fd5b5061021a610205366004610efc565b60086020526000908152604090205460ff1681565b60405190151581526020016101bf565b34801561023657600080fd5b50600b5461021a9060ff1681565b34801561025057600080fd5b5061027161025f366004610efc565b60046020526000908152604090205481565b6040519081526020016101bf565b34801561028b57600080fd5b506101e861029a366004610f2c565b6105ea565b3480156102ab57600080fd5b506101e86102ba366004610efc565b6107f8565b3480156102cb57600080fd5b506101e861092e565b3480156102e057600080fd5b50610271600a5481565b3480156102f657600080fd5b5060015460ff1661021a565b34801561030e57600080fd5b506101ab61031d366004610f2c565b610967565b34801561032e57600080fd5b506101e8610991565b34801561034357600080fd5b5047610271565b34801561035657600080fd5b506101e8610a08565b34801561036b57600080fd5b506101e8610b35565b34801561038057600080fd5b50600554600954604080519283526020830191909152016101bf565b3480156103a857600080fd5b5061027160095481565b3480156103be57600080fd5b50600654610271565b3480156103d357600080fd5b506103dc610b6c565b6040516101bf9190610f45565b3480156103f557600080fd5b5061021a610404366004610efc565b60076020526000908152604090205460ff1681565b34801561042557600080fd5b5061027160055481565b34801561043b57600080fd5b506002546101ab906001600160a01b031681565b34801561045b57600080fd5b50610464610bce565b6040516101bf9190610f92565b6101e8610c5c565b34801561048557600080fd5b5061021a610dc3565b34801561049a57600080fd5b506102716104a9366004610efc565b6001600160a01b031660009081526004602052604090205490565b60015461010090046001600160a01b031633146104fc5760405162461bcd60e51b81526004016104f390610fe0565b60405180910390fd5b610504610de1565b600082116105545760405162461bcd60e51b815260206004820152601e60248201527f54617267657420616d6f756e74206d75737420626520706f736974697665000060448201526064016104f3565b4281116105a35760405162461bcd60e51b815260206004820152601d60248201527f5461726765742064617465206d75737420626520696e2066757475726500000060448201526064016104f3565b6009829055600a81905560408051838152602081018390527f36cbb4d8bcb4cdd7abe6491bf62932ce6bf0715ddff61fa0f3b5f3ad2a55b765910160405180910390a15050565b3360009081526007602052604090205460ff166106385760405162461bcd60e51b815260206004820152600c60248201526b2737ba10309036b2b6b132b960a11b60448201526064016104f3565b610640610de1565b610648610e05565b600081116106985760405162461bcd60e51b815260206004820152601760248201527f4d75737420776974686472617720736f6d657468696e6700000000000000000060448201526064016104f3565b336000908152600460205260409020548111156106ee5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b60448201526064016104f3565b336000908152600460205260408120805483929061070d90849061102d565b925050819055508060056000828254610726919061102d565b9091555050604051600090339083908381818185875af1925050503d806000811461076d576040519150601f19603f3d011682016040523d82523d6000602084013e610772565b606091505b50509050806107b55760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064016104f3565b60405182815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59060200160405180910390a2506107f56001600055565b50565b60015461010090046001600160a01b031633146108275760405162461bcd60e51b81526004016104f390610fe0565b61082f610de1565b6001600160a01b03811660009081526008602052604090205460ff161561088a5760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e481a5b9d9a5d1959608a1b60448201526064016104f3565b6001600160a01b0381166108d25760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b60448201526064016104f3565b6001600160a01b03808216600081815260086020526040808220805460ff19166001908117909155549051610100909104909316927f6c246c8894ac239253d22cd508dbe8eb7e027e0589cdd4ff16dbb4238ccd98349190a350565b60015461010090046001600160a01b0316331461095d5760405162461bcd60e51b81526004016104f390610fe0565b610965610e2f565b565b6006818154811061097757600080fd5b6000918252602090912001546001600160a01b0316905081565b60015461010090046001600160a01b031633146109c05760405162461bcd60e51b81526004016104f390610fe0565b6109c8610de1565b600b805460ff191690556040514281527f925a19753e677c9dc36a80e0fc824ca0c5b1afde494872b43daccab9ffeaffd4906020015b60405180910390a1565b3360009081526008602052604090205460ff16610a555760405162461bcd60e51b815260206004820152600b60248201526a139bdd081a5b9d9a5d195960aa1b60448201526064016104f3565b610a5d610de1565b3360009081526007602052604090205460ff1615610ab05760405162461bcd60e51b815260206004820152601060248201526f20b63932b0b23c90309036b2b6b132b960811b60448201526064016104f3565b6006805460018181019092557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b03191633908117909155600081815260076020526040808220805460ff1916909417909355915190917f0abf3b3f643594d958297062a019458e27d7766629590ac621aa1000fa1298ab91a2565b60015461010090046001600160a01b03163314610b645760405162461bcd60e51b81526004016104f390610fe0565b610965610e7c565b60606006805480602002602001604051908101604052809291908181526020018280548015610bc457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ba6575b5050505050905090565b60038054610bdb90611046565b80601f0160208091040260200160405190810160405280929190818152602001828054610c0790611046565b8015610c545780601f10610c2957610100808354040283529160200191610c54565b820191906000526020600020905b815481529060010190602001808311610c3757829003601f168201915b505050505081565b3360009081526007602052604090205460ff16610caa5760405162461bcd60e51b815260206004820152600c60248201526b2737ba10309036b2b6b132b960a11b60448201526064016104f3565b600b5460ff16610cee5760405162461bcd60e51b815260206004820152600f60248201526e506f6f6c206e6f742061637469766560881b60448201526064016104f3565b610cf6610de1565b610cfe610e05565b60003411610d475760405162461bcd60e51b81526020600482015260166024820152754d757374206465706f73697420736f6d657468696e6760501b60448201526064016104f3565b3360009081526004602052604081208054349290610d66908490611080565b925050819055503460056000828254610d7f9190611080565b909155505060405134815233907f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c49060200160405180910390a26109656001600055565b6000600954600003610dd55750600090565b50600954600554101590565b60015460ff16156109655760405163d93c066560e01b815260040160405180910390fd5b600260005403610e2857604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b610e37610eb7565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b0390911681526020016109fe565b610e84610de1565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833610e64565b60015460ff1661096557604051638dfc202b60e01b815260040160405180910390fd5b60008060408385031215610eed57600080fd5b50508035926020909101359150565b600060208284031215610f0e57600080fd5b81356001600160a01b0381168114610f2557600080fd5b9392505050565b600060208284031215610f3e57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015610f865783516001600160a01b031683529284019291840191600101610f61565b50909695505050505050565b600060208083528351808285015260005b81811015610fbf57858101830151858201604001528201610fa3565b506000604082860101526040601f19601f8301168501019250505092915050565b6020808252601a908201527f4f6e6c792063726561746f722063616e2063616c6c2074686973000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561104057611040611017565b92915050565b600181811c9082168061105a57607f821691505b60208210810361107a57634e487b7160e01b600052602260045260246000fd5b50919050565b808201808211156110405761104061101756fea264697066735822122080d48858ad22f8e3c132846909579534b8fbeaa27427aff8e286fb47d38d0a0f64736f6c6343000814003360806040523480156200001157600080fd5b5060405162001b0f38038062001b0f8339810160408190526200003491620002e8565b60016000819055805460ff191690556001600160a01b0383166200009f5760405162461bcd60e51b815260206004820152601360248201527f496e76616c69642062656e65666963696172790000000000000000000000000060448201526064015b60405180910390fd5b60008211620000f15760405162461bcd60e51b815260206004820152601560248201527f476f616c206d75737420626520706f7369746976650000000000000000000000604482015260640162000096565b428111620001425760405162461bcd60e51b815260206004820152601760248201527f446561646c696e65206d75737420626520667574757265000000000000000000604482015260640162000096565b60018054610100600160a81b0319166101006001600160a01b038981169190910291909117909155600280546001600160a01b03191691871691909117905560036200018f858262000496565b50600480546001600160a01b038581166001600160a01b0319928316811790935560058590556006849055600d805461ff0019166101001790556009805460018181019092557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0180548b84169416841790556000838152600a60209081526040808320805460ff199081168617909155600b83529281902080549093169093179091558151948552840186905283018490529091908716907f7b5c292074d28589558035864cd03ab61b59880d01a5b6228edb5adf73656e139060600160405180910390a36040516001600160a01b038716907f0abf3b3f643594d958297062a019458e27d7766629590ac621aa1000fa1298ab90600090a250505050505062000562565b80516001600160a01b0381168114620002cd57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060c087890312156200030257600080fd5b6200030d87620002b5565b955060206200031e818901620002b5565b60408901519096506001600160401b03808211156200033c57600080fd5b818a0191508a601f8301126200035157600080fd5b815181811115620003665762000366620002d2565b604051601f8201601f19908116603f01168101908382118183101715620003915762000391620002d2565b816040528281528d86848701011115620003aa57600080fd5b600093505b82841015620003ce5784840186015181850187015292850192620003af565b6000868483010152809950505050505050620003ed60608801620002b5565b92506080870151915060a087015190509295509295509295565b600181811c908216806200041c57607f821691505b6020821081036200043d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200049157600081815260208120601f850160051c810160208610156200046c5750805b601f850160051c820191505b818110156200048d5782815560010162000478565b5050505b505050565b81516001600160401b03811115620004b257620004b2620002d2565b620004ca81620004c3845462000407565b8462000443565b602080601f831160018114620005025760008415620004e95750858301515b600019600386901b1c1916600185901b1785556200048d565b600085815260208120601f198616915b82811015620005335788860151825594840194600190910190840162000512565b5085821015620005525787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61159d80620005726000396000f3fe6080604052600436106101ee5760003560e01c80638371e6b41161010d578063b5545a3c116100a0578063cc6cb19a1161006f578063cc6cb19a14610558578063cccf256014610585578063d3eb6f61146105a7578063dac6270d146105c1578063ed88c68e146105d657600080fd5b8063b5545a3c146104f3578063b564e92614610508578063c30db74614610522578063c5c4744c1461054257600080fd5b806396f300d4116100dc57806396f300d414610477578063997072f7146104995780639eab5253146104ae578063a230c524146104c357600080fd5b80638371e6b4146104105780638456cb59146104255780638c52dc411461043a578063939c44561461044f57600080fd5b8063410a1d32116101855780635daf08ca116101545780635daf08ca146103b357806369bc2f1e146103d357806369d89575146103e85780636f9fb98a146103fd57600080fd5b8063410a1d32146103255780634abfa1631461035b578063532f11791461037b5780635c975abb1461039b57600080fd5b806329dcb0cf116101c157806329dcb0cf146102b85780632f890b93146102ce57806338af3eed146102f05780633f4ba83a1461031057600080fd5b806302d05d3f146101f35780631dcbe5001461023557806322f3e2d4146102755780632636b94514610294575b600080fd5b3480156101ff57600080fd5b506001546102189061010090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561024157600080fd5b506102656102503660046113d0565b600b6020526000908152604090205460ff1681565b604051901515815260200161022c565b34801561028157600080fd5b50600d5461026590610100900460ff1681565b3480156102a057600080fd5b506102aa60055481565b60405190815260200161022c565b3480156102c457600080fd5b506102aa60065481565b3480156102da57600080fd5b506102ee6102e93660046113d0565b6105de565b005b3480156102fc57600080fd5b50600454610218906001600160a01b031681565b34801561031c57600080fd5b506102ee61071d565b34801561033157600080fd5b506102aa6103403660046113d0565b6001600160a01b031660009081526008602052604090205490565b34801561036757600080fd5b50610218610376366004611400565b610756565b34801561038757600080fd5b50600d546102659062010000900460ff1681565b3480156103a757600080fd5b5060015460ff16610265565b3480156103bf57600080fd5b506102186103ce366004611400565b610780565b3480156103df57600080fd5b50600c546102aa565b3480156103f457600080fd5b506102ee610790565b34801561040957600080fd5b50476102aa565b34801561041c57600080fd5b506102ee6109c2565b34801561043157600080fd5b506102ee610aef565b34801561044657600080fd5b506102ee610b26565b34801561045b57600080fd5b506007546005546040805192835260208301919091520161022c565b34801561048357600080fd5b5061048c610cd8565b60405161022c9190611419565b3480156104a557600080fd5b506009546102aa565b3480156104ba57600080fd5b5061048c610d3a565b3480156104cf57600080fd5b506102656104de3660046113d0565b600a6020526000908152604090205460ff1681565b3480156104ff57600080fd5b506102ee610d9a565b34801561051457600080fd5b50600d546102659060ff1681565b34801561052e57600080fd5b50600254610218906001600160a01b031681565b34801561054e57600080fd5b506102aa60075481565b34801561056457600080fd5b506102aa6105733660046113d0565b60086020526000908152604090205481565b34801561059157600080fd5b5061059a610f31565b60405161022c9190611466565b3480156105b357600080fd5b506005546007541015610265565b3480156105cd57600080fd5b506102aa610fbf565b6102ee610fe3565b60015461010090046001600160a01b031633146106165760405162461bcd60e51b815260040161060d906114b4565b60405180910390fd5b61061e6112d7565b6001600160a01b0381166000908152600b602052604090205460ff16156106795760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e481a5b9d9a5d1959608a1b604482015260640161060d565b6001600160a01b0381166106c15760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015260640161060d565b6001600160a01b038082166000818152600b6020526040808220805460ff19166001908117909155549051610100909104909316927f6c246c8894ac239253d22cd508dbe8eb7e027e0589cdd4ff16dbb4238ccd98349190a350565b60015461010090046001600160a01b0316331461074c5760405162461bcd60e51b815260040161060d906114b4565b6107546112fb565b565b600c818154811061076657600080fd5b6000918252602090912001546001600160a01b0316905081565b6009818154811061076657600080fd5b60015461010090046001600160a01b031633146107bf5760405162461bcd60e51b815260040161060d906114b4565b6107c76112d7565b6107cf611348565b600d5460ff16156108155760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481c995b19585cd95960821b604482015260640161060d565b600d5462010000900460ff16156108605760405162461bcd60e51b815260206004820152600f60248201526e1499599d5b991cc8195b98589b1959608a1b604482015260640161060d565b600554600754101580610874575060065442115b6108cc5760405162461bcd60e51b8152602060048201526024808201527f476f616c206e6f74206d657420616e6420646561646c696e65206e6f742070616044820152631cdcd95960e21b606482015260840161060d565b600d805461ffff1916600117905560045460405147916000916001600160a01b039091169083908381818185875af1925050503d806000811461092b576040519150601f19603f3d011682016040523d82523d6000602084013e610930565b606091505b50509050806109735760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b604482015260640161060d565b6004546040518381526001600160a01b03909116907f221c08a06b07a64803b3787861a3f276212fcccb51c2e6234077a9b8cb13047a906020015b60405180910390a250506107546001600055565b336000908152600b602052604090205460ff16610a0f5760405162461bcd60e51b815260206004820152600b60248201526a139bdd081a5b9d9a5d195960aa1b604482015260640161060d565b610a176112d7565b336000908152600a602052604090205460ff1615610a6a5760405162461bcd60e51b815260206004820152601060248201526f20b63932b0b23c90309036b2b6b132b960811b604482015260640161060d565b6009805460018181019092557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0180546001600160a01b031916339081179091556000818152600a6020526040808220805460ff1916909417909355915190917f0abf3b3f643594d958297062a019458e27d7766629590ac621aa1000fa1298ab91a2565b60015461010090046001600160a01b03163314610b1e5760405162461bcd60e51b815260040161060d906114b4565b610754611372565b60015461010090046001600160a01b03163314610b555760405162461bcd60e51b815260040161060d906114b4565b610b5d6112d7565b600d5460ff1615610ba95760405162461bcd60e51b8152602060048201526016602482015275119d5b991cc8185b1c9958591e481c995b19585cd95960521b604482015260640161060d565b600d5462010000900460ff1615610c025760405162461bcd60e51b815260206004820152601760248201527f526566756e647320616c726561647920656e61626c6564000000000000000000604482015260640161060d565b6006544211610c495760405162461bcd60e51b8152602060048201526013602482015272111958591b1a5b99481b9bdd081c185cdcd959606a1b604482015260640161060d565b60055460075410610c8b5760405162461bcd60e51b815260206004820152600c60248201526b11dbd85b081dd85cc81b595d60a21b604482015260640161060d565b600d805462ffff001916620100001790556040517f01fd9d9d9f159bbb346cbe96d08df5b61108b672fa79a2d53fb9c67b9717d27390610cce9042815260200190565b60405180910390a1565b6060600c805480602002602001604051908101604052809291908181526020018280548015610d3057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610d12575b5050505050905090565b60606009805480602002602001604051908101604052809291908181526020018280548015610d30576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610d12575050505050905090565b610da26112d7565b610daa611348565b600d5462010000900460ff16610df85760405162461bcd60e51b81526020600482015260136024820152721499599d5b991cc81b9bdd08195b98589b1959606a1b604482015260640161060d565b33600090815260086020526040902054610e485760405162461bcd60e51b8152602060048201526011602482015270139bdd1a1a5b99c81d1bc81c99599d5b99607a1b604482015260640161060d565b3360009081526008602052604081208054908290556007805491928392610e70908490611501565b9091555050604051600090339083908381818185875af1925050503d8060008114610eb7576040519150601f19603f3d011682016040523d82523d6000602084013e610ebc565b606091505b5050905080610eff5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b604482015260640161060d565b60405182815233907f358fe4192934d3bf28ae181feda1f4bd08ca67f5e2fad55582cce5eb67304ae9906020016109ae565b60038054610f3e9061151a565b80601f0160208091040260200160405190810160405280929190818152602001828054610f6a9061151a565b8015610fb75780601f10610f8c57610100808354040283529160200191610fb7565b820191906000526020600020905b815481529060010190602001808311610f9a57829003601f168201915b505050505081565b60006006544210610fd05750600090565b42600654610fde9190611501565b905090565b336000908152600a602052604090205460ff166110315760405162461bcd60e51b815260206004820152600c60248201526b2737ba10309036b2b6b132b960a11b604482015260640161060d565b6110396112d7565b611041611348565b600034116110895760405162461bcd60e51b81526020600482015260156024820152744d75737420646f6e61746520736f6d657468696e6760581b604482015260640161060d565b6006544211156110cd5760405162461bcd60e51b815260206004820152600f60248201526e111958591b1a5b99481c185cdcd959608a1b604482015260640161060d565b600d5460ff16156111195760405162461bcd60e51b8152602060048201526016602482015275119d5b991cc8185b1c9958591e481c995b19585cd95960521b604482015260640161060d565b600d5462010000900460ff16156111725760405162461bcd60e51b815260206004820152601e60248201527f526566756e647320656e61626c65642c2063616e6e6f7420646f6e6174650000604482015260640161060d565b600d54610100900460ff166111bb5760405162461bcd60e51b815260206004820152600f60248201526e506f6f6c206e6f742061637469766560881b604482015260640161060d565b33600090815260086020526040812054900361121457600c80546001810182556000919091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70180546001600160a01b031916331790555b3360009081526008602052604081208054349290611233908490611554565b92505081905550346007600082825461124c9190611554565b909155505060405134815233907faa13962bc79c7a0bc42cb8169b1705f0a6b55cc404ffb8a589d771ca786759789060200160405180910390a2600554600754106112cd577ffbfd8ab7c24300fa9888cd721c8565a7da56759384781283684dcf7c7c4a846b6007546040516112c491815260200190565b60405180910390a15b6107546001600055565b60015460ff16156107545760405163d93c066560e01b815260040160405180910390fd5b6113036113ad565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b039091168152602001610cce565b60026000540361136b57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b61137a6112d7565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833611330565b60015460ff1661075457604051638dfc202b60e01b815260040160405180910390fd5b6000602082840312156113e257600080fd5b81356001600160a01b03811681146113f957600080fd5b9392505050565b60006020828403121561141257600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561145a5783516001600160a01b031683529284019291840191600101611435565b50909695505050505050565b600060208083528351808285015260005b8181101561149357858101830151858201604001528201611477565b506000604082860101526040601f19601f8301168501019250505092915050565b6020808252601a908201527f4f6e6c792063726561746f722063616e2063616c6c2074686973000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b81810381811115611514576115146114eb565b92915050565b600181811c9082168061152e57607f821691505b60208210810361154e57634e487b7160e01b600052602260045260246000fd5b50919050565b80820180821115611514576115146114eb56fea264697066735822122011b37fb80d481a1ea250376a345482467d3037fafe2fad1246e69ef097b9620064736f6c6343000814003360806040523480156200001157600080fd5b50604051620022aa380380620022aa83398101604081905262000034916200021b565b60016000819055805460ff1916905580620000955760405162461bcd60e51b815260206004820152601b60248201527f496e76616c696420636f6e747269627574696f6e20616d6f756e740000000000604482015260640160405180910390fd5b60018054610100600160a81b0319166101006001600160a01b038781169190910291909117909155600280546001600160a01b0319169185169190911790556003620000e28382620003ac565b5060048190556005805460018082019092557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319166001600160a01b038781169182179092556000818152600660209081526040808320805460ff1990811688179091556007835292819020805490931690951790915592518481529092918616917f8e5acdd034f8bf8fded53cd37f8b0cb6a72b385988e92dc71f664f5dfcfcd8a7910160405180910390a3836001600160a01b03167f7f3b9effe05cfb4f31f854004de03199fd03fe56bf38a48b2aa9a9f4402d6e2342604051620001d691815260200190565b60405180910390a25050505062000478565b80516001600160a01b03811681146200020057600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156200023257600080fd5b6200023d85620001e8565b935060206200024e818701620001e8565b60408701519094506001600160401b03808211156200026c57600080fd5b818801915088601f8301126200028157600080fd5b81518181111562000296576200029662000205565b604051601f8201601f19908116603f01168101908382118183101715620002c157620002c162000205565b816040528281528b86848701011115620002da57600080fd5b600093505b82841015620002fe5784840186015181850187015292850192620002df565b6000928101909501919091525050506060959095015193969295505050565b600181811c908216806200033257607f821691505b6020821081036200035357634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003a757600081815260208120601f850160051c81016020861015620003825750805b601f850160051c820191505b81811015620003a3578281556001016200038e565b5050505b505050565b81516001600160401b03811115620003c857620003c862000205565b620003e081620003d984546200031d565b8462000359565b602080601f831160018114620004185760008415620003ff5750858301515b600019600386901b1c1916600185901b178555620003a3565b600085815260208120601f198616915b82811015620004495788860151825594840194600190910190840162000428565b5085821015620004685787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b611e2280620004886000396000f3fe60806040526004361061020f5760003560e01c80635fa0b65f11610118578063a9e6c7fb116100a0578063cd421fbf1161006f578063cd421fbf146105f1578063d7bb99ba14610608578063d9a6722014610610578063ea0e35b114610625578063eca42fba1461063a57600080fd5b8063a9e6c7fb1461057a578063b2fa1c9e14610590578063c30db746146105af578063cccf2560146105cf57600080fd5b80638a19c8bc116100e75780638a19c8bc146104c7578063997072f7146104f35780639eab525314610508578063a0f243b81461051d578063a230c5241461054a57600080fd5b80635fa0b65f1461047257806362a4e0f1146104885780638371e6b41461049d5780638456cb59146104b257600080fd5b8063346477c71161019b5780633f4ba83a1161016a5780633f4ba83a146103ee57806343662f4e1461040357806359bbcb3d146104255780635c975abb1461043a5780635daf08ca1461045257600080fd5b8063346477c714610358578063380dd901146103885780633c3ccc441461039e5780633f08399c146103b357600080fd5b806312065fe0116101e257806312065fe0146102bc578063194e36f5146102d95780631dcbe500146102ee57806322f3e2d41461031e5780632f890b931461033857600080fd5b806302d05d3f1461021457806305a95f0414610256578063063fcfcc1461026d5780630b529a171461029c575b600080fd5b34801561022057600080fd5b506001546102399061010090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561026257600080fd5b5061026b61065a565b005b34801561027957600080fd5b50600a5461028c90610100900460ff1681565b604051901515815260200161024d565b3480156102a857600080fd5b506102396102b7366004611ac0565b61097f565b3480156102c857600080fd5b50475b60405190815260200161024d565b3480156102e557600080fd5b506102396109a9565b3480156102fa57600080fd5b5061028c610309366004611af5565b60076020526000908152604090205460ff1681565b34801561032a57600080fd5b50600f5461028c9060ff1681565b34801561034457600080fd5b5061026b610353366004611af5565b610a11565b34801561036457600080fd5b5061028c610373366004611af5565b600b6020526000908152604090205460ff1681565b34801561039457600080fd5b506102cb600e5481565b3480156103aa57600080fd5b5061026b610b9a565b3480156103bf57600080fd5b5061028c6103ce366004611b17565b600c60209081526000928352604080842090915290825290205460ff1681565b3480156103fa57600080fd5b5061026b610dcd565b34801561040f57600080fd5b50610418610e04565b60405161024d9190611b54565b34801561043157600080fd5b5061028c610e66565b34801561044657600080fd5b5060015460ff1661028c565b34801561045e57600080fd5b5061023961046d366004611ac0565b610e75565b34801561047e57600080fd5b506102cb60045481565b34801561049457600080fd5b50610418610e85565b3480156104a957600080fd5b5061026b611033565b3480156104be57600080fd5b5061026b6111c6565b3480156104d357600080fd5b50600a546104e19060ff1681565b60405160ff909116815260200161024d565b3480156104ff57600080fd5b506005546102cb565b34801561051457600080fd5b506104186111fd565b34801561052957600080fd5b506102cb610538366004611af5565b60086020526000908152604090205481565b34801561055657600080fd5b5061028c610565366004611af5565b60066020526000908152604090205460ff1681565b34801561058657600080fd5b506102cb600d5481565b34801561059c57600080fd5b50600f5461028c90610100900460ff1681565b3480156105bb57600080fd5b50600254610239906001600160a01b031681565b3480156105db57600080fd5b506105e461125d565b60405161024d9190611ba1565b3480156105fd57600080fd5b506102cb62278d0081565b61026b6112eb565b34801561061c57600080fd5b506104e1600581565b34801561063157600080fd5b506104e1600c81565b34801561064657600080fd5b5061026b610655366004611bef565b611574565b600f5460ff1680156106745750600f54610100900460ff16155b6106b75760405162461bcd60e51b815260206004820152600f60248201526e506f6f6c206e6f742061637469766560881b60448201526064015b60405180910390fd5b6106bf61173e565b6106c7611762565b6106cf61178c565b6107135760405162461bcd60e51b8152602060048201526015602482015274139bdd08195d995c9e5bdb99481a185cc81c185a59605a1b60448201526064016106ae565b600a54610100900460ff16156107645760405162461bcd60e51b8152602060048201526016602482015275149bdd5b9908185b1c9958591e481c185a59081bdd5d60521b60448201526064016106ae565b600a5460009060099061077c9060019060ff16611c7a565b60ff168154811061078f5761078f611c99565b6000918252602090912001546001600160a01b031690503381146107f55760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920726563697069656e742063616e20636c61696d207061796f75740060448201526064016106ae565b600a805461ff0019166101001790556001600160a01b0381166000908152600b60205260408120805460ff191660011790556005546004546108379190611caf565b90506000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610886576040519150601f19603f3d011682016040523d82523d6000602084013e61088b565b606091505b50509050806108ce5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064016106ae565b600a546040805184815260ff90921660208301526001600160a01b038516917f882acae0bded9e8351bc191c3a610fdfdfc5c20f670b69c7569ae0fbdeda81b8910160405180910390a2600554600a5460ff161061097057600f805461ffff19166101001790556040517fd57799724d5c069e66abd552aca9bc70e8f36d98f34d0d84841983bc469a4e4a906109679042815260200190565b60405180910390a15b50505061097d6001600055565b565b6009818154811061098f57600080fd5b6000918252602090912001546001600160a01b0316905081565b600a5460009060ff1615806109c45750600954600a5460ff16115b156109cf5750600090565b600a546009906109e49060019060ff16611c7a565b60ff16815481106109f7576109f7611c99565b6000918252602090912001546001600160a01b0316919050565b60015461010090046001600160a01b03163314610a405760405162461bcd60e51b81526004016106ae90611cc6565b610a4861173e565b600f5460ff1615610a9b5760405162461bcd60e51b815260206004820181905260248201527f43616e6e6f7420696e7669746520616674657220524f5343412073746172747360448201526064016106ae565b6001600160a01b03811660009081526007602052604090205460ff1615610af65760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e481a5b9d9a5d1959608a1b60448201526064016106ae565b600554600c11610b3e5760405162461bcd60e51b815260206004820152601360248201527213585e081b595b58995c9cc81c995858da1959606a1b60448201526064016106ae565b6001600160a01b03808216600081815260076020526040808220805460ff19166001908117909155549051610100909104909316927f6c246c8894ac239253d22cd508dbe8eb7e027e0589cdd4ff16dbb4238ccd98349190a350565b3360009081526006602052604090205460ff16610be85760405162461bcd60e51b815260206004820152600c60248201526b2737ba10309036b2b6b132b960a11b60448201526064016106ae565b610bf061173e565b600f5460ff168015610c0a5750600f54610100900460ff16155b610c495760405162461bcd60e51b815260206004820152601060248201526f524f534341206e6f742061637469766560801b60448201526064016106ae565b600a54610100900460ff16610ca05760405162461bcd60e51b815260206004820152601a60248201527f43757272656e7420726f756e64206e6f742070616964206f757400000000000060448201526064016106ae565b600554600a5460ff1610610cec5760405162461bcd60e51b8152602060048201526013602482015272416c6c20726f756e647320636f6d706c65746560681b60448201526064016106ae565b62278d00600e54610cfd9190611cfd565b421015610d4c5760405162461bcd60e51b815260206004820152601960248201527f33302d646179206379636c65206e6f7420636f6d706c6574650000000000000060448201526064016106ae565b600a805460ff16906000610d5f83611d10565b82546101009290920a60ff81810219909316918316021790915542600e819055600a805461ff001981169091556040805191909316815260208101919091527ff7104ec8d70cbee7bb54da17843aa32c11b77c11c6197f005ec8b2b4f5de69589250015b60405180910390a1565b60015461010090046001600160a01b03163314610dfc5760405162461bcd60e51b81526004016106ae90611cc6565b61097d61180d565b60606009805480602002602001604051908101604052809291908181526020018280548015610e5c57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610e3e575b5050505050905090565b6000610e7061178c565b905090565b6005818154811061098f57600080fd5b60606000805b600554811015610f0757600c600060058381548110610eac57610eac611c99565b60009182526020808320909101546001600160a01b031683528281019390935260409182018120600a5460ff9081168352935220541615610ef55781610ef181611d2f565b9250505b80610eff81611d2f565b915050610e8b565b5060008167ffffffffffffffff811115610f2357610f23611d48565b604051908082528060200260200182016040528015610f4c578160200160208202803683370190505b5090506000805b60055481101561102a57600c600060058381548110610f7457610f74611c99565b60009182526020808320909101546001600160a01b031683528281019390935260409182018120600a5460ff90811683529352205416156110185760058181548110610fc257610fc2611c99565b9060005260206000200160009054906101000a90046001600160a01b0316838381518110610ff257610ff2611c99565b6001600160a01b03909216602092830291909101909101528161101481611d2f565b9250505b8061102281611d2f565b915050610f53565b50909392505050565b3360009081526007602052604090205460ff166110805760405162461bcd60e51b815260206004820152600b60248201526a139bdd081a5b9d9a5d195960aa1b60448201526064016106ae565b61108861173e565b600f5460ff16156110db5760405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f74206a6f696e20616674657220524f53434120737461727473000060448201526064016106ae565b3360009081526006602052604090205460ff161561112e5760405162461bcd60e51b815260206004820152601060248201526f20b63932b0b23c90309036b2b6b132b960811b60448201526064016106ae565b6005805460018181019092557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319163390811790915560008181526006602052604090819020805460ff191690931790925590517f7f3b9effe05cfb4f31f854004de03199fd03fe56bf38a48b2aa9a9f4402d6e23906111bc9042815260200190565b60405180910390a2565b60015461010090046001600160a01b031633146111f55760405162461bcd60e51b81526004016106ae90611cc6565b61097d61185a565b60606005805480602002602001604051908101604052809291908181526020018280548015610e5c576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610e3e575050505050905090565b6003805461126a90611d5e565b80601f016020809104026020016040519081016040528092919081815260200182805461129690611d5e565b80156112e35780601f106112b8576101008083540402835291602001916112e3565b820191906000526020600020905b8154815290600101906020018083116112c657829003601f168201915b505050505081565b3360009081526006602052604090205460ff166113395760405162461bcd60e51b815260206004820152600c60248201526b2737ba10309036b2b6b132b960a11b60448201526064016106ae565b600f5460ff1680156113535750600f54610100900460ff16155b6113915760405162461bcd60e51b815260206004820152600f60248201526e506f6f6c206e6f742061637469766560881b60448201526064016106ae565b61139961173e565b6113a1611762565b60045434146113e55760405162461bcd60e51b815260206004820152601060248201526f125b98dbdc9c9958dd08185b5bdd5b9d60821b60448201526064016106ae565b336000908152600c60209081526040808320600a5460ff9081168552925290912054161561144b5760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e4818dbdb9d1c9a589d5d1959606a1b60448201526064016106ae565b600554600a5460ff1611156114985760405162461bcd60e51b8152602060048201526013602482015272416c6c20726f756e647320636f6d706c65746560681b60448201526064016106ae565b336000818152600c60209081526040808320600a5460ff1684528252808320805460ff191660011790559282526008905290812080543492906114dc908490611cfd565b9091555050600a546040805160ff909216825234602083015233917fe18ade3c83eb782f6b575ec07c91d1dce24ca2893272cabc5d86e759110d3b65910160405180910390a261152a61178c565b1561156a57600a5460405160ff90911681527f78a0925e040149ea78c23d3aabf9577f31cb0afe2252a07da3322fb93f9c697d9060200160405180910390a15b61097d6001600055565b60015461010090046001600160a01b031633146115a35760405162461bcd60e51b81526004016106ae90611cc6565b6115ab61173e565b600f5460ff16156115f05760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e481cdd185c9d1959608a1b60448201526064016106ae565b6005805410156116375760405162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f756768206d656d6265727360701b60448201526064016106ae565b60055481146116885760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964207061796f7574206f72646572206c656e677468000000000060448201526064016106ae565b6116928282611895565b61169e60098383611a48565b50600f8054600160ff199182168117909255600a8054909116909117905542600d819055600e8190556040517f7e680909351c6b66c0ef9f13e0724b2785bb330a595466a2b2bf175f69df01e8916116f99185918591611d98565b60405180910390a160408051600181524260208201527ff7104ec8d70cbee7bb54da17843aa32c11b77c11c6197f005ec8b2b4f5de6958910160405180910390a15050565b60015460ff161561097d5760405163d93c066560e01b815260040160405180910390fd5b60026000540361178557604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6000805b60055481101561180557600c6000600583815481106117b1576117b1611c99565b60009182526020808320909101546001600160a01b031683528281019390935260409182018120600a5460ff908116835293522054166117f357600091505090565b806117fd81611d2f565b915050611790565b506001905090565b611815611a25565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b039091168152602001610dc3565b61186261173e565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833611842565b60005b81811015611a205760008383838181106118b4576118b4611c99565b90506020020160208101906118c99190611af5565b6001600160a01b03811660009081526006602052604090205490915060ff166119345760405162461bcd60e51b815260206004820181905260248201527f5061796f7574206f7264657220636f6e7461696e73206e6f6e2d6d656d62657260448201526064016106ae565b6000611941836001611cfd565b90505b83811015611a0b5784848281811061195e5761195e611c99565b90506020020160208101906119739190611af5565b6001600160a01b031685858581811061198e5761198e611c99565b90506020020160208101906119a39190611af5565b6001600160a01b0316036119f95760405162461bcd60e51b815260206004820152601960248201527f4475706c696361746520696e207061796f7574206f726465720000000000000060448201526064016106ae565b80611a0381611d2f565b915050611944565b50508080611a1890611d2f565b915050611898565b505050565b60015460ff1661097d57604051638dfc202b60e01b815260040160405180910390fd5b828054828255906000526020600020908101928215611a9b579160200282015b82811115611a9b5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190611a68565b50611aa7929150611aab565b5090565b5b80821115611aa75760008155600101611aac565b600060208284031215611ad257600080fd5b5035919050565b80356001600160a01b0381168114611af057600080fd5b919050565b600060208284031215611b0757600080fd5b611b1082611ad9565b9392505050565b60008060408385031215611b2a57600080fd5b611b3383611ad9565b9150602083013560ff81168114611b4957600080fd5b809150509250929050565b6020808252825182820181905260009190848201906040850190845b81811015611b955783516001600160a01b031683529284019291840191600101611b70565b50909695505050505050565b600060208083528351808285015260005b81811015611bce57858101830151858201604001528201611bb2565b506000604082860101526040601f19601f8301168501019250505092915050565b60008060208385031215611c0257600080fd5b823567ffffffffffffffff80821115611c1a57600080fd5b818501915085601f830112611c2e57600080fd5b813581811115611c3d57600080fd5b8660208260051b8501011115611c5257600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052601160045260246000fd5b60ff8281168282160390811115611c9357611c93611c64565b92915050565b634e487b7160e01b600052603260045260246000fd5b8082028115828204841417611c9357611c93611c64565b6020808252601a908201527f4f6e6c792063726561746f722063616e2063616c6c2074686973000000000000604082015260600190565b80820180821115611c9357611c93611c64565b600060ff821660ff8103611d2657611d26611c64565b60010192915050565b600060018201611d4157611d41611c64565b5060010190565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680611d7257607f821691505b602082108103611d9257634e487b7160e01b600052602260045260246000fd5b50919050565b6040808252810183905260008460608301825b86811015611dd9576001600160a01b03611dc484611ad9565b16825260209283019290910190600101611dab565b506020939093019390935250939250505056fea2646970667358221220cb974d4d22168fd68f32788566da5709e2730287e3a33a47a5072017b818767d64736f6c63430008140033a2646970667358221220964de270f3b90c84f3cccc73db3f50e37a3d4bab08ac1e4c1b690f209823b65264736f6c63430008140033",
  "devdoc": {
    "details": "Enforces one pool per circle and tracks all deployed pools",
    "events": {
      "PoolCreated(address,address,address,uint8)": {
        "params": {
          "circleId": "The Lens.xyz circle contract address",
          "creator": "The address that created the pool",
          "poolAddress": "The address of the newly created pool",
          "poolType": "The type of pool created (ROSCA, SAVINGS, or DONATION)"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "createDonationPool(address,string,address,uint256,uint256)": {
        "details": "Validates circle ID and ensures no duplicate pools for the same circle",
        "params": {
          "beneficiary": "The address that will receive the donated funds",
          "circleId": "The Lens.xyz circle contract address",
          "circleName": "The name of the circle",
          "deadline": "Unix timestamp when fundraising ends",
          "goalAmount": "The fundraising goal amount in wei"
        },
        "returns": {
          "_0": "The address of the newly created Donation pool"
        }
      },
      "createROSCA(address,string,uint256)": {
        "details": "Validates circle ID and ensures no duplicate pools for the same circle",
        "params": {
          "circleId": "The Lens.xyz circle contract address",
          "circleName": "The name of the circle",
          "contributionAmount": "Fixed amount each member must contribute per round"
        },
        "returns": {
          "_0": "The address of the newly created ROSCA pool"
        }
      },
      "createSavingsPool(address,string)": {
        "details": "Validates circle ID and ensures no duplicate pools for the same circle",
        "params": {
          "circleId": "The Lens.xyz circle contract address",
          "circleName": "The name of the circle"
        },
        "returns": {
          "_0": "The address of the newly created Savings pool"
        }
      },
      "getAllPools()": {
        "details": "Warning: This can be gas-intensive for large numbers of pools",
        "returns": {
          "_0": "Array of all pool addresses"
        }
      },
      "getCirclePool(address)": {
        "params": {
          "circleId": "The circle contract address"
        },
        "returns": {
          "_0": "The pool address, or zero address if no pool exists"
        }
      },
      "getPoolType(address)": {
        "params": {
          "poolAddress": "The pool address to query"
        },
        "returns": {
          "_0": "The PoolType enum value"
        }
      },
      "getTotalPools()": {
        "returns": {
          "_0": "The total pool count"
        }
      }
    },
    "title": "XershaFactory",
    "version": 1
  },
  "userdoc": {
    "events": {
      "PoolCreated(address,address,address,uint8)": {
        "notice": "Emitted when a new pool is created"
      }
    },
    "kind": "user",
    "methods": {
      "allPools(uint256)": {
        "notice": "Array of all pools created by this factory"
      },
      "circleToPool(address)": {
        "notice": "Mapping from circle contract address to pool address"
      },
      "createDonationPool(address,string,address,uint256,uint256)": {
        "notice": "Creates a new Donation pool for group fundraising"
      },
      "createROSCA(address,string,uint256)": {
        "notice": "Creates a new ROSCA (Rotating Savings and Credit Association) pool"
      },
      "createSavingsPool(address,string)": {
        "notice": "Creates a new Savings pool for collective savings"
      },
      "getAllPools()": {
        "notice": "Gets all pool addresses created by this factory"
      },
      "getCirclePool(address)": {
        "notice": "Gets the pool address for a given circle"
      },
      "getPoolType(address)": {
        "notice": "Gets the pool type for a given pool address"
      },
      "getTotalPools()": {
        "notice": "Gets the total number of pools created by this factory"
      },
      "isValidPool(address)": {
        "notice": "Mapping to validate if an address is a legitimate pool created by this factory"
      },
      "poolTypes(address)": {
        "notice": "Mapping from pool address to pool type"
      }
    },
    "notice": "Factory contract for creating and managing Xersha pools",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 230,
        "contract": "contracts/XershaFactory.sol:XershaFactory",
        "label": "circleToPool",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 235,
        "contract": "contracts/XershaFactory.sol:XershaFactory",
        "label": "isValidPool",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 241,
        "contract": "contracts/XershaFactory.sol:XershaFactory",
        "label": "poolTypes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_enum(PoolType)225)"
      },
      {
        "astId": 245,
        "contract": "contracts/XershaFactory.sol:XershaFactory",
        "label": "allPools",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(PoolType)225": {
        "encoding": "inplace",
        "label": "enum XershaFactory.PoolType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_enum(PoolType)225)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum XershaFactory.PoolType)",
        "numberOfBytes": "32",
        "value": "t_enum(PoolType)225"
      }
    }
  }
}
{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/interfaces/IXershaPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @title IXershaPool\n * @notice Base interface for all Xersha pool types\n * @dev Common interface elements shared across ROSCA, Savings, and Donation pools\n */\ninterface IXershaPool {\n    /**\n     * @notice Returns the address of the circle (Lens.xyz contract) this pool belongs to\n     * @return The circle contract address\n     */\n    function circleId() external view returns (address);\n\n    /**\n     * @notice Returns the address of the user who created this pool\n     * @return The creator's address\n     */\n    function creator() external view returns (address);\n\n    /**\n     * @notice Returns the human-readable name of the circle\n     * @return The circle name\n     */\n    function circleName() external view returns (string memory);\n\n    /**\n     * @notice Returns whether the pool is currently active\n     * @return True if pool is active, false otherwise\n     */\n    function isActive() external view returns (bool);\n\n    /**\n     * @notice Returns the list of all members in the pool\n     * @return Array of member addresses\n     */\n    function getMembers() external view returns (address[] memory);\n\n    /**\n     * @notice Returns the total number of members in the pool\n     * @return Member count\n     */\n    function getMemberCount() external view returns (uint256);\n}\n"
    },
    "contracts/pools/DonationPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"../interfaces/IXershaPool.sol\";\n\n/**\n * @title DonationPool\n * @notice Fundraising pool where circle members donate toward a specific goal and beneficiary\n * @dev Includes refund mechanism if goal is not met by deadline\n */\ncontract DonationPool is IXershaPool, ReentrancyGuard, Pausable {\n    // ========== State Variables ==========\n\n    /// @notice Address of the user who created this pool\n    address public creator;\n\n    /// @notice Address of the Lens.xyz circle contract\n    address public circleId;\n\n    /// @notice Human-readable name of the circle\n    string public circleName;\n\n    /// @notice Address that will receive the donated funds\n    address public beneficiary;\n\n    /// @notice Target fundraising amount in wei\n    uint256 public goalAmount;\n\n    /// @notice Deadline for fundraising as Unix timestamp\n    uint256 public deadline;\n\n    /// @notice Total amount raised so far\n    uint256 public totalRaised;\n\n    /// @notice Individual donation amounts per member\n    mapping(address => uint256) public donations;\n\n    /// @notice Array of all members in the pool\n    address[] public members;\n\n    /// @notice Mapping to check if an address is a member\n    mapping(address => bool) public isMember;\n\n    /// @notice Mapping to check if an address has been invited\n    mapping(address => bool) public isInvited;\n\n    /// @notice Array of addresses that have donated\n    address[] public donors;\n\n    /// @notice Whether funds have been released to beneficiary\n    bool public fundsReleased;\n\n    /// @notice Whether the pool is currently active\n    bool public isActive;\n\n    /// @notice Whether refunds are enabled (goal not met by deadline)\n    bool public refundsEnabled;\n\n    // ========== Events ==========\n\n    event PoolCreated(\n        address indexed circleId,\n        address indexed creator,\n        address beneficiary,\n        uint256 goal,\n        uint256 deadline\n    );\n    event MemberInvited(address indexed member, address indexed invitedBy);\n    event MemberJoined(address indexed member);\n    event DonationMade(address indexed donor, uint256 amount);\n    event GoalReached(uint256 totalRaised);\n    event FundsReleased(address indexed beneficiary, uint256 amount);\n    event RefundsEnabled(uint256 timestamp);\n    event RefundClaimed(address indexed donor, uint256 amount);\n\n    // ========== Modifiers ==========\n\n    modifier onlyCreator() {\n        require(msg.sender == creator, \"Only creator can call this\");\n        _;\n    }\n\n    modifier onlyMember() {\n        require(isMember[msg.sender], \"Not a member\");\n        _;\n    }\n\n    modifier onlyInvited() {\n        require(isInvited[msg.sender], \"Not invited\");\n        _;\n    }\n\n    // ========== Constructor ==========\n\n    /**\n     * @notice Creates a new Donation pool\n     * @param _creator Address of the user creating the pool\n     * @param _circleId Address of the Lens.xyz circle contract\n     * @param _circleName Name of the circle\n     * @param _beneficiary Address that will receive the funds\n     * @param _goalAmount Target fundraising amount in wei\n     * @param _deadline Deadline as Unix timestamp\n     */\n    constructor(\n        address _creator,\n        address _circleId,\n        string memory _circleName,\n        address _beneficiary,\n        uint256 _goalAmount,\n        uint256 _deadline\n    ) {\n        require(_beneficiary != address(0), \"Invalid beneficiary\");\n        require(_goalAmount > 0, \"Goal must be positive\");\n        require(_deadline > block.timestamp, \"Deadline must be future\");\n\n        creator = _creator;\n        circleId = _circleId;\n        circleName = _circleName;\n        beneficiary = _beneficiary;\n        goalAmount = _goalAmount;\n        deadline = _deadline;\n        isActive = true;\n\n        // Creator automatically becomes a member\n        members.push(_creator);\n        isMember[_creator] = true;\n        isInvited[_creator] = true;\n\n        emit PoolCreated(_circleId, _creator, _beneficiary, _goalAmount, _deadline);\n        emit MemberJoined(_creator);\n    }\n\n    // ========== Member Management ==========\n\n    /**\n     * @notice Invites a new member to the pool\n     * @dev Only creator can invite members\n     * @param member Address of the member to invite\n     */\n    function inviteMember(address member) external onlyCreator whenNotPaused {\n        require(!isInvited[member], \"Already invited\");\n        require(member != address(0), \"Invalid address\");\n\n        isInvited[member] = true;\n        emit MemberInvited(member, creator);\n    }\n\n    /**\n     * @notice Allows an invited member to join the pool\n     */\n    function joinPool() external onlyInvited whenNotPaused {\n        require(!isMember[msg.sender], \"Already a member\");\n\n        members.push(msg.sender);\n        isMember[msg.sender] = true;\n\n        emit MemberJoined(msg.sender);\n    }\n\n    // ========== Donations ==========\n\n    /**\n     * @notice Allows a member to donate to the pool\n     * @dev Only members can donate, must be before deadline\n     */\n    function donate() external payable onlyMember whenNotPaused nonReentrant {\n        require(msg.value > 0, \"Must donate something\");\n        require(block.timestamp <= deadline, \"Deadline passed\");\n        require(!fundsReleased, \"Funds already released\");\n        require(!refundsEnabled, \"Refunds enabled, cannot donate\");\n        require(isActive, \"Pool not active\");\n\n        // Track first-time donors\n        if (donations[msg.sender] == 0) {\n            donors.push(msg.sender);\n        }\n\n        donations[msg.sender] += msg.value;\n        totalRaised += msg.value;\n\n        emit DonationMade(msg.sender, msg.value);\n\n        // Check if goal reached\n        if (totalRaised >= goalAmount) {\n            emit GoalReached(totalRaised);\n        }\n    }\n\n    // ========== Fund Management ==========\n\n    /**\n     * @notice Releases funds to the beneficiary\n     * @dev Only creator can release, can only release after goal met or deadline passed\n     */\n    function releaseFunds() external onlyCreator whenNotPaused nonReentrant {\n        require(!fundsReleased, \"Already released\");\n        require(!refundsEnabled, \"Refunds enabled\");\n        require(\n            totalRaised >= goalAmount || block.timestamp > deadline,\n            \"Goal not met and deadline not passed\"\n        );\n\n        fundsReleased = true;\n        isActive = false;\n\n        uint256 amount = address(this).balance;\n\n        // Use call instead of transfer for better compatibility\n        (bool success, ) = payable(beneficiary).call{value: amount}(\"\");\n        require(success, \"Transfer failed\");\n\n        emit FundsReleased(beneficiary, amount);\n    }\n\n    /**\n     * @notice Enables refunds if goal was not met by deadline\n     * @dev Only creator can enable refunds, only after deadline if goal not met\n     */\n    function enableRefunds() external onlyCreator whenNotPaused {\n        require(!fundsReleased, \"Funds already released\");\n        require(!refundsEnabled, \"Refunds already enabled\");\n        require(block.timestamp > deadline, \"Deadline not passed\");\n        require(totalRaised < goalAmount, \"Goal was met\");\n\n        refundsEnabled = true;\n        isActive = false;\n\n        emit RefundsEnabled(block.timestamp);\n    }\n\n    /**\n     * @notice Allows a donor to claim their refund\n     * @dev Only available if refunds are enabled\n     */\n    function claimRefund() external whenNotPaused nonReentrant {\n        require(refundsEnabled, \"Refunds not enabled\");\n        require(donations[msg.sender] > 0, \"Nothing to refund\");\n\n        uint256 amount = donations[msg.sender];\n        donations[msg.sender] = 0;\n        totalRaised -= amount;\n\n        // Use call instead of transfer for better compatibility\n        (bool success, ) = payable(msg.sender).call{value: amount}(\"\");\n        require(success, \"Transfer failed\");\n\n        emit RefundClaimed(msg.sender, amount);\n    }\n\n    // ========== Emergency Functions ==========\n\n    /**\n     * @notice Pauses the contract in case of emergency\n     * @dev Only creator can pause\n     */\n    function pause() external onlyCreator {\n        _pause();\n    }\n\n    /**\n     * @notice Unpauses the contract\n     * @dev Only creator can unpause\n     */\n    function unpause() external onlyCreator {\n        _unpause();\n    }\n\n    // ========== View Functions ==========\n\n    /**\n     * @notice Gets a member's total donation amount\n     * @param donor Address of the donor\n     * @return Donation amount in wei\n     */\n    function getDonation(address donor) external view returns (uint256) {\n        return donations[donor];\n    }\n\n    /**\n     * @notice Gets the total number of members\n     * @return Member count\n     */\n    function getMemberCount() external view returns (uint256) {\n        return members.length;\n    }\n\n    /**\n     * @notice Gets all members\n     * @return Array of member addresses\n     */\n    function getMembers() external view returns (address[] memory) {\n        return members;\n    }\n\n    /**\n     * @notice Gets the total number of donors\n     * @return Donor count\n     */\n    function getDonorCount() external view returns (uint256) {\n        return donors.length;\n    }\n\n    /**\n     * @notice Gets all donors\n     * @return Array of donor addresses\n     */\n    function getDonors() external view returns (address[] memory) {\n        return donors;\n    }\n\n    /**\n     * @notice Gets the time remaining until deadline\n     * @return Seconds remaining, or 0 if deadline passed\n     */\n    function getTimeRemaining() external view returns (uint256) {\n        if (block.timestamp >= deadline) {\n            return 0;\n        }\n        return deadline - block.timestamp;\n    }\n\n    /**\n     * @notice Gets the current fundraising progress\n     * @return raised Current amount raised\n     * @return goal Goal amount\n     */\n    function getProgress() external view returns (uint256 raised, uint256 goal) {\n        return (totalRaised, goalAmount);\n    }\n\n    /**\n     * @notice Checks if the fundraising goal has been reached\n     * @return True if goal reached, false otherwise\n     */\n    function isGoalReached() external view returns (bool) {\n        return totalRaised >= goalAmount;\n    }\n\n    /**\n     * @notice Gets the contract's current balance\n     * @return Balance in wei\n     */\n    function getContractBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n}\n"
    },
    "contracts/pools/ROSCAPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"../interfaces/IXershaPool.sol\";\n\n/**\n * @title ROSCAPool\n * @notice Rotating Savings and Credit Association pool implementation\n * @dev Members contribute fixed amounts each round, one member receives the pot each round\n * Payout order is provided off-chain by the creator for fairness and transparency\n */\ncontract ROSCAPool is IXershaPool, ReentrancyGuard, Pausable {\n    // ========== Constants ==========\n\n    /// @notice Duration of each cycle/round in seconds (30 days)\n    uint256 public constant CYCLE_DURATION = 30 days;\n\n    /// @notice Minimum number of members required to start a ROSCA\n    uint8 public constant MIN_MEMBERS = 5;\n\n    /// @notice Maximum number of members allowed in a ROSCA\n    uint8 public constant MAX_MEMBERS = 12;\n\n    // ========== State Variables ==========\n\n    /// @notice Address of the user who created this pool\n    address public creator;\n\n    /// @notice Address of the Lens.xyz circle contract\n    address public circleId;\n\n    /// @notice Human-readable name of the circle\n    string public circleName;\n\n    /// @notice Fixed contribution amount per round in wei\n    uint256 public contributionAmount;\n\n    /// @notice Array of all members in the pool\n    address[] public members;\n\n    /// @notice Mapping to check if an address is a member\n    mapping(address => bool) public isMember;\n\n    /// @notice Mapping to check if an address has been invited\n    mapping(address => bool) public isInvited;\n\n    /// @notice Total amount contributed by each member across all rounds\n    mapping(address => uint256) public totalContributed;\n\n    /// @notice Array defining the order in which members receive payouts\n    address[] public payoutOrder;\n\n    /// @notice Current round number (1-indexed)\n    uint8 public currentRound;\n\n    /// @notice Whether the current round's payout has been completed\n    bool public currentRoundPaidOut;\n\n    /// @notice Mapping to track which members have received their payout\n    mapping(address => bool) public hasReceivedPayout;\n\n    /// @notice Tracks whether a member has paid for a specific round\n    mapping(address => mapping(uint8 => bool)) public hasPaid;\n\n    /// @notice Timestamp when the ROSCA was started\n    uint256 public roscaStartTime;\n\n    /// @notice Timestamp when the current round started\n    uint256 public currentRoundStartTime;\n\n    /// @notice Whether the ROSCA is currently active\n    bool public isActive;\n\n    /// @notice Whether the ROSCA has completed all rounds\n    bool public isComplete;\n\n    // ========== Events ==========\n\n    event ROSCACreated(address indexed circleId, address indexed creator, uint256 contributionAmount);\n    event MemberInvited(address indexed member, address indexed invitedBy);\n    event MemberJoined(address indexed member, uint256 timestamp);\n    event ROSCAStarted(address[] payoutOrder, uint256 startTime);\n    event ContributionMade(address indexed member, uint8 round, uint256 amount);\n    event AllMembersContributed(uint8 round);\n    event PayoutTriggered(address indexed recipient, uint256 amount, uint8 round);\n    event RoundStarted(uint8 round, uint256 startTime);\n    event ROSCACompleted(uint256 completionTime);\n\n    // ========== Modifiers ==========\n\n    modifier onlyCreator() {\n        require(msg.sender == creator, \"Only creator can call this\");\n        _;\n    }\n\n    modifier onlyMember() {\n        require(isMember[msg.sender], \"Not a member\");\n        _;\n    }\n\n    modifier onlyInvited() {\n        require(isInvited[msg.sender], \"Not invited\");\n        _;\n    }\n\n    modifier poolActive() {\n        require(isActive && !isComplete, \"Pool not active\");\n        _;\n    }\n\n    // ========== Constructor ==========\n\n    /**\n     * @notice Creates a new ROSCA pool\n     * @param _creator Address of the user creating the pool\n     * @param _circleId Address of the Lens.xyz circle contract\n     * @param _circleName Name of the circle\n     * @param _contributionAmount Fixed contribution amount per round\n     */\n    constructor(\n        address _creator,\n        address _circleId,\n        string memory _circleName,\n        uint256 _contributionAmount\n    ) {\n        require(_contributionAmount > 0, \"Invalid contribution amount\");\n\n        creator = _creator;\n        circleId = _circleId;\n        circleName = _circleName;\n        contributionAmount = _contributionAmount;\n\n        // Creator automatically becomes a member\n        members.push(_creator);\n        isMember[_creator] = true;\n        isInvited[_creator] = true;\n\n        emit ROSCACreated(_circleId, _creator, _contributionAmount);\n        emit MemberJoined(_creator, block.timestamp);\n    }\n\n    // ========== Member Management ==========\n\n    /**\n     * @notice Invites a new member to the ROSCA\n     * @dev Only creator can invite, only before ROSCA starts\n     * @param member Address of the member to invite\n     */\n    function inviteMember(address member) external onlyCreator whenNotPaused {\n        require(!isActive, \"Cannot invite after ROSCA starts\");\n        require(!isInvited[member], \"Already invited\");\n        require(members.length < MAX_MEMBERS, \"Max members reached\");\n\n        isInvited[member] = true;\n        emit MemberInvited(member, creator);\n    }\n\n    /**\n     * @notice Allows an invited member to join the pool\n     * @dev Can only join before ROSCA starts\n     */\n    function joinPool() external onlyInvited whenNotPaused {\n        require(!isActive, \"Cannot join after ROSCA starts\");\n        require(!isMember[msg.sender], \"Already a member\");\n\n        members.push(msg.sender);\n        isMember[msg.sender] = true;\n\n        emit MemberJoined(msg.sender, block.timestamp);\n    }\n\n    // ========== ROSCA Lifecycle ==========\n\n    /**\n     * @notice Starts the ROSCA with a provided payout order\n     * @dev Only creator can start, requires min members, payout order generated off-chain\n     * @param _payoutOrder Array of addresses defining payout order (must include all members exactly once)\n     */\n    function startROSCA(address[] calldata _payoutOrder) external onlyCreator whenNotPaused {\n        require(!isActive, \"Already started\");\n        require(members.length >= MIN_MEMBERS, \"Not enough members\");\n        require(_payoutOrder.length == members.length, \"Invalid payout order length\");\n\n        // Validate payout order contains all members exactly once\n        _validatePayoutOrder(_payoutOrder);\n\n        payoutOrder = _payoutOrder;\n        isActive = true;\n        currentRound = 1;\n        roscaStartTime = block.timestamp;\n        currentRoundStartTime = block.timestamp;\n\n        emit ROSCAStarted(_payoutOrder, block.timestamp);\n        emit RoundStarted(1, block.timestamp);\n    }\n\n    /**\n     * @notice Validates that payout order contains all members exactly once\n     * @param _payoutOrder The payout order array to validate\n     */\n    function _validatePayoutOrder(address[] calldata _payoutOrder) private view {\n        // Validate each member is in the payout order and check for duplicates\n        for (uint256 i = 0; i < _payoutOrder.length; i++) {\n            address recipient = _payoutOrder[i];\n            require(isMember[recipient], \"Payout order contains non-member\");\n\n            // Check for duplicates by using a simple loop (gas-efficient for small arrays)\n            for (uint256 j = i + 1; j < _payoutOrder.length; j++) {\n                require(_payoutOrder[i] != _payoutOrder[j], \"Duplicate in payout order\");\n            }\n        }\n    }\n\n    /**\n     * @notice Allows a member to contribute for the current round\n     * @dev Must send exact contribution amount, can only contribute once per round\n     */\n    function contribute() external payable onlyMember poolActive whenNotPaused nonReentrant {\n        require(msg.value == contributionAmount, \"Incorrect amount\");\n        require(!hasPaid[msg.sender][currentRound], \"Already contributed\");\n        require(currentRound <= members.length, \"All rounds complete\");\n\n        hasPaid[msg.sender][currentRound] = true;\n        totalContributed[msg.sender] += msg.value;\n\n        emit ContributionMade(msg.sender, currentRound, msg.value);\n\n        if (_everyonePaid()) {\n            emit AllMembersContributed(currentRound);\n        }\n    }\n\n    /**\n     * @notice Triggers the payout for the current round\n     * @dev Only the designated recipient can trigger their own payout\n     * Requires all members to have contributed for the current round\n     */\n    function triggerPayout() external poolActive whenNotPaused nonReentrant {\n        require(_everyonePaid(), \"Not everyone has paid\");\n        require(!currentRoundPaidOut, \"Round already paid out\");\n\n        address recipient = payoutOrder[currentRound - 1];\n        require(msg.sender == recipient, \"Only recipient can claim payout\");\n\n        currentRoundPaidOut = true;\n        hasReceivedPayout[recipient] = true;\n\n        uint256 payoutAmount = contributionAmount * members.length;\n\n        // Use call instead of transfer for better compatibility\n        (bool success, ) = payable(recipient).call{value: payoutAmount}(\"\");\n        require(success, \"Transfer failed\");\n\n        emit PayoutTriggered(recipient, payoutAmount, currentRound);\n\n        // Check if ROSCA is complete\n        if (currentRound >= members.length) {\n            isComplete = true;\n            isActive = false;\n            emit ROSCACompleted(block.timestamp);\n        }\n    }\n\n    /**\n     * @notice Starts the next round after the cycle duration has passed\n     * @dev Any member can call this after the 30-day cycle is complete\n     */\n    function startNextRound() external onlyMember whenNotPaused {\n        require(isActive && !isComplete, \"ROSCA not active\");\n        require(currentRoundPaidOut, \"Current round not paid out\");\n        require(currentRound < members.length, \"All rounds complete\");\n        require(\n            block.timestamp >= currentRoundStartTime + CYCLE_DURATION,\n            \"30-day cycle not complete\"\n        );\n\n        currentRound++;\n        currentRoundStartTime = block.timestamp;\n        currentRoundPaidOut = false;\n\n        emit RoundStarted(currentRound, block.timestamp);\n    }\n\n    // ========== Emergency Functions ==========\n\n    /**\n     * @notice Pauses the contract in case of emergency\n     * @dev Only creator can pause\n     */\n    function pause() external onlyCreator {\n        _pause();\n    }\n\n    /**\n     * @notice Unpauses the contract\n     * @dev Only creator can unpause\n     */\n    function unpause() external onlyCreator {\n        _unpause();\n    }\n\n    // ========== View Functions ==========\n\n    /**\n     * @notice Checks if everyone has paid for the current round\n     * @return True if all members have contributed, false otherwise\n     */\n    function everyonePaid() external view returns (bool) {\n        return _everyonePaid();\n    }\n\n    /**\n     * @notice Internal function to check if everyone has paid\n     * @return True if all members have contributed, false otherwise\n     */\n    function _everyonePaid() private view returns (bool) {\n        for (uint256 i = 0; i < members.length; i++) {\n            if (!hasPaid[members[i]][currentRound]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @notice Gets the current round's recipient\n     * @return Address of the member who should receive payout this round\n     */\n    function getCurrentRecipient() external view returns (address) {\n        if (currentRound == 0 || currentRound > payoutOrder.length) {\n            return address(0);\n        }\n        return payoutOrder[currentRound - 1];\n    }\n\n    /**\n     * @notice Gets the total number of members\n     * @return Member count\n     */\n    function getMemberCount() external view returns (uint256) {\n        return members.length;\n    }\n\n    /**\n     * @notice Gets all members\n     * @return Array of member addresses\n     */\n    function getMembers() external view returns (address[] memory) {\n        return members;\n    }\n\n    /**\n     * @notice Gets the complete payout order\n     * @return Array of addresses in payout order\n     */\n    function getPayoutOrder() external view returns (address[] memory) {\n        return payoutOrder;\n    }\n\n    /**\n     * @notice Gets list of members who have contributed in the current round\n     * @return Array of addresses who have paid\n     */\n    function getRoundContributors() external view returns (address[] memory) {\n        uint256 contributorCount = 0;\n\n        // Count contributors\n        for (uint256 i = 0; i < members.length; i++) {\n            if (hasPaid[members[i]][currentRound]) {\n                contributorCount++;\n            }\n        }\n\n        // Build contributor array\n        address[] memory contributors = new address[](contributorCount);\n        uint256 index = 0;\n\n        for (uint256 i = 0; i < members.length; i++) {\n            if (hasPaid[members[i]][currentRound]) {\n                contributors[index] = members[i];\n                index++;\n            }\n        }\n\n        return contributors;\n    }\n\n    /**\n     * @notice Gets the contract's current balance\n     * @return Balance in wei\n     */\n    function getBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n}\n"
    },
    "contracts/pools/SavingsPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"../interfaces/IXershaPool.sol\";\n\n/**\n * @title SavingsPool\n * @notice Collective savings pool where members can deposit and withdraw freely\n * @dev Members maintain individual balances and can set collective savings goals\n */\ncontract SavingsPool is IXershaPool, ReentrancyGuard, Pausable {\n    // ========== State Variables ==========\n\n    /// @notice Address of the user who created this pool\n    address public creator;\n\n    /// @notice Address of the Lens.xyz circle contract\n    address public circleId;\n\n    /// @notice Human-readable name of the circle\n    string public circleName;\n\n    /// @notice Individual balances for each member\n    mapping(address => uint256) public balances;\n\n    /// @notice Total amount saved across all members\n    uint256 public totalSaved;\n\n    /// @notice Array of all members in the pool\n    address[] public members;\n\n    /// @notice Mapping to check if an address is a member\n    mapping(address => bool) public isMember;\n\n    /// @notice Mapping to check if an address has been invited\n    mapping(address => bool) public isInvited;\n\n    /// @notice Optional target savings amount set by creator\n    uint256 public targetAmount;\n\n    /// @notice Optional target date for reaching the goal\n    uint256 public targetDate;\n\n    /// @notice Whether the pool is currently active\n    bool public isActive;\n\n    // ========== Events ==========\n\n    event PoolCreated(address indexed circleId, address indexed creator);\n    event MemberInvited(address indexed member, address indexed invitedBy);\n    event MemberJoined(address indexed member);\n    event Deposited(address indexed member, uint256 amount);\n    event Withdrawn(address indexed member, uint256 amount);\n    event TargetSet(uint256 amount, uint256 date);\n    event PoolClosed(uint256 timestamp);\n\n    // ========== Modifiers ==========\n\n    modifier onlyCreator() {\n        require(msg.sender == creator, \"Only creator can call this\");\n        _;\n    }\n\n    modifier onlyMember() {\n        require(isMember[msg.sender], \"Not a member\");\n        _;\n    }\n\n    modifier onlyInvited() {\n        require(isInvited[msg.sender], \"Not invited\");\n        _;\n    }\n\n    modifier poolIsActive() {\n        require(isActive, \"Pool not active\");\n        _;\n    }\n\n    // ========== Constructor ==========\n\n    /**\n     * @notice Creates a new Savings pool\n     * @param _creator Address of the user creating the pool\n     * @param _circleId Address of the Lens.xyz circle contract\n     * @param _circleName Name of the circle\n     */\n    constructor(address _creator, address _circleId, string memory _circleName) {\n        creator = _creator;\n        circleId = _circleId;\n        circleName = _circleName;\n        isActive = true;\n\n        // Creator automatically becomes a member\n        members.push(_creator);\n        isMember[_creator] = true;\n        isInvited[_creator] = true;\n\n        emit PoolCreated(_circleId, _creator);\n        emit MemberJoined(_creator);\n    }\n\n    // ========== Member Management ==========\n\n    /**\n     * @notice Invites a new member to the pool\n     * @dev Only creator can invite members\n     * @param member Address of the member to invite\n     */\n    function inviteMember(address member) external onlyCreator whenNotPaused {\n        require(!isInvited[member], \"Already invited\");\n        require(member != address(0), \"Invalid address\");\n\n        isInvited[member] = true;\n        emit MemberInvited(member, creator);\n    }\n\n    /**\n     * @notice Allows an invited member to join the pool\n     */\n    function joinPool() external onlyInvited whenNotPaused {\n        require(!isMember[msg.sender], \"Already a member\");\n\n        members.push(msg.sender);\n        isMember[msg.sender] = true;\n\n        emit MemberJoined(msg.sender);\n    }\n\n    // ========== Deposits & Withdrawals ==========\n\n    /**\n     * @notice Allows a member to deposit funds into their savings\n     * @dev Amount is tracked in member's individual balance\n     */\n    function deposit() external payable onlyMember poolIsActive whenNotPaused nonReentrant {\n        require(msg.value > 0, \"Must deposit something\");\n\n        balances[msg.sender] += msg.value;\n        totalSaved += msg.value;\n\n        emit Deposited(msg.sender, msg.value);\n    }\n\n    /**\n     * @notice Allows a member to withdraw from their savings balance\n     * @param amount Amount to withdraw in wei\n     */\n    function withdraw(uint256 amount) external onlyMember whenNotPaused nonReentrant {\n        require(amount > 0, \"Must withdraw something\");\n        require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n        balances[msg.sender] -= amount;\n        totalSaved -= amount;\n\n        // Use call instead of transfer for better compatibility\n        (bool success, ) = payable(msg.sender).call{value: amount}(\"\");\n        require(success, \"Transfer failed\");\n\n        emit Withdrawn(msg.sender, amount);\n    }\n\n    // ========== Goal Management ==========\n\n    /**\n     * @notice Sets or updates the savings goal for the pool\n     * @dev Only creator can set goals\n     * @param _amount Target savings amount in wei\n     * @param _date Target date as Unix timestamp\n     */\n    function setTarget(uint256 _amount, uint256 _date) external onlyCreator whenNotPaused {\n        require(_amount > 0, \"Target amount must be positive\");\n        require(_date > block.timestamp, \"Target date must be in future\");\n\n        targetAmount = _amount;\n        targetDate = _date;\n\n        emit TargetSet(_amount, _date);\n    }\n\n    // ========== Pool Management ==========\n\n    /**\n     * @notice Closes the pool, preventing further deposits\n     * @dev Only creator can close. Members can still withdraw their balances.\n     */\n    function closePool() external onlyCreator whenNotPaused {\n        isActive = false;\n        emit PoolClosed(block.timestamp);\n    }\n\n    /**\n     * @notice Pauses the contract in case of emergency\n     * @dev Only creator can pause\n     */\n    function pause() external onlyCreator {\n        _pause();\n    }\n\n    /**\n     * @notice Unpauses the contract\n     * @dev Only creator can unpause\n     */\n    function unpause() external onlyCreator {\n        _unpause();\n    }\n\n    // ========== View Functions ==========\n\n    /**\n     * @notice Gets a member's savings balance\n     * @param member Address of the member\n     * @return Balance in wei\n     */\n    function getBalance(address member) external view returns (uint256) {\n        return balances[member];\n    }\n\n    /**\n     * @notice Gets the total number of members\n     * @return Member count\n     */\n    function getMemberCount() external view returns (uint256) {\n        return members.length;\n    }\n\n    /**\n     * @notice Gets all members\n     * @return Array of member addresses\n     */\n    function getMembers() external view returns (address[] memory) {\n        return members;\n    }\n\n    /**\n     * @notice Gets the current progress toward the savings goal\n     * @return current Current total savings\n     * @return target Target savings amount\n     */\n    function getProgress() external view returns (uint256 current, uint256 target) {\n        return (totalSaved, targetAmount);\n    }\n\n    /**\n     * @notice Checks if the savings goal has been reached\n     * @return True if target is set and reached, false otherwise\n     */\n    function isGoalReached() external view returns (bool) {\n        if (targetAmount == 0) return false;\n        return totalSaved >= targetAmount;\n    }\n\n    /**\n     * @notice Gets the contract's current balance\n     * @return Balance in wei\n     */\n    function getContractBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n}\n"
    },
    "contracts/XershaFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"./pools/ROSCAPool.sol\";\nimport \"./pools/SavingsPool.sol\";\nimport \"./pools/DonationPool.sol\";\n\n/**\n * @title XershaFactory\n * @notice Factory contract for creating and managing Xersha pools\n * @dev Enforces one pool per circle and tracks all deployed pools\n */\ncontract XershaFactory {\n    // ========== Types ==========\n\n    enum PoolType {\n        ROSCA,\n        SAVINGS,\n        DONATION\n    }\n\n    // ========== State Variables ==========\n\n    /// @notice Mapping from circle contract address to pool address\n    mapping(address => address) public circleToPool;\n\n    /// @notice Mapping to validate if an address is a legitimate pool created by this factory\n    mapping(address => bool) public isValidPool;\n\n    /// @notice Mapping from pool address to pool type\n    mapping(address => PoolType) public poolTypes;\n\n    /// @notice Array of all pools created by this factory\n    address[] public allPools;\n\n    // ========== Events ==========\n\n    /**\n     * @notice Emitted when a new pool is created\n     * @param circleId The Lens.xyz circle contract address\n     * @param poolAddress The address of the newly created pool\n     * @param creator The address that created the pool\n     * @param poolType The type of pool created (ROSCA, SAVINGS, or DONATION)\n     */\n    event PoolCreated(\n        address indexed circleId,\n        address indexed poolAddress,\n        address indexed creator,\n        PoolType poolType\n    );\n\n    // ========== Pool Creation Functions ==========\n\n    /**\n     * @notice Creates a new ROSCA (Rotating Savings and Credit Association) pool\n     * @dev Validates circle ID and ensures no duplicate pools for the same circle\n     * @param circleId The Lens.xyz circle contract address\n     * @param circleName The name of the circle\n     * @param contributionAmount Fixed amount each member must contribute per round\n     * @return The address of the newly created ROSCA pool\n     */\n    function createROSCA(\n        address circleId,\n        string memory circleName,\n        uint256 contributionAmount\n    ) external returns (address) {\n        _validateCircleId(circleId);\n        require(circleToPool[circleId] == address(0), \"Circle already has pool\");\n        require(contributionAmount > 0, \"Invalid contribution amount\");\n\n        // Deploy new ROSCA pool\n        ROSCAPool pool = new ROSCAPool(msg.sender, circleId, circleName, contributionAmount);\n\n        address poolAddress = address(pool);\n        _registerPool(circleId, poolAddress, PoolType.ROSCA);\n\n        emit PoolCreated(circleId, poolAddress, msg.sender, PoolType.ROSCA);\n        return poolAddress;\n    }\n\n    /**\n     * @notice Creates a new Savings pool for collective savings\n     * @dev Validates circle ID and ensures no duplicate pools for the same circle\n     * @param circleId The Lens.xyz circle contract address\n     * @param circleName The name of the circle\n     * @return The address of the newly created Savings pool\n     */\n    function createSavingsPool(\n        address circleId,\n        string memory circleName\n    ) external returns (address) {\n        _validateCircleId(circleId);\n        require(circleToPool[circleId] == address(0), \"Circle already has pool\");\n\n        // Deploy new Savings pool\n        SavingsPool pool = new SavingsPool(msg.sender, circleId, circleName);\n\n        address poolAddress = address(pool);\n        _registerPool(circleId, poolAddress, PoolType.SAVINGS);\n\n        emit PoolCreated(circleId, poolAddress, msg.sender, PoolType.SAVINGS);\n        return poolAddress;\n    }\n\n    /**\n     * @notice Creates a new Donation pool for group fundraising\n     * @dev Validates circle ID and ensures no duplicate pools for the same circle\n     * @param circleId The Lens.xyz circle contract address\n     * @param circleName The name of the circle\n     * @param beneficiary The address that will receive the donated funds\n     * @param goalAmount The fundraising goal amount in wei\n     * @param deadline Unix timestamp when fundraising ends\n     * @return The address of the newly created Donation pool\n     */\n    function createDonationPool(\n        address circleId,\n        string memory circleName,\n        address beneficiary,\n        uint256 goalAmount,\n        uint256 deadline\n    ) external returns (address) {\n        _validateCircleId(circleId);\n        require(circleToPool[circleId] == address(0), \"Circle already has pool\");\n        require(beneficiary != address(0), \"Invalid beneficiary\");\n        require(goalAmount > 0, \"Invalid goal\");\n        require(deadline > block.timestamp, \"Invalid deadline\");\n\n        // Deploy new Donation pool\n        DonationPool pool = new DonationPool(\n            msg.sender,\n            circleId,\n            circleName,\n            beneficiary,\n            goalAmount,\n            deadline\n        );\n\n        address poolAddress = address(pool);\n        _registerPool(circleId, poolAddress, PoolType.DONATION);\n\n        emit PoolCreated(circleId, poolAddress, msg.sender, PoolType.DONATION);\n        return poolAddress;\n    }\n\n    // ========== Internal Functions ==========\n\n    /**\n     * @notice Validates that the circle ID is not the zero address\n     * @dev Circle IDs can reference contracts on other chains (e.g., Lens circles on Polygon)\n     * @param circleId The circle address to validate\n     */\n    function _validateCircleId(address circleId) private pure {\n        require(circleId != address(0), \"Zero address not allowed\");\n    }\n\n    /**\n     * @notice Registers a newly created pool in the factory's tracking systems\n     * @param circleId The circle contract address\n     * @param poolAddress The address of the newly created pool\n     * @param poolType The type of pool (ROSCA, SAVINGS, or DONATION)\n     */\n    function _registerPool(address circleId, address poolAddress, PoolType poolType) private {\n        circleToPool[circleId] = poolAddress;\n        isValidPool[poolAddress] = true;\n        poolTypes[poolAddress] = poolType;\n        allPools.push(poolAddress);\n    }\n\n    // ========== View Functions ==========\n\n    /**\n     * @notice Gets the pool address for a given circle\n     * @param circleId The circle contract address\n     * @return The pool address, or zero address if no pool exists\n     */\n    function getCirclePool(address circleId) external view returns (address) {\n        return circleToPool[circleId];\n    }\n\n    /**\n     * @notice Gets the total number of pools created by this factory\n     * @return The total pool count\n     */\n    function getTotalPools() external view returns (uint256) {\n        return allPools.length;\n    }\n\n    /**\n     * @notice Gets all pool addresses created by this factory\n     * @dev Warning: This can be gas-intensive for large numbers of pools\n     * @return Array of all pool addresses\n     */\n    function getAllPools() external view returns (address[] memory) {\n        return allPools;\n    }\n\n    /**\n     * @notice Gets the pool type for a given pool address\n     * @param poolAddress The pool address to query\n     * @return The PoolType enum value\n     */\n    function getPoolType(address poolAddress) external view returns (PoolType) {\n        require(isValidPool[poolAddress], \"Invalid pool address\");\n        return poolTypes[poolAddress];\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
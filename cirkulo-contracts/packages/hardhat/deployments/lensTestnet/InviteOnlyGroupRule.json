{
  "address": "0x462fa642D020Cef3eEfCbF1ff774B9585663635E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_backend",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInviteCode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InviteAlreadyUsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InviteExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InviteNotCancellable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InviteNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyBackend",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldBackend",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newBackend",
          "type": "address"
        }
      ],
      "name": "BackendUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "configSalt",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "inviter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "inviteCodeHash",
          "type": "bytes32"
        }
      ],
      "name": "InviteCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "configSalt",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "inviter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "inviteCodeHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiresAt",
          "type": "uint256"
        }
      ],
      "name": "InviteRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "configSalt",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "invitee",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "inviteCodeHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "inviter",
          "type": "address"
        }
      ],
      "name": "InviteUsed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "configSalt",
          "type": "bytes32"
        }
      ],
      "name": "RuleConfigured",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "backend",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "configSalt",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "inviteCodeHash",
          "type": "bytes32"
        }
      ],
      "name": "cancelInvite",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "configSalt",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "key",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "value",
              "type": "bytes"
            }
          ],
          "internalType": "struct KeyValue[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "name": "configure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "configSalt",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "inviteCodeHash",
          "type": "bytes32"
        }
      ],
      "name": "getInvite",
      "outputs": [
        {
          "internalType": "address",
          "name": "inviter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "expiresAt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "used",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "usedBy",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "invites",
      "outputs": [
        {
          "internalType": "address",
          "name": "inviter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "expiresAt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "used",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "usedBy",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "key",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "value",
              "type": "bytes"
            }
          ],
          "internalType": "struct KeyValue[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "key",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "value",
              "type": "bytes"
            }
          ],
          "internalType": "struct KeyValue[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "name": "processAddition",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "configSalt",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "key",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "value",
              "type": "bytes"
            }
          ],
          "internalType": "struct KeyValue[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "key",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "value",
              "type": "bytes"
            }
          ],
          "internalType": "struct KeyValue[]",
          "name": "ruleParams",
          "type": "tuple[]"
        }
      ],
      "name": "processJoining",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "key",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "value",
              "type": "bytes"
            }
          ],
          "internalType": "struct KeyValue[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "key",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "value",
              "type": "bytes"
            }
          ],
          "internalType": "struct KeyValue[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "name": "processLeaving",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "key",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "value",
              "type": "bytes"
            }
          ],
          "internalType": "struct KeyValue[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "key",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "value",
              "type": "bytes"
            }
          ],
          "internalType": "struct KeyValue[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "name": "processRemoval",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "configSalt",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "inviter",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "inviteCodeHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "expiresAt",
          "type": "uint256"
        }
      ],
      "name": "registerInvite",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newBackend",
          "type": "address"
        }
      ],
      "name": "updateBackend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdfc8a99b4ef9bdd967a1db94f17504110f1f38527bb9088be857f7e63b2e5bcf",
  "receipt": {
    "to": null,
    "from": "0xCc4F1cae67c5c1216B298152Ea4323fd2475E496",
    "contractAddress": "0x462fa642D020Cef3eEfCbF1ff774B9585663635E",
    "transactionIndex": 0,
    "gasUsed": "479923",
    "logsBloom": "0x
    "blockHash": "0xfce05afe84487be88faf397839c2369b20a636c4f93f27dd764cf78ce4e3c1a4",
    "transactionHash": "0xdfc8a99b4ef9bdd967a1db94f17504110f1f38527bb9088be857f7e63b2e5bcf",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4172203,
        "transactionHash": "0xdfc8a99b4ef9bdd967a1db94f17504110f1f38527bb9088be857f7e63b2e5bcf",
        "address": "0x000000000000000000000000000000000000800A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x000000000000000000000000cc4f1cae67c5c1216b298152ea4323fd2475e496",
          "0x0000000000000000000000000000000000000000000000000000000000008001"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000055d68675a982fa",
        "logIndex": 0,
        "blockHash": "0xfce05afe84487be88faf397839c2369b20a636c4f93f27dd764cf78ce4e3c1a4"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4172203,
        "transactionHash": "0xdfc8a99b4ef9bdd967a1db94f17504110f1f38527bb9088be857f7e63b2e5bcf",
        "address": "0x000000000000000000000000000000000000800A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000008001",
          "0x000000000000000000000000cc4f1cae67c5c1216b298152ea4323fd2475e496"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001203eff8e7bf0b",
        "logIndex": 1,
        "blockHash": "0xfce05afe84487be88faf397839c2369b20a636c4f93f27dd764cf78ce4e3c1a4"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4172203,
        "transactionHash": "0xdfc8a99b4ef9bdd967a1db94f17504110f1f38527bb9088be857f7e63b2e5bcf",
        "address": "0x462fa642D020Cef3eEfCbF1ff774B9585663635E",
        "topics": [
          "0x37f6c561371bb449a598aaf7e5528fc87ad233e82669756cd67fec9c5f665a7b",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cc4f1cae67c5c1216b298152ea4323fd2475e496"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xfce05afe84487be88faf397839c2369b20a636c4f93f27dd764cf78ce4e3c1a4"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4172203,
        "transactionHash": "0xdfc8a99b4ef9bdd967a1db94f17504110f1f38527bb9088be857f7e63b2e5bcf",
        "address": "0x0000000000000000000000000000000000008008",
        "topics": [
          "0x27fe8c0b49f49507b9d4fe5968c9f49edfe5c9df277d433a07a0717ede97638d"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a50000000000000000000000000000000000000000000000000000000000008008000000000000000000000000000000000000000000000000000000000000800494679661e6657fa5f049b0bcd334b1b873d0f3a7e4f579b5624fe2872ccd6d9e",
        "logIndex": 3,
        "blockHash": "0xfce05afe84487be88faf397839c2369b20a636c4f93f27dd764cf78ce4e3c1a4"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4172203,
        "transactionHash": "0xdfc8a99b4ef9bdd967a1db94f17504110f1f38527bb9088be857f7e63b2e5bcf",
        "address": "0x0000000000000000000000000000000000008008",
        "topics": [
          "0x3a36e47291f4201faf137fab081d92295bce2d53be2c6ca68ba82c7faa9ce241",
          "0x0000000000000000000000000000000000000000000000000000000000008004",
          "0x94679661e6657fa5f049b0bcd334b1b873d0f3a7e4f579b5624fe2872ccd6d9e"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000ca0608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063666981891161008c5780638da5cb5b116100665780638da5cb5b1461023c578063c0ed969a1461024f578063c585084c14610262578063f2fde38b1461027557600080fd5b806366698189146101c65780636ad37721146101d95780636e1e352a146101ec57600080fd5b806307bcf26a146100d4578063099e4133146100ec578063363c68ac1461011c5780635254cf3a1461013357806353b557511461011c57806363858aa214610146575b600080fd5b6100ea6100e23660046108bb565b505050505050565b005b6000546100ff906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100ea61012a366004610945565b50505050505050565b6100ea6101413660046109e0565b610288565b6101936101543660046109e0565b600260208181526000938452604080852090915291835291208054600182015491909201546001600160a01b039283169260ff82169161010090041684565b604080516001600160a01b0395861681526020810194909452911515918301919091529091166060820152608001610113565b6100ea6101d4366004610a02565b610395565b6100ea6101e73660046108bb565b6104b7565b6101936101fa3660046109e0565b600091825260026020818152604080852093855292905291208054600182015491909201546001600160a01b0392831693919260ff8216926101009092041690565b6001546100ff906001600160a01b031681565b6100ea61025d366004610a3d565b610644565b6100ea610270366004610a5f565b6106e6565b6100ea610283366004610a3d565b610716565b6000546001600160a01b031633146102b357604051636bbaa1c160e01b815260040160405180910390fd5b6000828152600260209081526040808320848452909152902080546001600160a01b03166102f457604051630adf970d60e21b815260040160405180910390fd5b600281015460ff161561031a57604051632c67327360e11b815260040160405180910390fd5b805460405183916001600160a01b03169085907f39b6e318ad96506a71238b70e1a7fe40fb06542a75531bf59aa97875d603ce5790600090a450600091825260026020818152604080852093855292905290822080546001600160a01b031916815560018101929092550180546001600160a81b0319169055565b6000546001600160a01b031633146103c057604051636bbaa1c160e01b815260040160405180910390fd5b6001600160a01b0383166103e75760405163e6c4247b60e01b815260040160405180910390fd5b8161040557604051633b19367b60e01b815260040160405180910390fd5b60008481526002602081815260408084208685529091529091209081015460ff161561044457604051634209eb7d60e01b815260040160405180910390fd5b80546001600160a01b0319166001600160a01b0385169081178255600182018390556002820180546001600160a81b031916905560405183815284919087907f6e074b649c1f27bd566a71f5f15443ca61b17b2a02554ca9edca137a8aa2aafa9060200160405180910390a45050505050565b6001600160a01b0385166104de5760405163e6c4247b60e01b815260040160405180910390fd5b60006104ea838361078a565b9050805160000361050e57604051633b19367b60e01b815260040160405180910390fd5b6000816040516020016105219190610aab565b60408051601f19818403018152918152815160209283012060008b81526002845282812082825290935291208054919250906001600160a01b031661057957604051630adf970d60e21b815260040160405180910390fd5b600281015460ff161561059f57604051634209eb7d60e01b815260040160405180910390fd5b6001810154158015906105b55750806001015442115b156105d357604051633c8a622d60e21b815260040160405180910390fd5b6002810180546001600160a01b038a811661010081026001600160a81b03199093169290921760011790925582546040519216825283918b907f7b4e33ed87bbe576349a5310b0a0588c3fe0437cef71142d686bbec9d8abc3bd9060200160405180910390a4505050505050505050565b6001546001600160a01b0316331461066f57604051635fc483c560e01b815260040160405180910390fd5b6001600160a01b0381166106965760405163e6c4247b60e01b815260040160405180910390fd5b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f37f6c561371bb449a598aaf7e5528fc87ad233e82669756cd67fec9c5f665a7b9190a35050565b60405183907f584dfcec25d035967c3849e8ff0ad02f80bdc315b282d68c5604e27a740d06b190600090a2505050565b6001546001600160a01b0316331461074157604051635fc483c560e01b815260040160405180910390fd5b6001600160a01b0381166107685760405163e6c4247b60e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b606060005b8281101561083b577f5797e5205a2d50babd9c0c4d9ab1fc2eb654e110118c575a0c6efc620e7e055e8484838181106107ca576107ca610ada565b90506020028101906107dc9190610af0565b3503610829578383828181106107f4576107f4610ada565b90506020028101906108069190610af0565b610814906020810190610b10565b8101906108219190610b6d565b91505061084d565b8061083381610c1e565b91505061078f565b50506040805160208101909152600081525b92915050565b80356001600160a01b038116811461086a57600080fd5b919050565b60008083601f84011261088157600080fd5b50813567ffffffffffffffff81111561089957600080fd5b6020830191508360208260051b85010111156108b457600080fd5b9250929050565b600080600080600080608087890312156108d457600080fd5b863595506108e460208801610853565b9450604087013567ffffffffffffffff8082111561090157600080fd5b61090d8a838b0161086f565b9096509450606089013591508082111561092657600080fd5b5061093389828a0161086f565b979a9699509497509295939492505050565b600080600080600080600060a0888a03121561096057600080fd5b8735965061097060208901610853565b955061097e60408901610853565b9450606088013567ffffffffffffffff8082111561099b57600080fd5b6109a78b838c0161086f565b909650945060808a01359150808211156109c057600080fd5b506109cd8a828b0161086f565b989b979a50959850939692959293505050565b600080604083850312156109f357600080fd5b50508035926020909101359150565b60008060008060808587031215610a1857600080fd5b84359350610a2860208601610853565b93969395505050506040820135916060013590565b600060208284031215610a4f57600080fd5b610a5882610853565b9392505050565b600080600060408486031215610a7457600080fd5b83359250602084013567ffffffffffffffff811115610a9257600080fd5b610a9e8682870161086f565b9497909650939450505050565b6000825160005b81811015610acc5760208186018101518583015201610ab2565b506000920191825250919050565b634e487b7160e01b600052603260045260246000fd5b60008235603e19833603018112610b0657600080fd5b9190910192915050565b6000808335601e19843603018112610b2757600080fd5b83018035915067ffffffffffffffff821115610b4257600080fd5b6020019150368190038213156108b457600080fd5b634e487b7160e01b600052604160045260246000fd5b600060208284031215610b7f57600080fd5b813567ffffffffffffffff80821115610b9757600080fd5b818401915084601f830112610bab57600080fd5b813581811115610bbd57610bbd610b57565b604051601f8201601f19908116603f01168101908382118183101715610be557610be5610b57565b81604052828152876020848701011115610bfe57600080fd5b826020860160208301376000928101602001929092525095945050505050565b600060018201610c3e57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220a2705ed8fa2650be76af8762e0fb1f0776b695d390a51788303d8ced71bbcf7364736f6c6343000814003300000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 4,
        "blockHash": "0xfce05afe84487be88faf397839c2369b20a636c4f93f27dd764cf78ce4e3c1a4"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4172203,
        "transactionHash": "0xdfc8a99b4ef9bdd967a1db94f17504110f1f38527bb9088be857f7e63b2e5bcf",
        "address": "0x0000000000000000000000000000000000008004",
        "topics": [
          "0xc94722ff13eacf53547c4741dab5228353a05938ffcdd5d4a2d533ae0e618287",
          "0x02000c7b24dc1fc1259ef0c9faf532775faefd86f481dabe814371eed7797e6e",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xfce05afe84487be88faf397839c2369b20a636c4f93f27dd764cf78ce4e3c1a4"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4172203,
        "transactionHash": "0xdfc8a99b4ef9bdd967a1db94f17504110f1f38527bb9088be857f7e63b2e5bcf",
        "address": "0x0000000000000000000000000000000000008006",
        "topics": [
          "0x290afdae231a3fc0bbae8b1af63698b0a1d79b21ad17df0342dfb952fe74f8e5",
          "0x000000000000000000000000cc4f1cae67c5c1216b298152ea4323fd2475e496",
          "0x02000c7b24dc1fc1259ef0c9faf532775faefd86f481dabe814371eed7797e6e",
          "0x000000000000000000000000462fa642d020cef3eefcbf1ff774b9585663635e"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0xfce05afe84487be88faf397839c2369b20a636c4f93f27dd764cf78ce4e3c1a4"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4172203,
        "transactionHash": "0xdfc8a99b4ef9bdd967a1db94f17504110f1f38527bb9088be857f7e63b2e5bcf",
        "address": "0x000000000000000000000000000000000000800A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000008001",
          "0x000000000000000000000000cc4f1cae67c5c1216b298152ea4323fd2475e496"
        ],
        "data": "0x000000000000000000000000000000000000000000000000003d749ae2e85d1c",
        "logIndex": 7,
        "blockHash": "0xfce05afe84487be88faf397839c2369b20a636c4f93f27dd764cf78ce4e3c1a4"
      }
    ],
    "blockNumber": 4172203,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCc4F1cae67c5c1216B298152Ea4323fd2475E496"
  ],
  "numDeployments": 1,
  "solcInputHash": "0fd90eff061d785d2905b348dfd47772",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_backend\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInviteCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InviteAlreadyUsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InviteExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InviteNotCancellable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InviteNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyBackend\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldBackend\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBackend\",\"type\":\"address\"}],\"name\":\"BackendUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"configSalt\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inviter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"inviteCodeHash\",\"type\":\"bytes32\"}],\"name\":\"InviteCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"configSalt\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inviter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"inviteCodeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"name\":\"InviteRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"configSalt\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"invitee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"inviteCodeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inviter\",\"type\":\"address\"}],\"name\":\"InviteUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"configSalt\",\"type\":\"bytes32\"}],\"name\":\"RuleConfigured\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"backend\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"configSalt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inviteCodeHash\",\"type\":\"bytes32\"}],\"name\":\"cancelInvite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"configSalt\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"internalType\":\"struct KeyValue[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"name\":\"configure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"configSalt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inviteCodeHash\",\"type\":\"bytes32\"}],\"name\":\"getInvite\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"inviter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"used\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"usedBy\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"invites\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"inviter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"used\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"usedBy\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"internalType\":\"struct KeyValue[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"internalType\":\"struct KeyValue[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"name\":\"processAddition\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"configSalt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"internalType\":\"struct KeyValue[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"internalType\":\"struct KeyValue[]\",\"name\":\"ruleParams\",\"type\":\"tuple[]\"}],\"name\":\"processJoining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"internalType\":\"struct KeyValue[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"internalType\":\"struct KeyValue[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"name\":\"processLeaving\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"internalType\":\"struct KeyValue[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"internalType\":\"struct KeyValue[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"name\":\"processRemoval\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"configSalt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"inviter\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"inviteCodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"name\":\"registerInvite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBackend\",\"type\":\"address\"}],\"name\":\"updateBackend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implements IGroupRule interface for on-chain validation  This contract allows groups to be invite-only by: 1. Backend registers invite codes on-chain (hashed for privacy) 2. Users provide invite code when joining 3. Contract validates code and marks as used (one-time use) 4. Admins can still add members directly (override)\",\"kind\":\"dev\",\"methods\":{\"cancelInvite(bytes32,bytes32)\":{\"details\":\"Only callable by the backend address. Deletes invite data to reclaim gas.\",\"params\":{\"configSalt\":\"The configuration salt for the group\",\"inviteCodeHash\":\"The hash of the invite code to cancel  IMPORTANT: Cannot cancel invites that have already been used. This prevents issues with historical data and ensures audit trails.  GAS OPTIMIZATION: Using `delete` frees storage and provides gas refund (~15k gas)\"}},\"configure(bytes32,(bytes32,bytes)[])\":{\"details\":\"Called by Lens Protocol when rule is added to group\",\"params\":{\"configSalt\":\"Unique configuration identifier  NOTE: This is part of the IGroupRule interface. For now, we don't need any special configuration. ConfigSalt serves as unique identifier per group.\"}},\"constructor\":{\"params\":{\"_backend\":\"Address authorized to register invites\"}},\"getInvite(bytes32,bytes32)\":{\"params\":{\"configSalt\":\"Group configuration identifier\",\"inviteCodeHash\":\"Hash of the invite code\"},\"returns\":{\"expiresAt\":\"Expiration timestamp\",\"inviter\":\"Address that created the invite\",\"used\":\"Whether the invite was used\",\"usedBy\":\"Address that used the invite (if used)\"}},\"processAddition(bytes32,address,address,(bytes32,bytes)[],(bytes32,bytes)[])\":{\"details\":\"Empty implementation = ALLOW all admin additions  WHY: Admins should be able to add members without invites. This gives admins an \\\"override\\\" capability for: - Emergency adds - Onboarding founding members - Recovering from issues  HOW IT WORKS: - Function completes without reverting - Lens Protocol interprets this as \\\"validation passed\\\" - Admin can add member successfully\"},\"processJoining(bytes32,address,(bytes32,bytes)[],(bytes32,bytes)[])\":{\"details\":\"Validates invite code and marks it as used\",\"params\":{\"account\":\"The account attempting to join\",\"configSalt\":\"The configuration salt for the group\",\"ruleParams\":\"Rule-specific parameters containing the invite code\"}},\"processLeaving(bytes32,address,(bytes32,bytes)[],(bytes32,bytes)[])\":{\"details\":\"Empty implementation = ALLOW anyone to leave anytime  WHY: Users should always have the right to leave a group. This prevents groups from becoming \\\"traps\\\" that lock users in. It's a fundamental user freedom.\"},\"processRemoval(bytes32,address,address,(bytes32,bytes)[],(bytes32,bytes)[])\":{\"details\":\"Empty implementation = ALLOW all removals  WHY: Admins should always be able to remove members. This is a safety mechanism - groups should never be locked with bad actors that can't be removed.\"},\"registerInvite(bytes32,address,bytes32,uint256)\":{\"details\":\"Only callable by the designated backend address\",\"params\":{\"configSalt\":\"The configuration salt for the group\",\"expiresAt\":\"The expiration timestamp (0 for no expiration)\",\"inviteCodeHash\":\"The hash of the invite code\",\"inviter\":\"The address creating the invite\"}},\"transferOwnership(address)\":{\"details\":\"Only callable by current owner\",\"params\":{\"newOwner\":\"New owner address\"}},\"updateBackend(address)\":{\"details\":\"Only callable by contract owner\",\"params\":{\"newBackend\":\"New backend address\"}}},\"stateVariables\":{\"PARAM__INVITE_CODE\":{\"custom:keccak\":\"lens.param.inviteCode\"},\"invites\":{\"details\":\"configSalt is unique per group, inviteCodeHash is unique per invite\"}},\"title\":\"InviteOnlyGroupRule\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"backend()\":{\"notice\":\"Backend address authorized to register invites\"},\"cancelInvite(bytes32,bytes32)\":{\"notice\":\"Cancel a registered invite and free storage\"},\"configure(bytes32,(bytes32,bytes)[])\":{\"notice\":\"Configure rule for a specific group\"},\"constructor\":{\"notice\":\"Initialize contract with backend signer address\"},\"getInvite(bytes32,bytes32)\":{\"notice\":\"Get invite details by invite code hash\"},\"invites(bytes32,bytes32)\":{\"notice\":\"Mapping of configSalt -> inviteCodeHash -> invite data\"},\"owner()\":{\"notice\":\"Contract owner (can update backend address)\"},\"processAddition(bytes32,address,address,(bytes32,bytes)[],(bytes32,bytes)[])\":{\"notice\":\"Validate when admin tries to add a member\"},\"processJoining(bytes32,address,(bytes32,bytes)[],(bytes32,bytes)[])\":{\"notice\":\"Process a join request (IGroupRule interface)\"},\"processLeaving(bytes32,address,(bytes32,bytes)[],(bytes32,bytes)[])\":{\"notice\":\"Validate when someone tries to leave the group\"},\"processRemoval(bytes32,address,address,(bytes32,bytes)[],(bytes32,bytes)[])\":{\"notice\":\"Validate when admin tries to remove a member\"},\"registerInvite(bytes32,address,bytes32,uint256)\":{\"notice\":\"Register a new invite for a group\"},\"transferOwnership(address)\":{\"notice\":\"Transfer ownership to new address\"},\"updateBackend(address)\":{\"notice\":\"Update backend signer address\"}},\"notice\":\"Lens Protocol Group Rule that validates invite codes\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/InviteOnlyGroupRule.sol\":\"InviteOnlyGroupRule\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/InviteOnlyGroupRule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IGroupRule Interface\\n * @notice Interface that all Lens Protocol group rules must implement\\n * @dev Based on Lens Protocol documentation for custom group rules\\n */\\ninterface IGroupRule {\\n    /**\\n     * @notice Configure the rule for a specific group\\n     * @param configSalt Unique configuration identifier (32 bytes)\\n     * @param ruleParams Configuration parameters as key-value pairs\\n     */\\n    function configure(\\n        bytes32 configSalt, \\n        KeyValue[] calldata ruleParams\\n    ) external;\\n\\n    /**\\n     * @notice Called when admin adds a member\\n     * @param configSalt Configuration identifier\\n     * @param originalMsgSender Original transaction sender\\n     * @param account Account being added\\n     * @param primitiveParams Parameters from the group\\n     * @param ruleParams Rule-specific parameters\\n     */\\n    function processAddition(\\n        bytes32 configSalt,\\n        address originalMsgSender,\\n        address account,\\n        KeyValue[] calldata primitiveParams,\\n        KeyValue[] calldata ruleParams\\n    ) external;\\n\\n    /**\\n     * @notice Called when admin removes a member\\n     */\\n    function processRemoval(\\n        bytes32 configSalt,\\n        address originalMsgSender,\\n        address account,\\n        KeyValue[] calldata primitiveParams,\\n        KeyValue[] calldata ruleParams\\n    ) external;\\n\\n    /**\\n     * @notice Called when someone tries to join\\n     */\\n    function processJoining(\\n        bytes32 configSalt,\\n        address account,\\n        KeyValue[] calldata primitiveParams,\\n        KeyValue[] calldata ruleParams\\n    ) external;\\n\\n    /**\\n     * @notice Called when someone tries to leave\\n     */\\n    function processLeaving(\\n        bytes32 configSalt,\\n        address account,\\n        KeyValue[] calldata primitiveParams,\\n        KeyValue[] calldata ruleParams\\n    ) external;\\n}\\n\\n/// @notice Key-value pair structure used by Lens Protocol\\nstruct KeyValue {\\n    bytes32 key;\\n    bytes value;\\n}\\n\\n/**\\n * @title InviteOnlyGroupRule\\n * @notice Lens Protocol Group Rule that validates invite codes\\n * @dev Implements IGroupRule interface for on-chain validation\\n * \\n * This contract allows groups to be invite-only by:\\n * 1. Backend registers invite codes on-chain (hashed for privacy)\\n * 2. Users provide invite code when joining\\n * 3. Contract validates code and marks as used (one-time use)\\n * 4. Admins can still add members directly (override)\\n */\\ncontract InviteOnlyGroupRule is IGroupRule {\\n    // ========== ERRORS ==========\\n    error OnlyBackend();\\n    error OnlyOwner();\\n    error InviteNotFound();\\n    error InviteExpired();\\n    error InviteAlreadyUsed();\\n    error InviteNotCancellable();\\n    error InvalidAddress();\\n    error InvalidInviteCode();\\n    \\n    // ========== EVENTS ==========\\n    event InviteRegistered(\\n        bytes32 indexed configSalt,\\n        address indexed inviter,\\n        bytes32 indexed inviteCodeHash,\\n        uint256 expiresAt\\n    );\\n    \\n    event InviteUsed(\\n        bytes32 indexed configSalt,\\n        address indexed invitee,\\n        bytes32 indexed inviteCodeHash,\\n        address inviter\\n    );\\n    \\n    event InviteCancelled(\\n        bytes32 indexed configSalt,\\n        address indexed inviter,\\n        bytes32 indexed inviteCodeHash\\n    );\\n    \\n    event BackendUpdated(\\n        address indexed oldBackend,\\n        address indexed newBackend\\n    );\\n    \\n    event RuleConfigured(bytes32 indexed configSalt);\\n    \\n    // ========== STORAGE ==========\\n    \\n    /// @notice Backend address authorized to register invites\\n    address public backend;\\n    \\n    /// @notice Contract owner (can update backend address)\\n    address public owner;\\n    \\n    /// @notice Mapping of configSalt -> inviteCodeHash -> invite data\\n    /// @dev configSalt is unique per group, inviteCodeHash is unique per invite\\n    mapping(bytes32 => mapping(bytes32 => InviteData)) public invites;\\n    \\n    /// @notice Invite data structure\\n    struct InviteData {\\n        address inviter;       // Address of person who created the invite\\n        uint256 expiresAt;     // Expiration timestamp\\n        bool used;             // Whether invite was used\\n        address usedBy;        // Address that used this invite (set when used)\\n    }\\n    \\n    // ========== MODIFIERS ==========\\n    \\n    modifier onlyBackend() {\\n        if (msg.sender != backend) revert OnlyBackend();\\n        _;\\n    }\\n    \\n    modifier onlyOwner() {\\n        if (msg.sender != owner) revert OnlyOwner();\\n        _;\\n    }\\n    \\n    // ========== CONSTRUCTOR ==========\\n    \\n    /**\\n     * @notice Initialize contract with backend signer address\\n     * @param _backend Address authorized to register invites\\n     */\\n    constructor(address _backend) {\\n        if (_backend == address(0)) revert InvalidAddress();\\n        backend = _backend;\\n        owner = msg.sender;\\n        \\n        emit BackendUpdated(address(0), _backend);\\n    }\\n    \\n    // ========== BACKEND FUNCTIONS ==========\\n    \\n    /**\\n     * @notice Register a new invite for a group\\n     * @dev Only callable by the designated backend address\\n     * @param configSalt The configuration salt for the group\\n     * @param inviter The address creating the invite\\n     * @param inviteCodeHash The hash of the invite code\\n     * @param expiresAt The expiration timestamp (0 for no expiration)\\n     */\\n    function registerInvite(\\n        bytes32 configSalt,\\n        address inviter,\\n        bytes32 inviteCodeHash,\\n        uint256 expiresAt\\n    ) external onlyBackend {\\n        if (inviter == address(0)) revert InvalidAddress();\\n        if (inviteCodeHash == bytes32(0)) revert InvalidInviteCode();\\n        \\n        InviteData storage invite = invites[configSalt][inviteCodeHash];\\n        \\n        // Allow re-registration if not yet used\\n        if (invite.used) revert InviteAlreadyUsed();\\n        \\n        invite.inviter = inviter;\\n        invite.expiresAt = expiresAt;\\n        invite.used = false;\\n        invite.usedBy = address(0);\\n        \\n        emit InviteRegistered(configSalt, inviter, inviteCodeHash, expiresAt);\\n    }\\n    \\n    /**\\n     * @notice Cancel a registered invite and free storage\\n     * @dev Only callable by the backend address. Deletes invite data to reclaim gas.\\n     * @param configSalt The configuration salt for the group\\n     * @param inviteCodeHash The hash of the invite code to cancel\\n     * \\n     * IMPORTANT: Cannot cancel invites that have already been used.\\n     * This prevents issues with historical data and ensures audit trails.\\n     * \\n     * GAS OPTIMIZATION: Using `delete` frees storage and provides gas refund (~15k gas)\\n     */\\n    function cancelInvite(\\n        bytes32 configSalt,\\n        bytes32 inviteCodeHash\\n    ) external onlyBackend {\\n        InviteData storage invite = invites[configSalt][inviteCodeHash];\\n        \\n        // Validate invite exists\\n        if (invite.inviter == address(0)) revert InviteNotFound();\\n        \\n        // Cannot cancel if already used (preserve audit trail)\\n        if (invite.used) revert InviteNotCancellable();\\n        \\n        // Emit event BEFORE deletion (so we still have data to emit)\\n        emit InviteCancelled(configSalt, invite.inviter, inviteCodeHash);\\n        \\n        // Delete invite data - this zeros out all fields and provides gas refund\\n        delete invites[configSalt][inviteCodeHash];\\n    }\\n    \\n    /**\\n     * @notice Update backend signer address\\n     * @dev Only callable by contract owner\\n     * @param newBackend New backend address\\n     */\\n    function updateBackend(address newBackend) external onlyOwner {\\n        if (newBackend == address(0)) revert InvalidAddress();\\n        \\n        address oldBackend = backend;\\n        backend = newBackend;\\n        \\n        emit BackendUpdated(oldBackend, newBackend);\\n    }\\n    \\n    /**\\n     * @notice Transfer ownership to new address\\n     * @dev Only callable by current owner\\n     * @param newOwner New owner address\\n     */\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        if (newOwner == address(0)) revert InvalidAddress();\\n        owner = newOwner;\\n    }\\n    \\n    // ========== LENS PROTOCOL IGROUPRULE INTERFACE ==========\\n    \\n    /**\\n     * @notice Configure rule for a specific group\\n     * @dev Called by Lens Protocol when rule is added to group\\n     * @param configSalt Unique configuration identifier\\n     * \\n     * NOTE: This is part of the IGroupRule interface.\\n     * For now, we don't need any special configuration.\\n     * ConfigSalt serves as unique identifier per group.\\n     */\\n    function configure(\\n        bytes32 configSalt,\\n        KeyValue[] calldata /* ruleParams */\\n    ) external override {\\n        emit RuleConfigured(configSalt);\\n    }\\n    \\n    // Parameter keys (using Lens Protocol pattern)\\n    /// @custom:keccak lens.param.inviteCode\\n    bytes32 constant PARAM__INVITE_CODE = 0x5797e5205a2d50babd9c0c4d9ab1fc2eb654e110118c575a0c6efc620e7e055e;\\n    \\n    /**\\n     * @notice Process a join request (IGroupRule interface)\\n     * @dev Validates invite code and marks it as used\\n     * @param configSalt The configuration salt for the group\\n     * @param account The account attempting to join\\n     * @param ruleParams Rule-specific parameters containing the invite code\\n     */\\n    function processJoining(\\n        bytes32 configSalt,\\n        address account,\\n        KeyValue[] calldata /* primitiveParams */,\\n        KeyValue[] calldata ruleParams\\n    ) external override {\\n        if (account == address(0)) revert InvalidAddress();\\n        \\n        // Extract invite code from params\\n        string memory providedCode = _extractInviteCode(ruleParams);\\n        if (bytes(providedCode).length == 0) revert InvalidInviteCode();\\n        \\n        // Hash the provided code\\n        bytes32 providedCodeHash = keccak256(abi.encodePacked(providedCode));\\n        \\n        // Get the invite data using the hash as the key\\n        InviteData storage invite = invites[configSalt][providedCodeHash];\\n        \\n        // Validate invite exists (if inviter is zero, invite was deleted/cancelled or never existed)\\n        if (invite.inviter == address(0)) revert InviteNotFound();\\n        \\n        // Check if already used\\n        if (invite.used) revert InviteAlreadyUsed();\\n        \\n        // Check expiration\\n        if (invite.expiresAt != 0 && block.timestamp > invite.expiresAt) {\\n            revert InviteExpired();\\n        }\\n        \\n        // Mark as used and record who used it\\n        invite.used = true;\\n        invite.usedBy = account;\\n        \\n        emit InviteUsed(configSalt, account, providedCodeHash, invite.inviter);\\n    }\\n    \\n    /**\\n     * @notice Validate when admin tries to add a member\\n     * @dev Empty implementation = ALLOW all admin additions\\n     * \\n     * WHY: Admins should be able to add members without invites.\\n     * This gives admins an \\\"override\\\" capability for:\\n     * - Emergency adds\\n     * - Onboarding founding members\\n     * - Recovering from issues\\n     * \\n     * HOW IT WORKS:\\n     * - Function completes without reverting\\n     * - Lens Protocol interprets this as \\\"validation passed\\\"\\n     * - Admin can add member successfully\\n     */\\n    function processAddition(\\n        bytes32 /* configSalt */,\\n        address /* originalMsgSender */,\\n        address /* account */,\\n        KeyValue[] calldata /* primitiveParams */,\\n        KeyValue[] calldata /* ruleParams */\\n    ) external pure override {\\n        // Empty implementation = allow action\\n        // No revert = validation passed\\n    }\\n    \\n    /**\\n     * @notice Validate when admin tries to remove a member\\n     * @dev Empty implementation = ALLOW all removals\\n     * \\n     * WHY: Admins should always be able to remove members.\\n     * This is a safety mechanism - groups should never be locked\\n     * with bad actors that can't be removed.\\n     */\\n    function processRemoval(\\n        bytes32 /* configSalt */,\\n        address /* originalMsgSender */,\\n        address /* account */,\\n        KeyValue[] calldata /* primitiveParams */,\\n        KeyValue[] calldata /* ruleParams */\\n    ) external pure override {\\n        // Empty implementation = allow action\\n    }\\n    \\n    /**\\n     * @notice Validate when someone tries to leave the group\\n     * @dev Empty implementation = ALLOW anyone to leave anytime\\n     * \\n     * WHY: Users should always have the right to leave a group.\\n     * This prevents groups from becoming \\\"traps\\\" that lock users in.\\n     * It's a fundamental user freedom.\\n     */\\n    function processLeaving(\\n        bytes32 /* configSalt */,\\n        address /* account */,\\n        KeyValue[] calldata /* primitiveParams */,\\n        KeyValue[] calldata /* ruleParams */\\n    ) external pure override {\\n        // Empty implementation = allow action\\n    }\\n    \\n    // ========== VIEW FUNCTIONS ==========\\n    \\n    /**\\n     * @notice Extract invite code from KeyValue parameters\\n     * @dev Helper function to parse Lens Protocol params\\n     * @param params Array of KeyValue pairs\\n     * @return Invite code string\\n     */\\n    function _extractInviteCode(KeyValue[] calldata params) private pure returns (string memory) {\\n        for (uint256 i = 0; i < params.length; i++) {\\n            if (params[i].key == PARAM__INVITE_CODE) {\\n                return abi.decode(params[i].value, (string));\\n            }\\n        }\\n        return \\\"\\\";\\n    }\\n    \\n    /**\\n     * @notice Get invite details by invite code hash\\n     * @param configSalt Group configuration identifier\\n     * @param inviteCodeHash Hash of the invite code\\n     * @return inviter Address that created the invite\\n     * @return expiresAt Expiration timestamp\\n     * @return used Whether the invite was used\\n     * @return usedBy Address that used the invite (if used)\\n     */\\n    function getInvite(\\n        bytes32 configSalt,\\n        bytes32 inviteCodeHash\\n    ) external view returns (\\n        address inviter,\\n        uint256 expiresAt,\\n        bool used,\\n        address usedBy\\n    ) {\\n        InviteData storage invite = invites[configSalt][inviteCodeHash];\\n        return (invite.inviter, invite.expiresAt, invite.used, invite.usedBy);\\n    }\\n}\\n\",\"keccak256\":\"0x884dc8b59fb4e843d9a588005d48c0ef6c154833c80f8e0f18ebd80bb5666474\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610d6b380380610d6b83398101604081905261002f916100b1565b6001600160a01b0381166100565760405163e6c4247b60e01b815260040160405180910390fd5b600080546001600160a01b0383166001600160a01b0319918216811783556001805490921633179091556040519091907f37f6c561371bb449a598aaf7e5528fc87ad233e82669756cd67fec9c5f665a7b908290a3506100e1565b6000602082840312156100c357600080fd5b81516001600160a01b03811681146100da57600080fd5b9392505050565b610c7b806100f06000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063666981891161008c5780638da5cb5b116100665780638da5cb5b1461023c578063c0ed969a1461024f578063c585084c14610262578063f2fde38b1461027557600080fd5b806366698189146101c65780636ad37721146101d95780636e1e352a146101ec57600080fd5b806307bcf26a146100d4578063099e4133146100ec578063363c68ac1461011c5780635254cf3a1461013357806353b557511461011c57806363858aa214610146575b600080fd5b6100ea6100e23660046108bb565b505050505050565b005b6000546100ff906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100ea61012a366004610945565b50505050505050565b6100ea6101413660046109e0565b610288565b6101936101543660046109e0565b600260208181526000938452604080852090915291835291208054600182015491909201546001600160a01b039283169260ff82169161010090041684565b604080516001600160a01b0395861681526020810194909452911515918301919091529091166060820152608001610113565b6100ea6101d4366004610a02565b610395565b6100ea6101e73660046108bb565b6104b7565b6101936101fa3660046109e0565b600091825260026020818152604080852093855292905291208054600182015491909201546001600160a01b0392831693919260ff8216926101009092041690565b6001546100ff906001600160a01b031681565b6100ea61025d366004610a3d565b610644565b6100ea610270366004610a5f565b6106e6565b6100ea610283366004610a3d565b610716565b6000546001600160a01b031633146102b357604051636bbaa1c160e01b815260040160405180910390fd5b6000828152600260209081526040808320848452909152902080546001600160a01b03166102f457604051630adf970d60e21b815260040160405180910390fd5b600281015460ff161561031a57604051632c67327360e11b815260040160405180910390fd5b805460405183916001600160a01b03169085907f39b6e318ad96506a71238b70e1a7fe40fb06542a75531bf59aa97875d603ce5790600090a450600091825260026020818152604080852093855292905290822080546001600160a01b031916815560018101929092550180546001600160a81b0319169055565b6000546001600160a01b031633146103c057604051636bbaa1c160e01b815260040160405180910390fd5b6001600160a01b0383166103e75760405163e6c4247b60e01b815260040160405180910390fd5b8161040557604051633b19367b60e01b815260040160405180910390fd5b60008481526002602081815260408084208685529091529091209081015460ff161561044457604051634209eb7d60e01b815260040160405180910390fd5b80546001600160a01b0319166001600160a01b0385169081178255600182018390556002820180546001600160a81b031916905560405183815284919087907f6e074b649c1f27bd566a71f5f15443ca61b17b2a02554ca9edca137a8aa2aafa9060200160405180910390a45050505050565b6001600160a01b0385166104de5760405163e6c4247b60e01b815260040160405180910390fd5b60006104ea838361078a565b9050805160000361050e57604051633b19367b60e01b815260040160405180910390fd5b6000816040516020016105219190610aab565b60408051601f19818403018152918152815160209283012060008b81526002845282812082825290935291208054919250906001600160a01b031661057957604051630adf970d60e21b815260040160405180910390fd5b600281015460ff161561059f57604051634209eb7d60e01b815260040160405180910390fd5b6001810154158015906105b55750806001015442115b156105d357604051633c8a622d60e21b815260040160405180910390fd5b6002810180546001600160a01b038a811661010081026001600160a81b03199093169290921760011790925582546040519216825283918b907f7b4e33ed87bbe576349a5310b0a0588c3fe0437cef71142d686bbec9d8abc3bd9060200160405180910390a4505050505050505050565b6001546001600160a01b0316331461066f57604051635fc483c560e01b815260040160405180910390fd5b6001600160a01b0381166106965760405163e6c4247b60e01b815260040160405180910390fd5b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f37f6c561371bb449a598aaf7e5528fc87ad233e82669756cd67fec9c5f665a7b9190a35050565b60405183907f584dfcec25d035967c3849e8ff0ad02f80bdc315b282d68c5604e27a740d06b190600090a2505050565b6001546001600160a01b0316331461074157604051635fc483c560e01b815260040160405180910390fd5b6001600160a01b0381166107685760405163e6c4247b60e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b606060005b8281101561083b577f5797e5205a2d50babd9c0c4d9ab1fc2eb654e110118c575a0c6efc620e7e055e8484838181106107ca576107ca610ada565b90506020028101906107dc9190610af0565b3503610829578383828181106107f4576107f4610ada565b90506020028101906108069190610af0565b610814906020810190610b10565b8101906108219190610b6d565b91505061084d565b8061083381610c1e565b91505061078f565b50506040805160208101909152600081525b92915050565b80356001600160a01b038116811461086a57600080fd5b919050565b60008083601f84011261088157600080fd5b50813567ffffffffffffffff81111561089957600080fd5b6020830191508360208260051b85010111156108b457600080fd5b9250929050565b600080600080600080608087890312156108d457600080fd5b863595506108e460208801610853565b9450604087013567ffffffffffffffff8082111561090157600080fd5b61090d8a838b0161086f565b9096509450606089013591508082111561092657600080fd5b5061093389828a0161086f565b979a9699509497509295939492505050565b600080600080600080600060a0888a03121561096057600080fd5b8735965061097060208901610853565b955061097e60408901610853565b9450606088013567ffffffffffffffff8082111561099b57600080fd5b6109a78b838c0161086f565b909650945060808a01359150808211156109c057600080fd5b506109cd8a828b0161086f565b989b979a50959850939692959293505050565b600080604083850312156109f357600080fd5b50508035926020909101359150565b60008060008060808587031215610a1857600080fd5b84359350610a2860208601610853565b93969395505050506040820135916060013590565b600060208284031215610a4f57600080fd5b610a5882610853565b9392505050565b600080600060408486031215610a7457600080fd5b83359250602084013567ffffffffffffffff811115610a9257600080fd5b610a9e8682870161086f565b9497909650939450505050565b6000825160005b81811015610acc5760208186018101518583015201610ab2565b506000920191825250919050565b634e487b7160e01b600052603260045260246000fd5b60008235603e19833603018112610b0657600080fd5b9190910192915050565b6000808335601e19843603018112610b2757600080fd5b83018035915067ffffffffffffffff821115610b4257600080fd5b6020019150368190038213156108b457600080fd5b634e487b7160e01b600052604160045260246000fd5b600060208284031215610b7f57600080fd5b813567ffffffffffffffff80821115610b9757600080fd5b818401915084601f830112610bab57600080fd5b813581811115610bbd57610bbd610b57565b604051601f8201601f19908116603f01168101908382118183101715610be557610be5610b57565b81604052828152876020848701011115610bfe57600080fd5b826020860160208301376000928101602001929092525095945050505050565b600060018201610c3e57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220a2705ed8fa2650be76af8762e0fb1f0776b695d390a51788303d8ced71bbcf7364736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063666981891161008c5780638da5cb5b116100665780638da5cb5b1461023c578063c0ed969a1461024f578063c585084c14610262578063f2fde38b1461027557600080fd5b806366698189146101c65780636ad37721146101d95780636e1e352a146101ec57600080fd5b806307bcf26a146100d4578063099e4133146100ec578063363c68ac1461011c5780635254cf3a1461013357806353b557511461011c57806363858aa214610146575b600080fd5b6100ea6100e23660046108bb565b505050505050565b005b6000546100ff906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100ea61012a366004610945565b50505050505050565b6100ea6101413660046109e0565b610288565b6101936101543660046109e0565b600260208181526000938452604080852090915291835291208054600182015491909201546001600160a01b039283169260ff82169161010090041684565b604080516001600160a01b0395861681526020810194909452911515918301919091529091166060820152608001610113565b6100ea6101d4366004610a02565b610395565b6100ea6101e73660046108bb565b6104b7565b6101936101fa3660046109e0565b600091825260026020818152604080852093855292905291208054600182015491909201546001600160a01b0392831693919260ff8216926101009092041690565b6001546100ff906001600160a01b031681565b6100ea61025d366004610a3d565b610644565b6100ea610270366004610a5f565b6106e6565b6100ea610283366004610a3d565b610716565b6000546001600160a01b031633146102b357604051636bbaa1c160e01b815260040160405180910390fd5b6000828152600260209081526040808320848452909152902080546001600160a01b03166102f457604051630adf970d60e21b815260040160405180910390fd5b600281015460ff161561031a57604051632c67327360e11b815260040160405180910390fd5b805460405183916001600160a01b03169085907f39b6e318ad96506a71238b70e1a7fe40fb06542a75531bf59aa97875d603ce5790600090a450600091825260026020818152604080852093855292905290822080546001600160a01b031916815560018101929092550180546001600160a81b0319169055565b6000546001600160a01b031633146103c057604051636bbaa1c160e01b815260040160405180910390fd5b6001600160a01b0383166103e75760405163e6c4247b60e01b815260040160405180910390fd5b8161040557604051633b19367b60e01b815260040160405180910390fd5b60008481526002602081815260408084208685529091529091209081015460ff161561044457604051634209eb7d60e01b815260040160405180910390fd5b80546001600160a01b0319166001600160a01b0385169081178255600182018390556002820180546001600160a81b031916905560405183815284919087907f6e074b649c1f27bd566a71f5f15443ca61b17b2a02554ca9edca137a8aa2aafa9060200160405180910390a45050505050565b6001600160a01b0385166104de5760405163e6c4247b60e01b815260040160405180910390fd5b60006104ea838361078a565b9050805160000361050e57604051633b19367b60e01b815260040160405180910390fd5b6000816040516020016105219190610aab565b60408051601f19818403018152918152815160209283012060008b81526002845282812082825290935291208054919250906001600160a01b031661057957604051630adf970d60e21b815260040160405180910390fd5b600281015460ff161561059f57604051634209eb7d60e01b815260040160405180910390fd5b6001810154158015906105b55750806001015442115b156105d357604051633c8a622d60e21b815260040160405180910390fd5b6002810180546001600160a01b038a811661010081026001600160a81b03199093169290921760011790925582546040519216825283918b907f7b4e33ed87bbe576349a5310b0a0588c3fe0437cef71142d686bbec9d8abc3bd9060200160405180910390a4505050505050505050565b6001546001600160a01b0316331461066f57604051635fc483c560e01b815260040160405180910390fd5b6001600160a01b0381166106965760405163e6c4247b60e01b815260040160405180910390fd5b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f37f6c561371bb449a598aaf7e5528fc87ad233e82669756cd67fec9c5f665a7b9190a35050565b60405183907f584dfcec25d035967c3849e8ff0ad02f80bdc315b282d68c5604e27a740d06b190600090a2505050565b6001546001600160a01b0316331461074157604051635fc483c560e01b815260040160405180910390fd5b6001600160a01b0381166107685760405163e6c4247b60e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b606060005b8281101561083b577f5797e5205a2d50babd9c0c4d9ab1fc2eb654e110118c575a0c6efc620e7e055e8484838181106107ca576107ca610ada565b90506020028101906107dc9190610af0565b3503610829578383828181106107f4576107f4610ada565b90506020028101906108069190610af0565b610814906020810190610b10565b8101906108219190610b6d565b91505061084d565b8061083381610c1e565b91505061078f565b50506040805160208101909152600081525b92915050565b80356001600160a01b038116811461086a57600080fd5b919050565b60008083601f84011261088157600080fd5b50813567ffffffffffffffff81111561089957600080fd5b6020830191508360208260051b85010111156108b457600080fd5b9250929050565b600080600080600080608087890312156108d457600080fd5b863595506108e460208801610853565b9450604087013567ffffffffffffffff8082111561090157600080fd5b61090d8a838b0161086f565b9096509450606089013591508082111561092657600080fd5b5061093389828a0161086f565b979a9699509497509295939492505050565b600080600080600080600060a0888a03121561096057600080fd5b8735965061097060208901610853565b955061097e60408901610853565b9450606088013567ffffffffffffffff8082111561099b57600080fd5b6109a78b838c0161086f565b909650945060808a01359150808211156109c057600080fd5b506109cd8a828b0161086f565b989b979a50959850939692959293505050565b600080604083850312156109f357600080fd5b50508035926020909101359150565b60008060008060808587031215610a1857600080fd5b84359350610a2860208601610853565b93969395505050506040820135916060013590565b600060208284031215610a4f57600080fd5b610a5882610853565b9392505050565b600080600060408486031215610a7457600080fd5b83359250602084013567ffffffffffffffff811115610a9257600080fd5b610a9e8682870161086f565b9497909650939450505050565b6000825160005b81811015610acc5760208186018101518583015201610ab2565b506000920191825250919050565b634e487b7160e01b600052603260045260246000fd5b60008235603e19833603018112610b0657600080fd5b9190910192915050565b6000808335601e19843603018112610b2757600080fd5b83018035915067ffffffffffffffff821115610b4257600080fd5b6020019150368190038213156108b457600080fd5b634e487b7160e01b600052604160045260246000fd5b600060208284031215610b7f57600080fd5b813567ffffffffffffffff80821115610b9757600080fd5b818401915084601f830112610bab57600080fd5b813581811115610bbd57610bbd610b57565b604051601f8201601f19908116603f01168101908382118183101715610be557610be5610b57565b81604052828152876020848701011115610bfe57600080fd5b826020860160208301376000928101602001929092525095945050505050565b600060018201610c3e57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220a2705ed8fa2650be76af8762e0fb1f0776b695d390a51788303d8ced71bbcf7364736f6c63430008140033",
  "devdoc": {
    "details": "Implements IGroupRule interface for on-chain validation  This contract allows groups to be invite-only by: 1. Backend registers invite codes on-chain (hashed for privacy) 2. Users provide invite code when joining 3. Contract validates code and marks as used (one-time use) 4. Admins can still add members directly (override)",
    "kind": "dev",
    "methods": {
      "cancelInvite(bytes32,bytes32)": {
        "details": "Only callable by the backend address. Deletes invite data to reclaim gas.",
        "params": {
          "configSalt": "The configuration salt for the group",
          "inviteCodeHash": "The hash of the invite code to cancel  IMPORTANT: Cannot cancel invites that have already been used. This prevents issues with historical data and ensures audit trails.  GAS OPTIMIZATION: Using `delete` frees storage and provides gas refund (~15k gas)"
        }
      },
      "configure(bytes32,(bytes32,bytes)[])": {
        "details": "Called by Lens Protocol when rule is added to group",
        "params": {
          "configSalt": "Unique configuration identifier  NOTE: This is part of the IGroupRule interface. For now, we don't need any special configuration. ConfigSalt serves as unique identifier per group."
        }
      },
      "constructor": {
        "params": {
          "_backend": "Address authorized to register invites"
        }
      },
      "getInvite(bytes32,bytes32)": {
        "params": {
          "configSalt": "Group configuration identifier",
          "inviteCodeHash": "Hash of the invite code"
        },
        "returns": {
          "expiresAt": "Expiration timestamp",
          "inviter": "Address that created the invite",
          "used": "Whether the invite was used",
          "usedBy": "Address that used the invite (if used)"
        }
      },
      "processAddition(bytes32,address,address,(bytes32,bytes)[],(bytes32,bytes)[])": {
        "details": "Empty implementation = ALLOW all admin additions  WHY: Admins should be able to add members without invites. This gives admins an \"override\" capability for: - Emergency adds - Onboarding founding members - Recovering from issues  HOW IT WORKS: - Function completes without reverting - Lens Protocol interprets this as \"validation passed\" - Admin can add member successfully"
      },
      "processJoining(bytes32,address,(bytes32,bytes)[],(bytes32,bytes)[])": {
        "details": "Validates invite code and marks it as used",
        "params": {
          "account": "The account attempting to join",
          "configSalt": "The configuration salt for the group",
          "ruleParams": "Rule-specific parameters containing the invite code"
        }
      },
      "processLeaving(bytes32,address,(bytes32,bytes)[],(bytes32,bytes)[])": {
        "details": "Empty implementation = ALLOW anyone to leave anytime  WHY: Users should always have the right to leave a group. This prevents groups from becoming \"traps\" that lock users in. It's a fundamental user freedom."
      },
      "processRemoval(bytes32,address,address,(bytes32,bytes)[],(bytes32,bytes)[])": {
        "details": "Empty implementation = ALLOW all removals  WHY: Admins should always be able to remove members. This is a safety mechanism - groups should never be locked with bad actors that can't be removed."
      },
      "registerInvite(bytes32,address,bytes32,uint256)": {
        "details": "Only callable by the designated backend address",
        "params": {
          "configSalt": "The configuration salt for the group",
          "expiresAt": "The expiration timestamp (0 for no expiration)",
          "inviteCodeHash": "The hash of the invite code",
          "inviter": "The address creating the invite"
        }
      },
      "transferOwnership(address)": {
        "details": "Only callable by current owner",
        "params": {
          "newOwner": "New owner address"
        }
      },
      "updateBackend(address)": {
        "details": "Only callable by contract owner",
        "params": {
          "newBackend": "New backend address"
        }
      }
    },
    "stateVariables": {
      "PARAM__INVITE_CODE": {
        "custom:keccak": "lens.param.inviteCode"
      },
      "invites": {
        "details": "configSalt is unique per group, inviteCodeHash is unique per invite"
      }
    },
    "title": "InviteOnlyGroupRule",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "backend()": {
        "notice": "Backend address authorized to register invites"
      },
      "cancelInvite(bytes32,bytes32)": {
        "notice": "Cancel a registered invite and free storage"
      },
      "configure(bytes32,(bytes32,bytes)[])": {
        "notice": "Configure rule for a specific group"
      },
      "constructor": {
        "notice": "Initialize contract with backend signer address"
      },
      "getInvite(bytes32,bytes32)": {
        "notice": "Get invite details by invite code hash"
      },
      "invites(bytes32,bytes32)": {
        "notice": "Mapping of configSalt -> inviteCodeHash -> invite data"
      },
      "owner()": {
        "notice": "Contract owner (can update backend address)"
      },
      "processAddition(bytes32,address,address,(bytes32,bytes)[],(bytes32,bytes)[])": {
        "notice": "Validate when admin tries to add a member"
      },
      "processJoining(bytes32,address,(bytes32,bytes)[],(bytes32,bytes)[])": {
        "notice": "Process a join request (IGroupRule interface)"
      },
      "processLeaving(bytes32,address,(bytes32,bytes)[],(bytes32,bytes)[])": {
        "notice": "Validate when someone tries to leave the group"
      },
      "processRemoval(bytes32,address,address,(bytes32,bytes)[],(bytes32,bytes)[])": {
        "notice": "Validate when admin tries to remove a member"
      },
      "registerInvite(bytes32,address,bytes32,uint256)": {
        "notice": "Register a new invite for a group"
      },
      "transferOwnership(address)": {
        "notice": "Transfer ownership to new address"
      },
      "updateBackend(address)": {
        "notice": "Update backend signer address"
      }
    },
    "notice": "Lens Protocol Group Rule that validates invite codes",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 147,
        "contract": "contracts/InviteOnlyGroupRule.sol:InviteOnlyGroupRule",
        "label": "backend",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 150,
        "contract": "contracts/InviteOnlyGroupRule.sol:InviteOnlyGroupRule",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 158,
        "contract": "contracts/InviteOnlyGroupRule.sol:InviteOnlyGroupRule",
        "label": "invites",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_mapping(t_bytes32,t_struct(InviteData)168_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_mapping(t_bytes32,t_struct(InviteData)168_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(bytes32 => struct InviteOnlyGroupRule.InviteData))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_struct(InviteData)168_storage)"
      },
      "t_mapping(t_bytes32,t_struct(InviteData)168_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct InviteOnlyGroupRule.InviteData)",
        "numberOfBytes": "32",
        "value": "t_struct(InviteData)168_storage"
      },
      "t_struct(InviteData)168_storage": {
        "encoding": "inplace",
        "label": "struct InviteOnlyGroupRule.InviteData",
        "members": [
          {
            "astId": 161,
            "contract": "contracts/InviteOnlyGroupRule.sol:InviteOnlyGroupRule",
            "label": "inviter",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 163,
            "contract": "contracts/InviteOnlyGroupRule.sol:InviteOnlyGroupRule",
            "label": "expiresAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 165,
            "contract": "contracts/InviteOnlyGroupRule.sol:InviteOnlyGroupRule",
            "label": "used",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 167,
            "contract": "contracts/InviteOnlyGroupRule.sol:InviteOnlyGroupRule",
            "label": "usedBy",
            "offset": 1,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
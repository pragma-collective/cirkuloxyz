{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n */\nlibrary Clones {\n    /**\n     * @dev A clone instance deployment failed.\n     */\n    error ERC1167FailedCreateClone();\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create(0, 0x09, 0x37)\n        }\n        if (instance == address(0)) {\n            revert ERC1167FailedCreateClone();\n        }\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create2(0, 0x09, 0x37, salt)\n        }\n        if (instance == address(0)) {\n            revert ERC1167FailedCreateClone();\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(add(ptr, 0x38), deployer)\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\n            mstore(add(ptr, 0x14), implementation)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\n            mstore(add(ptr, 0x58), salt)\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\n            predicted := keccak256(add(ptr, 0x43), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt\n    ) internal view returns (address predicted) {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/interfaces/IXershaPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @title IXershaPool\n * @notice Base interface for all Xersha pool types\n * @dev Common interface elements shared across ROSCA, Savings, and Donation pools\n */\ninterface IXershaPool {\n    /**\n     * @notice Returns the address of the circle (Lens.xyz contract) this pool belongs to\n     * @return The circle contract address\n     */\n    function circleId() external view returns (address);\n\n    /**\n     * @notice Returns the address of the user who created this pool\n     * @return The creator's address\n     */\n    function creator() external view returns (address);\n\n    /**\n     * @notice Returns the human-readable name of the circle\n     * @return The circle name\n     */\n    function circleName() external view returns (string memory);\n\n    /**\n     * @notice Returns whether the pool is currently active\n     * @return True if pool is active, false otherwise\n     */\n    function isActive() external view returns (bool);\n\n    /**\n     * @notice Returns the list of all members in the pool\n     * @return Array of member addresses\n     */\n    function getMembers() external view returns (address[] memory);\n\n    /**\n     * @notice Returns the total number of members in the pool\n     * @return Member count\n     */\n    function getMemberCount() external view returns (uint256);\n}\n"
    },
    "contracts/InviteOnlyGroupRule.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @title IGroupRule Interface\n * @notice Interface that all Lens Protocol group rules must implement\n * @dev Based on Lens Protocol documentation for custom group rules\n */\ninterface IGroupRule {\n    /**\n     * @notice Configure the rule for a specific group\n     * @param configSalt Unique configuration identifier (32 bytes)\n     * @param ruleParams Configuration parameters as key-value pairs\n     */\n    function configure(\n        bytes32 configSalt, \n        KeyValue[] calldata ruleParams\n    ) external;\n\n    /**\n     * @notice Called when admin adds a member\n     * @param configSalt Configuration identifier\n     * @param originalMsgSender Original transaction sender\n     * @param account Account being added\n     * @param primitiveParams Parameters from the group\n     * @param ruleParams Rule-specific parameters\n     */\n    function processAddition(\n        bytes32 configSalt,\n        address originalMsgSender,\n        address account,\n        KeyValue[] calldata primitiveParams,\n        KeyValue[] calldata ruleParams\n    ) external;\n\n    /**\n     * @notice Called when admin removes a member\n     */\n    function processRemoval(\n        bytes32 configSalt,\n        address originalMsgSender,\n        address account,\n        KeyValue[] calldata primitiveParams,\n        KeyValue[] calldata ruleParams\n    ) external;\n\n    /**\n     * @notice Called when someone tries to join\n     */\n    function processJoining(\n        bytes32 configSalt,\n        address account,\n        KeyValue[] calldata primitiveParams,\n        KeyValue[] calldata ruleParams\n    ) external;\n\n    /**\n     * @notice Called when someone tries to leave\n     */\n    function processLeaving(\n        bytes32 configSalt,\n        address account,\n        KeyValue[] calldata primitiveParams,\n        KeyValue[] calldata ruleParams\n    ) external;\n}\n\n/// @notice Key-value pair structure used by Lens Protocol\nstruct KeyValue {\n    bytes32 key;\n    bytes value;\n}\n\n/**\n * @title InviteOnlyGroupRule\n * @notice Lens Protocol Group Rule that validates invite codes\n * @dev Implements IGroupRule interface for on-chain validation\n * \n * This contract allows groups to be invite-only by:\n * 1. Backend registers invite codes on-chain (hashed for privacy)\n * 2. Users provide invite code when joining\n * 3. Contract validates code and marks as used (one-time use)\n * 4. Admins can still add members directly (override)\n */\ncontract InviteOnlyGroupRule is IGroupRule {\n    // ========== ERRORS ==========\n    error OnlyBackend();\n    error OnlyOwner();\n    error InviteNotFound();\n    error InviteExpired();\n    error InviteAlreadyUsed();\n    error InviteNotCancellable();\n    error InvalidAddress();\n    error InvalidInviteCode();\n    \n    // ========== EVENTS ==========\n    event InviteRegistered(\n        bytes32 indexed configSalt,\n        address indexed inviter,\n        bytes32 indexed inviteCodeHash,\n        uint256 expiresAt\n    );\n    \n    event InviteUsed(\n        bytes32 indexed configSalt,\n        address indexed invitee,\n        bytes32 indexed inviteCodeHash,\n        address inviter\n    );\n    \n    event InviteCancelled(\n        bytes32 indexed configSalt,\n        address indexed inviter,\n        bytes32 indexed inviteCodeHash\n    );\n    \n    event BackendUpdated(\n        address indexed oldBackend,\n        address indexed newBackend\n    );\n    \n    event RuleConfigured(bytes32 indexed configSalt);\n    \n    // ========== STORAGE ==========\n    \n    /// @notice Backend address authorized to register invites\n    address public backend;\n    \n    /// @notice Contract owner (can update backend address)\n    address public owner;\n    \n    /// @notice Mapping of configSalt -> inviteCodeHash -> invite data\n    /// @dev configSalt is unique per group, inviteCodeHash is unique per invite\n    mapping(bytes32 => mapping(bytes32 => InviteData)) public invites;\n    \n    /// @notice Invite data structure\n    struct InviteData {\n        address inviter;       // Address of person who created the invite\n        uint256 expiresAt;     // Expiration timestamp\n        bool used;             // Whether invite was used\n        address usedBy;        // Address that used this invite (set when used)\n    }\n    \n    // ========== MODIFIERS ==========\n    \n    modifier onlyBackend() {\n        if (msg.sender != backend) revert OnlyBackend();\n        _;\n    }\n    \n    modifier onlyOwner() {\n        if (msg.sender != owner) revert OnlyOwner();\n        _;\n    }\n    \n    // ========== CONSTRUCTOR ==========\n    \n    /**\n     * @notice Initialize contract with backend signer address\n     * @param _backend Address authorized to register invites\n     */\n    constructor(address _backend) {\n        if (_backend == address(0)) revert InvalidAddress();\n        backend = _backend;\n        owner = msg.sender;\n        \n        emit BackendUpdated(address(0), _backend);\n    }\n    \n    // ========== BACKEND FUNCTIONS ==========\n    \n    /**\n     * @notice Register a new invite for a group\n     * @dev Only callable by the designated backend address\n     * @param configSalt The configuration salt for the group\n     * @param inviter The address creating the invite\n     * @param inviteCodeHash The hash of the invite code\n     * @param expiresAt The expiration timestamp (0 for no expiration)\n     */\n    function registerInvite(\n        bytes32 configSalt,\n        address inviter,\n        bytes32 inviteCodeHash,\n        uint256 expiresAt\n    ) external onlyBackend {\n        if (inviter == address(0)) revert InvalidAddress();\n        if (inviteCodeHash == bytes32(0)) revert InvalidInviteCode();\n        \n        InviteData storage invite = invites[configSalt][inviteCodeHash];\n        \n        // Allow re-registration if not yet used\n        if (invite.used) revert InviteAlreadyUsed();\n        \n        invite.inviter = inviter;\n        invite.expiresAt = expiresAt;\n        invite.used = false;\n        invite.usedBy = address(0);\n        \n        emit InviteRegistered(configSalt, inviter, inviteCodeHash, expiresAt);\n    }\n    \n    /**\n     * @notice Cancel a registered invite and free storage\n     * @dev Only callable by the backend address. Deletes invite data to reclaim gas.\n     * @param configSalt The configuration salt for the group\n     * @param inviteCodeHash The hash of the invite code to cancel\n     * \n     * IMPORTANT: Cannot cancel invites that have already been used.\n     * This prevents issues with historical data and ensures audit trails.\n     * \n     * GAS OPTIMIZATION: Using `delete` frees storage and provides gas refund (~15k gas)\n     */\n    function cancelInvite(\n        bytes32 configSalt,\n        bytes32 inviteCodeHash\n    ) external onlyBackend {\n        InviteData storage invite = invites[configSalt][inviteCodeHash];\n        \n        // Validate invite exists\n        if (invite.inviter == address(0)) revert InviteNotFound();\n        \n        // Cannot cancel if already used (preserve audit trail)\n        if (invite.used) revert InviteNotCancellable();\n        \n        // Emit event BEFORE deletion (so we still have data to emit)\n        emit InviteCancelled(configSalt, invite.inviter, inviteCodeHash);\n        \n        // Delete invite data - this zeros out all fields and provides gas refund\n        delete invites[configSalt][inviteCodeHash];\n    }\n    \n    /**\n     * @notice Update backend signer address\n     * @dev Only callable by contract owner\n     * @param newBackend New backend address\n     */\n    function updateBackend(address newBackend) external onlyOwner {\n        if (newBackend == address(0)) revert InvalidAddress();\n        \n        address oldBackend = backend;\n        backend = newBackend;\n        \n        emit BackendUpdated(oldBackend, newBackend);\n    }\n    \n    /**\n     * @notice Transfer ownership to new address\n     * @dev Only callable by current owner\n     * @param newOwner New owner address\n     */\n    function transferOwnership(address newOwner) external onlyOwner {\n        if (newOwner == address(0)) revert InvalidAddress();\n        owner = newOwner;\n    }\n    \n    // ========== LENS PROTOCOL IGROUPRULE INTERFACE ==========\n    \n    /**\n     * @notice Configure rule for a specific group\n     * @dev Called by Lens Protocol when rule is added to group\n     * @param configSalt Unique configuration identifier\n     * \n     * NOTE: This is part of the IGroupRule interface.\n     * For now, we don't need any special configuration.\n     * ConfigSalt serves as unique identifier per group.\n     */\n    function configure(\n        bytes32 configSalt,\n        KeyValue[] calldata /* ruleParams */\n    ) external override {\n        emit RuleConfigured(configSalt);\n    }\n    \n    // Parameter keys (using Lens Protocol pattern)\n    /// @custom:keccak lens.param.inviteCode\n    bytes32 constant PARAM__INVITE_CODE = 0x5797e5205a2d50babd9c0c4d9ab1fc2eb654e110118c575a0c6efc620e7e055e;\n    \n    /**\n     * @notice Process a join request (IGroupRule interface)\n     * @dev Validates invite code and marks it as used\n     * @param configSalt The configuration salt for the group\n     * @param account The account attempting to join\n     * @param ruleParams Rule-specific parameters containing the invite code\n     */\n    function processJoining(\n        bytes32 configSalt,\n        address account,\n        KeyValue[] calldata /* primitiveParams */,\n        KeyValue[] calldata ruleParams\n    ) external override {\n        if (account == address(0)) revert InvalidAddress();\n        \n        // Extract invite code from params\n        string memory providedCode = _extractInviteCode(ruleParams);\n        if (bytes(providedCode).length == 0) revert InvalidInviteCode();\n        \n        // Hash the provided code\n        bytes32 providedCodeHash = keccak256(abi.encodePacked(providedCode));\n        \n        // Get the invite data using the hash as the key\n        InviteData storage invite = invites[configSalt][providedCodeHash];\n        \n        // Validate invite exists (if inviter is zero, invite was deleted/cancelled or never existed)\n        if (invite.inviter == address(0)) revert InviteNotFound();\n        \n        // Check if already used\n        if (invite.used) revert InviteAlreadyUsed();\n        \n        // Check expiration\n        if (invite.expiresAt != 0 && block.timestamp > invite.expiresAt) {\n            revert InviteExpired();\n        }\n        \n        // Mark as used and record who used it\n        invite.used = true;\n        invite.usedBy = account;\n        \n        emit InviteUsed(configSalt, account, providedCodeHash, invite.inviter);\n    }\n    \n    /**\n     * @notice Validate when admin tries to add a member\n     * @dev Empty implementation = ALLOW all admin additions\n     * \n     * WHY: Admins should be able to add members without invites.\n     * This gives admins an \"override\" capability for:\n     * - Emergency adds\n     * - Onboarding founding members\n     * - Recovering from issues\n     * \n     * HOW IT WORKS:\n     * - Function completes without reverting\n     * - Lens Protocol interprets this as \"validation passed\"\n     * - Admin can add member successfully\n     */\n    function processAddition(\n        bytes32 /* configSalt */,\n        address /* originalMsgSender */,\n        address /* account */,\n        KeyValue[] calldata /* primitiveParams */,\n        KeyValue[] calldata /* ruleParams */\n    ) external pure override {\n        // Empty implementation = allow action\n        // No revert = validation passed\n    }\n    \n    /**\n     * @notice Validate when admin tries to remove a member\n     * @dev Empty implementation = ALLOW all removals\n     * \n     * WHY: Admins should always be able to remove members.\n     * This is a safety mechanism - groups should never be locked\n     * with bad actors that can't be removed.\n     */\n    function processRemoval(\n        bytes32 /* configSalt */,\n        address /* originalMsgSender */,\n        address /* account */,\n        KeyValue[] calldata /* primitiveParams */,\n        KeyValue[] calldata /* ruleParams */\n    ) external pure override {\n        // Empty implementation = allow action\n    }\n    \n    /**\n     * @notice Validate when someone tries to leave the group\n     * @dev Empty implementation = ALLOW anyone to leave anytime\n     * \n     * WHY: Users should always have the right to leave a group.\n     * This prevents groups from becoming \"traps\" that lock users in.\n     * It's a fundamental user freedom.\n     */\n    function processLeaving(\n        bytes32 /* configSalt */,\n        address /* account */,\n        KeyValue[] calldata /* primitiveParams */,\n        KeyValue[] calldata /* ruleParams */\n    ) external pure override {\n        // Empty implementation = allow action\n    }\n    \n    // ========== VIEW FUNCTIONS ==========\n    \n    /**\n     * @notice Extract invite code from KeyValue parameters\n     * @dev Helper function to parse Lens Protocol params\n     * @param params Array of KeyValue pairs\n     * @return Invite code string\n     */\n    function _extractInviteCode(KeyValue[] calldata params) private pure returns (string memory) {\n        for (uint256 i = 0; i < params.length; i++) {\n            if (params[i].key == PARAM__INVITE_CODE) {\n                return abi.decode(params[i].value, (string));\n            }\n        }\n        return \"\";\n    }\n    \n    /**\n     * @notice Get invite details by invite code hash\n     * @param configSalt Group configuration identifier\n     * @param inviteCodeHash Hash of the invite code\n     * @return inviter Address that created the invite\n     * @return expiresAt Expiration timestamp\n     * @return used Whether the invite was used\n     * @return usedBy Address that used the invite (if used)\n     */\n    function getInvite(\n        bytes32 configSalt,\n        bytes32 inviteCodeHash\n    ) external view returns (\n        address inviter,\n        uint256 expiresAt,\n        bool used,\n        address usedBy\n    ) {\n        InviteData storage invite = invites[configSalt][inviteCodeHash];\n        return (invite.inviter, invite.expiresAt, invite.used, invite.usedBy);\n    }\n}\n"
    },
    "contracts/libraries/TokenTransfer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title TokenTransfer\n * @notice Library for handling both native token and ERC20 token transfers\n * @dev Reduces code duplication across pool contracts\n */\nlibrary TokenTransfer {\n    /**\n     * @notice Receives tokens from sender (either native or ERC20)\n     * @param tokenAddress Address of the ERC20 token (zero address if native)\n     * @param isNativeToken Whether this is a native token transfer\n     * @param amount Amount of tokens to receive (for ERC20) or 0 (for native)\n     * @return The actual amount received\n     */\n    function receiveTokens(\n        address tokenAddress,\n        bool isNativeToken,\n        uint256 amount\n    ) internal returns (uint256) {\n        if (isNativeToken) {\n            require(msg.value > 0, \"Must send native token\");\n            return msg.value;\n        } else {\n            require(msg.value == 0, \"No native token\");\n            IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount);\n            return amount;\n        }\n    }\n\n    /**\n     * @notice Sends tokens to recipient (either native or ERC20)\n     * @param tokenAddress Address of the ERC20 token (zero address if native)\n     * @param isNativeToken Whether this is a native token transfer\n     * @param recipient Address to send tokens to\n     * @param amount Amount of tokens to send\n     */\n    function sendTokens(\n        address tokenAddress,\n        bool isNativeToken,\n        address recipient,\n        uint256 amount\n    ) internal {\n        if (isNativeToken) {\n            (bool success, ) = payable(recipient).call{value: amount}(\"\");\n            require(success, \"Transfer failed\");\n        } else {\n            IERC20(tokenAddress).transfer(recipient, amount);\n        }\n    }\n}\n"
    },
    "contracts/mocks/MockCUSD.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * @title MockCUSD\n * @notice Mock CUSD token for testing purposes\n */\ncontract MockCUSD is ERC20 {\n    constructor() ERC20(\"Citrea USD\", \"CUSD\") {\n        // Mint initial supply to deployer for testing\n        _mint(msg.sender, 10_000_000 * 10**18); // 10 million tokens\n    }\n\n    /**\n     * @notice Allows anyone to mint tokens for testing\n     * @param to Address to mint tokens to\n     * @param amount Amount of tokens to mint\n     */\n    function mint(address to, uint256 amount) external {\n        _mint(to, amount);\n    }\n}\n"
    },
    "contracts/mocks/MockLensCircle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @title MockLensCircle\n * @notice Mock contract to simulate a Lens.xyz circle contract for testing\n */\ncontract MockLensCircle {\n    string public name;\n    address public owner;\n\n    constructor(string memory _name, address _owner) {\n        name = _name;\n        owner = _owner;\n    }\n\n    function getCircleName() external view returns (string memory) {\n        return name;\n    }\n}\n"
    },
    "contracts/pools/DonationPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"../interfaces/IXershaPool.sol\";\nimport \"../libraries/TokenTransfer.sol\";\n\n/**\n * @title DonationPool\n * @notice Fundraising pool where circle members donate toward a specific goal and beneficiary\n * @dev Includes refund mechanism if goal is not met by deadline\n */\ncontract DonationPool is IXershaPool, ReentrancyGuard, Pausable {\n    using TokenTransfer for address;\n\n    // ========== State Variables ==========\n\n    /// @notice Address of the user who created this pool\n    address public creator;\n\n    /// @notice Address of the Lens.xyz circle contract\n    address public circleId;\n\n    /// @notice Human-readable name of the circle\n    string public circleName;\n\n    /// @notice Address of the ERC20 token used for donations (zero address if native token)\n    address public tokenAddress;\n\n    /// @notice Whether this pool uses native token (cBTC) or ERC20 token\n    bool public isNativeToken;\n\n    /// @notice Address that will receive the donated funds\n    address public beneficiary;\n\n    /// @notice Target fundraising amount in wei\n    uint256 public goalAmount;\n\n    /// @notice Deadline for fundraising as Unix timestamp\n    uint256 public deadline;\n\n    /// @notice Total amount raised so far\n    uint256 public totalRaised;\n\n    /// @notice Individual donation amounts per member\n    mapping(address => uint256) public donations;\n\n    /// @notice Array of all members in the pool\n    address[] public members;\n\n    /// @notice Mapping to check if an address is a member\n    mapping(address => bool) public isMember;\n\n    /// @notice Mapping to check if an address has been invited\n    mapping(address => bool) public isInvited;\n\n    /// @notice Array of addresses that have donated\n    address[] public donors;\n\n    /// @notice Whether funds have been released to beneficiary\n    bool public fundsReleased;\n\n    /// @notice Whether the pool is currently active\n    bool public isActive;\n\n    /// @notice Whether refunds are enabled (goal not met by deadline)\n    bool public refundsEnabled;\n\n    /// @notice Whether this contract has been initialized (for clone pattern)\n    bool private initialized;\n\n    // ========== Events ==========\n\n    event PoolCreated(\n        address indexed circleId,\n        address indexed creator,\n        address beneficiary,\n        uint256 goal,\n        uint256 deadline\n    );\n    event MemberInvited(address indexed member, address indexed invitedBy);\n    event MemberJoined(address indexed member);\n    event DonationMade(address indexed donor, uint256 amount);\n    event GoalReached(uint256 totalRaised);\n    event FundsReleased(address indexed beneficiary, uint256 amount);\n    event RefundsEnabled(uint256 timestamp);\n    event RefundClaimed(address indexed donor, uint256 amount);\n\n    // ========== Modifiers ==========\n\n    modifier onlyCreator() {\n        require(msg.sender == creator, \"Only creator can call this\");\n        _;\n    }\n\n    modifier onlyMember() {\n        require(isMember[msg.sender], \"Not a member\");\n        _;\n    }\n\n    modifier onlyInvited() {\n        require(isInvited[msg.sender], \"Not invited\");\n        _;\n    }\n\n    // ========== Constructor ==========\n\n    /**\n     * @notice Constructor for implementation contract\n     * @dev Prevents the implementation contract from being initialized\n     */\n    constructor() {\n        initialized = true;\n    }\n\n    /**\n     * @notice Initializes a new Donation pool clone\n     * @dev This replaces the constructor for cloned instances\n     * @param _creator Address of the user creating the pool\n     * @param _circleId Address of the Lens.xyz circle contract\n     * @param _circleName Name of the circle\n     * @param _beneficiary Address that will receive the funds\n     * @param _goalAmount Target fundraising amount in wei\n     * @param _deadline Deadline as Unix timestamp\n     * @param _tokenAddress Address of the ERC20 token to use for donations (zero address if native)\n     * @param _isNativeToken Whether this pool uses native token (cBTC) or ERC20 token\n     */\n    function initialize(\n        address _creator,\n        address _circleId,\n        string memory _circleName,\n        address _beneficiary,\n        uint256 _goalAmount,\n        uint256 _deadline,\n        address _tokenAddress,\n        bool _isNativeToken\n    ) external {\n        require(!initialized, \"Already initialized\");\n        initialized = true;\n\n        require(_beneficiary != address(0), \"Invalid beneficiary\");\n        require(_goalAmount > 0, \"Goal must be positive\");\n        require(_deadline > block.timestamp, \"Deadline must be future\");\n\n        // Validate token address based on token type\n        if (_isNativeToken) {\n            require(_tokenAddress == address(0), \"Token address must be zero for native token\");\n        } else {\n            require(_tokenAddress != address(0), \"Invalid token address for ERC20\");\n        }\n\n        creator = _creator;\n        circleId = _circleId;\n        circleName = _circleName;\n        beneficiary = _beneficiary;\n        goalAmount = _goalAmount;\n        deadline = _deadline;\n        tokenAddress = _tokenAddress;\n        isNativeToken = _isNativeToken;\n        isActive = true;\n\n        // Creator automatically becomes a member\n        members.push(_creator);\n        isMember[_creator] = true;\n        isInvited[_creator] = true;\n\n        emit PoolCreated(_circleId, _creator, _beneficiary, _goalAmount, _deadline);\n        emit MemberJoined(_creator);\n    }\n\n    // ========== Member Management ==========\n\n    /**\n     * @notice Invites a new member to the pool\n     * @dev Only creator can invite members\n     * @param member Address of the member to invite\n     */\n    function inviteMember(address member) external onlyCreator whenNotPaused {\n        require(!isInvited[member], \"Already invited\");\n        require(member != address(0), \"Invalid address\");\n\n        isInvited[member] = true;\n        emit MemberInvited(member, creator);\n    }\n\n    /**\n     * @notice Allows an invited member to join the pool\n     */\n    function joinPool() external onlyInvited whenNotPaused {\n        require(!isMember[msg.sender], \"Already a member\");\n\n        members.push(msg.sender);\n        isMember[msg.sender] = true;\n\n        emit MemberJoined(msg.sender);\n    }\n\n    // ========== Donations ==========\n\n    /**\n     * @notice Allows a member to donate to the pool\n     * @dev For ERC20: Member must have approved the contract to spend tokens before calling\n     *      For native token: amount parameter is ignored, msg.value is used\n     * @param amount Amount of ERC20 tokens to donate (ignored for native token pools)\n     */\n    function donate(uint256 amount) external payable onlyMember whenNotPaused nonReentrant {\n        require(block.timestamp <= deadline, \"Deadline passed\");\n        require(!fundsReleased, \"Funds already released\");\n        require(!refundsEnabled, \"Refunds enabled, cannot donate\");\n        require(isActive, \"Pool not active\");\n        require(isNativeToken || amount > 0, \"Must donate something\");\n\n        uint256 donationAmount = TokenTransfer.receiveTokens(tokenAddress, isNativeToken, amount);\n\n        // Track first-time donors\n        if (donations[msg.sender] == 0) {\n            donors.push(msg.sender);\n        }\n\n        donations[msg.sender] += donationAmount;\n        totalRaised += donationAmount;\n\n        emit DonationMade(msg.sender, donationAmount);\n\n        // Check if goal reached\n        if (totalRaised >= goalAmount) {\n            emit GoalReached(totalRaised);\n        }\n    }\n\n    // ========== Fund Management ==========\n\n    /**\n     * @notice Releases funds to the beneficiary\n     * @dev Only creator can release, can only release after goal met or deadline passed\n     */\n    function releaseFunds() external onlyCreator whenNotPaused nonReentrant {\n        require(!fundsReleased, \"Already released\");\n        require(!refundsEnabled, \"Refunds enabled\");\n        require(\n            totalRaised >= goalAmount || block.timestamp > deadline,\n            \"Goal not met and deadline not passed\"\n        );\n\n        fundsReleased = true;\n        isActive = false;\n\n        uint256 amount = isNativeToken\n            ? address(this).balance\n            : IERC20(tokenAddress).balanceOf(address(this));\n\n        TokenTransfer.sendTokens(tokenAddress, isNativeToken, beneficiary, amount);\n\n        emit FundsReleased(beneficiary, amount);\n    }\n\n    /**\n     * @notice Enables refunds if goal was not met by deadline\n     * @dev Only creator can enable refunds, only after deadline if goal not met\n     */\n    function enableRefunds() external onlyCreator whenNotPaused {\n        require(!fundsReleased, \"Funds already released\");\n        require(!refundsEnabled, \"Refunds already enabled\");\n        require(block.timestamp > deadline, \"Deadline not passed\");\n        require(totalRaised < goalAmount, \"Goal was met\");\n\n        refundsEnabled = true;\n        isActive = false;\n\n        emit RefundsEnabled(block.timestamp);\n    }\n\n    /**\n     * @notice Allows a donor to claim their refund\n     * @dev Only available if refunds are enabled\n     */\n    function claimRefund() external whenNotPaused nonReentrant {\n        require(refundsEnabled, \"Refunds not enabled\");\n        require(donations[msg.sender] > 0, \"Nothing to refund\");\n\n        uint256 amount = donations[msg.sender];\n        donations[msg.sender] = 0;\n        totalRaised -= amount;\n\n        TokenTransfer.sendTokens(tokenAddress, isNativeToken, msg.sender, amount);\n\n        emit RefundClaimed(msg.sender, amount);\n    }\n\n    // ========== Emergency Functions ==========\n\n    /**\n     * @notice Pauses the contract in case of emergency\n     * @dev Only creator can pause\n     */\n    function pause() external onlyCreator {\n        _pause();\n    }\n\n    /**\n     * @notice Unpauses the contract\n     * @dev Only creator can unpause\n     */\n    function unpause() external onlyCreator {\n        _unpause();\n    }\n\n    // ========== View Functions ==========\n\n    /**\n     * @notice Gets a member's total donation amount\n     * @param donor Address of the donor\n     * @return Donation amount in wei\n     */\n    function getDonation(address donor) external view returns (uint256) {\n        return donations[donor];\n    }\n\n    /**\n     * @notice Gets the total number of members\n     * @return Member count\n     */\n    function getMemberCount() external view returns (uint256) {\n        return members.length;\n    }\n\n    /**\n     * @notice Gets all members\n     * @return Array of member addresses\n     */\n    function getMembers() external view returns (address[] memory) {\n        return members;\n    }\n\n    /**\n     * @notice Gets the total number of donors\n     * @return Donor count\n     */\n    function getDonorCount() external view returns (uint256) {\n        return donors.length;\n    }\n\n    /**\n     * @notice Gets all donors\n     * @return Array of donor addresses\n     */\n    function getDonors() external view returns (address[] memory) {\n        return donors;\n    }\n\n    /**\n     * @notice Gets the time remaining until deadline\n     * @return Seconds remaining, or 0 if deadline passed\n     */\n    function getTimeRemaining() external view returns (uint256) {\n        if (block.timestamp >= deadline) {\n            return 0;\n        }\n        return deadline - block.timestamp;\n    }\n\n    /**\n     * @notice Gets the current fundraising progress\n     * @return raised Current amount raised\n     * @return goal Goal amount\n     */\n    function getProgress() external view returns (uint256 raised, uint256 goal) {\n        return (totalRaised, goalAmount);\n    }\n\n    /**\n     * @notice Checks if the fundraising goal has been reached\n     * @return True if goal reached, false otherwise\n     */\n    function isGoalReached() external view returns (bool) {\n        return totalRaised >= goalAmount;\n    }\n\n    /**\n     * @notice Gets the contract's current balance\n     * @return Balance in wei\n     */\n    function getContractBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n}\n"
    },
    "contracts/pools/ROSCAPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"../interfaces/IXershaPool.sol\";\nimport \"../libraries/TokenTransfer.sol\";\n\n/**\n * @title ROSCAPool\n * @notice Rotating Savings and Credit Association pool implementation\n * @dev Members contribute fixed amounts each round, one member receives the pot each round\n * Payout order is provided off-chain by the creator for fairness and transparency\n */\ncontract ROSCAPool is IXershaPool, ReentrancyGuard, Pausable {\n    using TokenTransfer for address;\n\n    // ========== Constants ==========\n\n    /// @notice Duration of each cycle/round in seconds (30 days)\n    uint256 public constant CYCLE_DURATION = 30 days;\n\n    /// @notice Minimum number of members required to start a ROSCA\n    uint8 public constant MIN_MEMBERS = 5;\n\n    /// @notice Maximum number of members allowed in a ROSCA\n    uint8 public constant MAX_MEMBERS = 12;\n\n    // ========== State Variables ==========\n\n    /// @notice Address of the user who created this pool\n    address public creator;\n\n    /// @notice Address of the Lens.xyz circle contract\n    address public circleId;\n\n    /// @notice Human-readable name of the circle\n    string public circleName;\n\n    /// @notice Address of the ERC20 token used for contributions (zero address if native token)\n    address public tokenAddress;\n\n    /// @notice Whether this pool uses native token (cBTC) or ERC20 token\n    bool public isNativeToken;\n\n    /// @notice Fixed contribution amount per round in wei\n    uint256 public contributionAmount;\n\n    /// @notice Array of all members in the pool\n    address[] public members;\n\n    /// @notice Mapping to check if an address is a member\n    mapping(address => bool) public isMember;\n\n    /// @notice Mapping to check if an address has been invited\n    mapping(address => bool) public isInvited;\n\n    /// @notice Total amount contributed by each member across all rounds\n    mapping(address => uint256) public totalContributed;\n\n    /// @notice Array defining the order in which members receive payouts\n    address[] public payoutOrder;\n\n    /// @notice Current round number (1-indexed)\n    uint8 public currentRound;\n\n    /// @notice Whether the current round's payout has been completed\n    bool public currentRoundPaidOut;\n\n    /// @notice Mapping to track which members have received their payout\n    mapping(address => bool) public hasReceivedPayout;\n\n    /// @notice Tracks whether a member has paid for a specific round\n    mapping(address => mapping(uint8 => bool)) public hasPaid;\n\n    /// @notice Timestamp when the ROSCA was started\n    uint256 public roscaStartTime;\n\n    /// @notice Timestamp when the current round started\n    uint256 public currentRoundStartTime;\n\n    /// @notice Whether the ROSCA is currently active\n    bool public isActive;\n\n    /// @notice Whether the ROSCA has completed all rounds\n    bool public isComplete;\n\n    /// @notice Whether this contract has been initialized (for clone pattern)\n    bool private initialized;\n\n    // ========== Events ==========\n\n    event ROSCACreated(address indexed circleId, address indexed creator, uint256 contributionAmount);\n    event MemberInvited(address indexed member, address indexed invitedBy);\n    event MemberJoined(address indexed member, uint256 timestamp);\n    event ROSCAStarted(address[] payoutOrder, uint256 startTime);\n    event ContributionMade(address indexed member, uint8 round, uint256 amount);\n    event AllMembersContributed(uint8 round);\n    event PayoutTriggered(address indexed recipient, uint256 amount, uint8 round);\n    event RoundStarted(uint8 round, uint256 startTime);\n    event ROSCACompleted(uint256 completionTime);\n\n    // ========== Modifiers ==========\n\n    modifier onlyCreator() {\n        require(msg.sender == creator, \"Only creator can call this\");\n        _;\n    }\n\n    modifier onlyMember() {\n        require(isMember[msg.sender], \"Not a member\");\n        _;\n    }\n\n    modifier onlyInvited() {\n        require(isInvited[msg.sender], \"Not invited\");\n        _;\n    }\n\n    modifier poolActive() {\n        require(isActive && !isComplete, \"Pool not active\");\n        _;\n    }\n\n    // ========== Constructor ==========\n\n    /**\n     * @notice Constructor for implementation contract\n     * @dev Prevents the implementation contract from being initialized\n     */\n    constructor() {\n        initialized = true;\n    }\n\n    /**\n     * @notice Initializes a new ROSCA pool clone\n     * @dev This replaces the constructor for cloned instances\n     * @param _creator Address of the user creating the pool\n     * @param _circleId Address of the Lens.xyz circle contract\n     * @param _circleName Name of the circle\n     * @param _contributionAmount Fixed contribution amount per round\n     * @param _tokenAddress Address of the ERC20 token to use for contributions (zero address if native)\n     * @param _isNativeToken Whether this pool uses native token (cBTC) or ERC20 token\n     */\n    function initialize(\n        address _creator,\n        address _circleId,\n        string memory _circleName,\n        uint256 _contributionAmount,\n        address _tokenAddress,\n        bool _isNativeToken\n    ) external {\n        require(!initialized, \"Already initialized\");\n        initialized = true;\n\n        require(_contributionAmount > 0, \"Invalid contribution amount\");\n\n        // Validate token address based on token type\n        if (_isNativeToken) {\n            require(_tokenAddress == address(0), \"Token address must be zero for native token\");\n        } else {\n            require(_tokenAddress != address(0), \"Invalid token address for ERC20\");\n        }\n\n        creator = _creator;\n        circleId = _circleId;\n        circleName = _circleName;\n        contributionAmount = _contributionAmount;\n        tokenAddress = _tokenAddress;\n        isNativeToken = _isNativeToken;\n\n        // Creator automatically becomes a member\n        members.push(_creator);\n        isMember[_creator] = true;\n        isInvited[_creator] = true;\n\n        emit ROSCACreated(_circleId, _creator, _contributionAmount);\n        emit MemberJoined(_creator, block.timestamp);\n    }\n\n    // ========== Member Management ==========\n\n    /**\n     * @notice Invites a new member to the ROSCA\n     * @dev Only creator can invite, only before ROSCA starts\n     * @param member Address of the member to invite\n     */\n    function inviteMember(address member) external onlyCreator whenNotPaused {\n        require(!isActive, \"Cannot invite after ROSCA starts\");\n        require(!isInvited[member], \"Already invited\");\n        require(members.length < MAX_MEMBERS, \"Max members reached\");\n\n        isInvited[member] = true;\n        emit MemberInvited(member, creator);\n    }\n\n    /**\n     * @notice Allows an invited member to join the pool\n     * @dev Can only join before ROSCA starts\n     */\n    function joinPool() external onlyInvited whenNotPaused {\n        require(!isActive, \"Cannot join after ROSCA starts\");\n        require(!isMember[msg.sender], \"Already a member\");\n\n        members.push(msg.sender);\n        isMember[msg.sender] = true;\n\n        emit MemberJoined(msg.sender, block.timestamp);\n    }\n\n    // ========== ROSCA Lifecycle ==========\n\n    /**\n     * @notice Starts the ROSCA with a provided payout order\n     * @dev Only creator can start, requires min members, payout order generated off-chain\n     * @param _payoutOrder Array of addresses defining payout order (must include all members exactly once)\n     */\n    function startROSCA(address[] calldata _payoutOrder) external onlyCreator whenNotPaused {\n        require(!isActive, \"Already started\");\n        require(members.length >= MIN_MEMBERS, \"Not enough members\");\n        require(_payoutOrder.length == members.length, \"Invalid payout order length\");\n\n        // Validate payout order contains all members exactly once\n        _validatePayoutOrder(_payoutOrder);\n\n        payoutOrder = _payoutOrder;\n        isActive = true;\n        currentRound = 1;\n        roscaStartTime = block.timestamp;\n        currentRoundStartTime = block.timestamp;\n\n        emit ROSCAStarted(_payoutOrder, block.timestamp);\n        emit RoundStarted(1, block.timestamp);\n    }\n\n    /**\n     * @notice Validates that payout order contains all members exactly once\n     * @param _payoutOrder The payout order array to validate\n     */\n    function _validatePayoutOrder(address[] calldata _payoutOrder) private view {\n        // Validate each member is in the payout order and check for duplicates\n        for (uint256 i = 0; i < _payoutOrder.length; i++) {\n            address recipient = _payoutOrder[i];\n            require(isMember[recipient], \"Payout order contains non-member\");\n\n            // Check for duplicates by using a simple loop (gas-efficient for small arrays)\n            for (uint256 j = i + 1; j < _payoutOrder.length; j++) {\n                require(_payoutOrder[i] != _payoutOrder[j], \"Duplicate in payout order\");\n            }\n        }\n    }\n\n    /**\n     * @notice Allows a member to contribute for the current round\n     * @dev For ERC20: Member must have approved the contract to spend tokens before calling\n     *      For native token: Must send exact amount of native currency\n     */\n    function contribute() external payable onlyMember poolActive whenNotPaused nonReentrant {\n        require(!hasPaid[msg.sender][currentRound], \"Already contributed\");\n        require(currentRound <= members.length, \"All rounds complete\");\n\n        hasPaid[msg.sender][currentRound] = true;\n        totalContributed[msg.sender] += contributionAmount;\n\n        TokenTransfer.receiveTokens(tokenAddress, isNativeToken, contributionAmount);\n\n        emit ContributionMade(msg.sender, currentRound, contributionAmount);\n\n        if (_everyonePaid()) {\n            emit AllMembersContributed(currentRound);\n        }\n    }\n\n    /**\n     * @notice Triggers the payout for the current round\n     * @dev Only the designated recipient can trigger their own payout\n     * Requires all members to have contributed for the current round\n     */\n    function triggerPayout() external poolActive whenNotPaused nonReentrant {\n        require(_everyonePaid(), \"Not everyone has paid\");\n        require(!currentRoundPaidOut, \"Round already paid out\");\n\n        address recipient = payoutOrder[currentRound - 1];\n        require(msg.sender == recipient, \"Only recipient can claim payout\");\n\n        currentRoundPaidOut = true;\n        hasReceivedPayout[recipient] = true;\n\n        uint256 payoutAmount = contributionAmount * members.length;\n\n        TokenTransfer.sendTokens(tokenAddress, isNativeToken, recipient, payoutAmount);\n\n        emit PayoutTriggered(recipient, payoutAmount, currentRound);\n\n        // Check if ROSCA is complete\n        if (currentRound >= members.length) {\n            isComplete = true;\n            isActive = false;\n            emit ROSCACompleted(block.timestamp);\n        }\n    }\n\n    /**\n     * @notice Starts the next round after the cycle duration has passed\n     * @dev Any member can call this after the 30-day cycle is complete\n     */\n    function startNextRound() external onlyMember whenNotPaused {\n        require(isActive && !isComplete, \"ROSCA not active\");\n        require(currentRoundPaidOut, \"Current round not paid out\");\n        require(currentRound < members.length, \"All rounds complete\");\n        require(\n            block.timestamp >= currentRoundStartTime + CYCLE_DURATION,\n            \"30-day cycle not complete\"\n        );\n\n        currentRound++;\n        currentRoundStartTime = block.timestamp;\n        currentRoundPaidOut = false;\n\n        emit RoundStarted(currentRound, block.timestamp);\n    }\n\n    // ========== Emergency Functions ==========\n\n    /**\n     * @notice Pauses the contract in case of emergency\n     * @dev Only creator can pause\n     */\n    function pause() external onlyCreator {\n        _pause();\n    }\n\n    /**\n     * @notice Unpauses the contract\n     * @dev Only creator can unpause\n     */\n    function unpause() external onlyCreator {\n        _unpause();\n    }\n\n    // ========== View Functions ==========\n\n    /**\n     * @notice Checks if everyone has paid for the current round\n     * @return True if all members have contributed, false otherwise\n     */\n    function everyonePaid() external view returns (bool) {\n        return _everyonePaid();\n    }\n\n    /**\n     * @notice Internal function to check if everyone has paid\n     * @return True if all members have contributed, false otherwise\n     */\n    function _everyonePaid() private view returns (bool) {\n        for (uint256 i = 0; i < members.length; i++) {\n            if (!hasPaid[members[i]][currentRound]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @notice Gets the current round's recipient\n     * @return Address of the member who should receive payout this round\n     */\n    function getCurrentRecipient() external view returns (address) {\n        if (currentRound == 0 || currentRound > payoutOrder.length) {\n            return address(0);\n        }\n        return payoutOrder[currentRound - 1];\n    }\n\n    /**\n     * @notice Gets the total number of members\n     * @return Member count\n     */\n    function getMemberCount() external view returns (uint256) {\n        return members.length;\n    }\n\n    /**\n     * @notice Gets all members\n     * @return Array of member addresses\n     */\n    function getMembers() external view returns (address[] memory) {\n        return members;\n    }\n\n    /**\n     * @notice Gets the complete payout order\n     * @return Array of addresses in payout order\n     */\n    function getPayoutOrder() external view returns (address[] memory) {\n        return payoutOrder;\n    }\n\n    /**\n     * @notice Gets list of members who have contributed in the current round\n     * @return Array of addresses who have paid\n     */\n    function getRoundContributors() external view returns (address[] memory) {\n        uint256 contributorCount = 0;\n\n        // Count contributors\n        for (uint256 i = 0; i < members.length; i++) {\n            if (hasPaid[members[i]][currentRound]) {\n                contributorCount++;\n            }\n        }\n\n        // Build contributor array\n        address[] memory contributors = new address[](contributorCount);\n        uint256 index = 0;\n\n        for (uint256 i = 0; i < members.length; i++) {\n            if (hasPaid[members[i]][currentRound]) {\n                contributors[index] = members[i];\n                index++;\n            }\n        }\n\n        return contributors;\n    }\n\n    /**\n     * @notice Gets the contract's current balance\n     * @return Balance in wei\n     */\n    function getBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n}\n"
    },
    "contracts/pools/SavingsPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"../interfaces/IXershaPool.sol\";\nimport \"../libraries/TokenTransfer.sol\";\n\n/**\n * @title SavingsPool\n * @notice Collective savings pool where members can deposit and withdraw freely\n * @dev Members maintain individual balances and can set collective savings goals\n */\ncontract SavingsPool is IXershaPool, ReentrancyGuard, Pausable {\n    using TokenTransfer for address;\n\n    // ========== State Variables ==========\n\n    /// @notice Address of the user who created this pool\n    address public creator;\n\n    /// @notice Address of the Lens.xyz circle contract\n    address public circleId;\n\n    /// @notice Human-readable name of the circle\n    string public circleName;\n\n    /// @notice Address of the ERC20 token used for savings (zero address if native token)\n    address public tokenAddress;\n\n    /// @notice Whether this pool uses native token (cBTC) or ERC20 token\n    bool public isNativeToken;\n\n    /// @notice Individual balances for each member\n    mapping(address => uint256) public balances;\n\n    /// @notice Total amount saved across all members\n    uint256 public totalSaved;\n\n    /// @notice Array of all members in the pool\n    address[] public members;\n\n    /// @notice Mapping to check if an address is a member\n    mapping(address => bool) public isMember;\n\n    /// @notice Mapping to check if an address has been invited\n    mapping(address => bool) public isInvited;\n\n    /// @notice Optional target savings amount set by creator\n    uint256 public targetAmount;\n\n    /// @notice Optional target date for reaching the goal\n    uint256 public targetDate;\n\n    /// @notice Whether the pool is currently active\n    bool public isActive;\n\n    /// @notice Whether this contract has been initialized (for clone pattern)\n    bool private initialized;\n\n    // ========== Events ==========\n\n    event PoolCreated(address indexed circleId, address indexed creator);\n    event MemberInvited(address indexed member, address indexed invitedBy);\n    event MemberJoined(address indexed member);\n    event Deposited(address indexed member, uint256 amount);\n    event Withdrawn(address indexed member, uint256 amount);\n    event TargetSet(uint256 amount, uint256 date);\n    event PoolClosed(uint256 timestamp);\n\n    // ========== Modifiers ==========\n\n    modifier onlyCreator() {\n        require(msg.sender == creator, \"Only creator can call this\");\n        _;\n    }\n\n    modifier onlyMember() {\n        require(isMember[msg.sender], \"Not a member\");\n        _;\n    }\n\n    modifier onlyInvited() {\n        require(isInvited[msg.sender], \"Not invited\");\n        _;\n    }\n\n    modifier poolIsActive() {\n        require(isActive, \"Pool not active\");\n        _;\n    }\n\n    // ========== Constructor ==========\n\n    /**\n     * @notice Constructor for implementation contract\n     * @dev Prevents the implementation contract from being initialized\n     */\n    constructor() {\n        initialized = true;\n    }\n\n    /**\n     * @notice Initializes a new Savings pool clone\n     * @dev This replaces the constructor for cloned instances\n     * @param _creator Address of the user creating the pool\n     * @param _circleId Address of the Lens.xyz circle contract\n     * @param _circleName Name of the circle\n     * @param _tokenAddress Address of the ERC20 token to use for savings (zero address if native)\n     * @param _isNativeToken Whether this pool uses native token (cBTC) or ERC20 token\n     */\n    function initialize(\n        address _creator,\n        address _circleId,\n        string memory _circleName,\n        address _tokenAddress,\n        bool _isNativeToken\n    ) external {\n        require(!initialized, \"Already initialized\");\n        initialized = true;\n\n        // Validate token address based on token type\n        if (_isNativeToken) {\n            require(_tokenAddress == address(0), \"Token address must be zero for native token\");\n        } else {\n            require(_tokenAddress != address(0), \"Invalid token address for ERC20\");\n        }\n\n        creator = _creator;\n        circleId = _circleId;\n        circleName = _circleName;\n        tokenAddress = _tokenAddress;\n        isNativeToken = _isNativeToken;\n        isActive = true;\n\n        // Creator automatically becomes a member\n        members.push(_creator);\n        isMember[_creator] = true;\n        isInvited[_creator] = true;\n\n        emit PoolCreated(_circleId, _creator);\n        emit MemberJoined(_creator);\n    }\n\n    // ========== Member Management ==========\n\n    /**\n     * @notice Invites a new member to the pool\n     * @dev Only creator can invite members\n     * @param member Address of the member to invite\n     */\n    function inviteMember(address member) external onlyCreator whenNotPaused {\n        require(!isInvited[member], \"Already invited\");\n        require(member != address(0), \"Invalid address\");\n\n        isInvited[member] = true;\n        emit MemberInvited(member, creator);\n    }\n\n    /**\n     * @notice Allows an invited member to join the pool\n     */\n    function joinPool() external onlyInvited whenNotPaused {\n        require(!isMember[msg.sender], \"Already a member\");\n\n        members.push(msg.sender);\n        isMember[msg.sender] = true;\n\n        emit MemberJoined(msg.sender);\n    }\n\n    // ========== Deposits & Withdrawals ==========\n\n    /**\n     * @notice Allows a member to deposit funds into their savings\n     * @dev For ERC20: Member must have approved the contract to spend tokens before calling\n     *      For native token: amount parameter is ignored, msg.value is used\n     * @param amount Amount of ERC20 tokens to deposit (ignored for native token pools)\n     */\n    function deposit(uint256 amount) external payable onlyMember poolIsActive whenNotPaused nonReentrant {\n        require(isNativeToken || amount > 0, \"Must deposit something\");\n\n        uint256 depositAmount = TokenTransfer.receiveTokens(tokenAddress, isNativeToken, amount);\n\n        balances[msg.sender] += depositAmount;\n        totalSaved += depositAmount;\n\n        emit Deposited(msg.sender, depositAmount);\n    }\n\n    /**\n     * @notice Allows a member to withdraw from their savings balance\n     * @param amount Amount of tokens to withdraw\n     */\n    function withdraw(uint256 amount) external onlyMember whenNotPaused nonReentrant {\n        require(amount > 0, \"Must withdraw something\");\n        require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n        balances[msg.sender] -= amount;\n        totalSaved -= amount;\n\n        TokenTransfer.sendTokens(tokenAddress, isNativeToken, msg.sender, amount);\n\n        emit Withdrawn(msg.sender, amount);\n    }\n\n    // ========== Goal Management ==========\n\n    /**\n     * @notice Sets or updates the savings goal for the pool\n     * @dev Only creator can set goals\n     * @param _amount Target savings amount in wei\n     * @param _date Target date as Unix timestamp\n     */\n    function setTarget(uint256 _amount, uint256 _date) external onlyCreator whenNotPaused {\n        require(_amount > 0, \"Target amount must be positive\");\n        require(_date > block.timestamp, \"Target date must be in future\");\n\n        targetAmount = _amount;\n        targetDate = _date;\n\n        emit TargetSet(_amount, _date);\n    }\n\n    // ========== Pool Management ==========\n\n    /**\n     * @notice Closes the pool, preventing further deposits\n     * @dev Only creator can close. Members can still withdraw their balances.\n     */\n    function closePool() external onlyCreator whenNotPaused {\n        isActive = false;\n        emit PoolClosed(block.timestamp);\n    }\n\n    /**\n     * @notice Pauses the contract in case of emergency\n     * @dev Only creator can pause\n     */\n    function pause() external onlyCreator {\n        _pause();\n    }\n\n    /**\n     * @notice Unpauses the contract\n     * @dev Only creator can unpause\n     */\n    function unpause() external onlyCreator {\n        _unpause();\n    }\n\n    // ========== View Functions ==========\n\n    /**\n     * @notice Gets a member's savings balance\n     * @param member Address of the member\n     * @return Balance in wei\n     */\n    function getBalance(address member) external view returns (uint256) {\n        return balances[member];\n    }\n\n    /**\n     * @notice Gets the total number of members\n     * @return Member count\n     */\n    function getMemberCount() external view returns (uint256) {\n        return members.length;\n    }\n\n    /**\n     * @notice Gets all members\n     * @return Array of member addresses\n     */\n    function getMembers() external view returns (address[] memory) {\n        return members;\n    }\n\n    /**\n     * @notice Gets the current progress toward the savings goal\n     * @return current Current total savings\n     * @return target Target savings amount\n     */\n    function getProgress() external view returns (uint256 current, uint256 target) {\n        return (totalSaved, targetAmount);\n    }\n\n    /**\n     * @notice Checks if the savings goal has been reached\n     * @return True if target is set and reached, false otherwise\n     */\n    function isGoalReached() external view returns (bool) {\n        if (targetAmount == 0) return false;\n        return totalSaved >= targetAmount;\n    }\n\n    /**\n     * @notice Gets the contract's current balance\n     * @return Balance in wei\n     */\n    function getContractBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n}\n"
    },
    "contracts/XershaFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./pools/ROSCAPool.sol\";\nimport \"./pools/SavingsPool.sol\";\nimport \"./pools/DonationPool.sol\";\n\n/**\n * @title XershaFactory\n * @notice Factory contract for creating and managing Xersha pools using minimal proxy pattern\n * @dev Enforces one pool per circle and tracks all deployed pools\n *      Uses EIP-1167 minimal proxies (clones) for gas-efficient pool deployment\n */\ncontract XershaFactory is Ownable {\n    // ========== Types ==========\n\n    enum PoolType {\n        ROSCA,\n        SAVINGS,\n        DONATION\n    }\n\n    // ========== State Variables ==========\n\n    /// @notice Implementation contract for ROSCA pools\n    address public roscaImplementation;\n\n    /// @notice Implementation contract for Savings pools\n    address public savingsImplementation;\n\n    /// @notice Implementation contract for Donation pools\n    address public donationImplementation;\n\n    /// @notice Mapping from circle contract address to pool address\n    mapping(address => address) public circleToPool;\n\n    /// @notice Mapping to validate if an address is a legitimate pool created by this factory\n    mapping(address => bool) public isValidPool;\n\n    /// @notice Mapping from pool address to pool type\n    mapping(address => PoolType) public poolTypes;\n\n    /// @notice Array of all pools created by this factory\n    address[] public allPools;\n\n    // ========== Events ==========\n\n    /**\n     * @notice Emitted when a new pool is created\n     * @param circleId The Lens.xyz circle contract address\n     * @param poolAddress The address of the newly created pool\n     * @param creator The address that created the pool\n     * @param poolType The type of pool created (ROSCA, SAVINGS, or DONATION)\n     */\n    event PoolCreated(\n        address indexed circleId,\n        address indexed poolAddress,\n        address indexed creator,\n        PoolType poolType\n    );\n\n    /**\n     * @notice Emitted when an implementation address is updated\n     * @param poolType The type of pool implementation that was updated\n     * @param newImplementation The new implementation address\n     */\n    event ImplementationUpdated(string poolType, address indexed newImplementation);\n\n    // ========== Constructor ==========\n\n    /**\n     * @notice Initializes the factory with implementation addresses\n     * @param initialOwner Address that will own the factory\n     * @param _roscaImpl Address of the ROSCA pool implementation\n     * @param _savingsImpl Address of the Savings pool implementation\n     * @param _donationImpl Address of the Donation pool implementation\n     */\n    constructor(\n        address initialOwner,\n        address _roscaImpl,\n        address _savingsImpl,\n        address _donationImpl\n    ) Ownable(initialOwner) {\n        require(_roscaImpl != address(0), \"Invalid ROSCA implementation\");\n        require(_savingsImpl != address(0), \"Invalid Savings implementation\");\n        require(_donationImpl != address(0), \"Invalid Donation implementation\");\n\n        roscaImplementation = _roscaImpl;\n        savingsImplementation = _savingsImpl;\n        donationImplementation = _donationImpl;\n    }\n\n    // ========== Pool Creation Functions ==========\n\n    /**\n     * @notice Creates a new ROSCA (Rotating Savings and Credit Association) pool\n     * @dev Validates circle ID and ensures no duplicate pools for the same circle\n     *      Uses EIP-1167 minimal proxy pattern for gas-efficient deployment\n     * @param circleId The Lens.xyz circle contract address\n     * @param circleName The name of the circle\n     * @param contributionAmount Fixed amount each member must contribute per round\n     * @param tokenAddress Address of the ERC20 token (zero address if native)\n     * @param isNativeToken Whether to use native token or ERC20\n     * @return The address of the newly created ROSCA pool clone\n     */\n    function createROSCA(\n        address circleId,\n        string memory circleName,\n        uint256 contributionAmount,\n        address tokenAddress,\n        bool isNativeToken\n    ) external returns (address) {\n        _validateCircleId(circleId);\n        require(circleToPool[circleId] == address(0), \"Circle already has pool\");\n        require(contributionAmount > 0, \"Invalid contribution amount\");\n\n        // Clone the ROSCA implementation\n        address clone = Clones.clone(roscaImplementation);\n\n        // Initialize the clone\n        ROSCAPool(clone).initialize(\n            msg.sender,\n            circleId,\n            circleName,\n            contributionAmount,\n            tokenAddress,\n            isNativeToken\n        );\n\n        _registerPool(circleId, clone, PoolType.ROSCA);\n\n        emit PoolCreated(circleId, clone, msg.sender, PoolType.ROSCA);\n        return clone;\n    }\n\n    /**\n     * @notice Creates a new Savings pool for collective savings\n     * @dev Validates circle ID and ensures no duplicate pools for the same circle\n     *      Uses EIP-1167 minimal proxy pattern for gas-efficient deployment\n     * @param circleId The Lens.xyz circle contract address\n     * @param circleName The name of the circle\n     * @param tokenAddress Address of the ERC20 token (zero address if native)\n     * @param isNativeToken Whether to use native token or ERC20\n     * @return The address of the newly created Savings pool clone\n     */\n    function createSavingsPool(\n        address circleId,\n        string memory circleName,\n        address tokenAddress,\n        bool isNativeToken\n    ) external returns (address) {\n        _validateCircleId(circleId);\n        require(circleToPool[circleId] == address(0), \"Circle already has pool\");\n\n        // Clone the Savings implementation\n        address clone = Clones.clone(savingsImplementation);\n\n        // Initialize the clone\n        SavingsPool(clone).initialize(\n            msg.sender,\n            circleId,\n            circleName,\n            tokenAddress,\n            isNativeToken\n        );\n\n        _registerPool(circleId, clone, PoolType.SAVINGS);\n\n        emit PoolCreated(circleId, clone, msg.sender, PoolType.SAVINGS);\n        return clone;\n    }\n\n    /**\n     * @notice Creates a new Donation pool for group fundraising\n     * @dev Validates circle ID and ensures no duplicate pools for the same circle\n     *      Uses EIP-1167 minimal proxy pattern for gas-efficient deployment\n     * @param circleId The Lens.xyz circle contract address\n     * @param circleName The name of the circle\n     * @param beneficiary The address that will receive the donated funds\n     * @param goalAmount The fundraising goal amount in wei\n     * @param deadline Unix timestamp when fundraising ends\n     * @param tokenAddress Address of the ERC20 token (zero address if native)\n     * @param isNativeToken Whether to use native token or ERC20\n     * @return The address of the newly created Donation pool clone\n     */\n    function createDonationPool(\n        address circleId,\n        string memory circleName,\n        address beneficiary,\n        uint256 goalAmount,\n        uint256 deadline,\n        address tokenAddress,\n        bool isNativeToken\n    ) external returns (address) {\n        _validateCircleId(circleId);\n        require(circleToPool[circleId] == address(0), \"Circle already has pool\");\n        require(beneficiary != address(0), \"Invalid beneficiary\");\n        require(goalAmount > 0, \"Invalid goal\");\n        require(deadline > block.timestamp, \"Invalid deadline\");\n\n        // Clone the Donation implementation\n        address clone = Clones.clone(donationImplementation);\n\n        // Initialize the clone\n        DonationPool(clone).initialize(\n            msg.sender,\n            circleId,\n            circleName,\n            beneficiary,\n            goalAmount,\n            deadline,\n            tokenAddress,\n            isNativeToken\n        );\n\n        _registerPool(circleId, clone, PoolType.DONATION);\n\n        emit PoolCreated(circleId, clone, msg.sender, PoolType.DONATION);\n        return clone;\n    }\n\n    // ========== Admin Functions ==========\n\n    /**\n     * @notice Updates the ROSCA pool implementation address\n     * @dev Only owner can update. New pools will use the new implementation\n     * @param newImplementation Address of the new ROSCA implementation\n     */\n    function setROSCAImplementation(address newImplementation) external onlyOwner {\n        require(newImplementation != address(0), \"Invalid implementation\");\n        roscaImplementation = newImplementation;\n        emit ImplementationUpdated(\"ROSCA\", newImplementation);\n    }\n\n    /**\n     * @notice Updates the Savings pool implementation address\n     * @dev Only owner can update. New pools will use the new implementation\n     * @param newImplementation Address of the new Savings implementation\n     */\n    function setSavingsImplementation(address newImplementation) external onlyOwner {\n        require(newImplementation != address(0), \"Invalid implementation\");\n        savingsImplementation = newImplementation;\n        emit ImplementationUpdated(\"SAVINGS\", newImplementation);\n    }\n\n    /**\n     * @notice Updates the Donation pool implementation address\n     * @dev Only owner can update. New pools will use the new implementation\n     * @param newImplementation Address of the new Donation implementation\n     */\n    function setDonationImplementation(address newImplementation) external onlyOwner {\n        require(newImplementation != address(0), \"Invalid implementation\");\n        donationImplementation = newImplementation;\n        emit ImplementationUpdated(\"DONATION\", newImplementation);\n    }\n\n    /**\n     * @notice Updates all implementation addresses at once\n     * @dev Only owner can update. Pass address(0) to skip updating a specific implementation\n     * @param _roscaImpl New ROSCA implementation (or address(0) to skip)\n     * @param _savingsImpl New Savings implementation (or address(0) to skip)\n     * @param _donationImpl New Donation implementation (or address(0) to skip)\n     */\n    function setImplementations(\n        address _roscaImpl,\n        address _savingsImpl,\n        address _donationImpl\n    ) external onlyOwner {\n        if (_roscaImpl != address(0)) {\n            roscaImplementation = _roscaImpl;\n            emit ImplementationUpdated(\"ROSCA\", _roscaImpl);\n        }\n        if (_savingsImpl != address(0)) {\n            savingsImplementation = _savingsImpl;\n            emit ImplementationUpdated(\"SAVINGS\", _savingsImpl);\n        }\n        if (_donationImpl != address(0)) {\n            donationImplementation = _donationImpl;\n            emit ImplementationUpdated(\"DONATION\", _donationImpl);\n        }\n    }\n\n    // ========== Internal Functions ==========\n\n    /**\n     * @notice Validates that the circle ID is not the zero address\n     * @dev Circle IDs can reference contracts on other chains (e.g., Lens circles on Polygon)\n     * @param circleId The circle address to validate\n     */\n    function _validateCircleId(address circleId) private pure {\n        require(circleId != address(0), \"Zero address not allowed\");\n    }\n\n    /**\n     * @notice Registers a newly created pool in the factory's tracking systems\n     * @param circleId The circle contract address\n     * @param poolAddress The address of the newly created pool\n     * @param poolType The type of pool (ROSCA, SAVINGS, or DONATION)\n     */\n    function _registerPool(address circleId, address poolAddress, PoolType poolType) private {\n        circleToPool[circleId] = poolAddress;\n        isValidPool[poolAddress] = true;\n        poolTypes[poolAddress] = poolType;\n        allPools.push(poolAddress);\n    }\n\n    // ========== View Functions ==========\n\n    /**\n     * @notice Gets the pool address for a given circle\n     * @param circleId The circle contract address\n     * @return The pool address, or zero address if no pool exists\n     */\n    function getCirclePool(address circleId) external view returns (address) {\n        return circleToPool[circleId];\n    }\n\n    /**\n     * @notice Gets the total number of pools created by this factory\n     * @return The total pool count\n     */\n    function getTotalPools() external view returns (uint256) {\n        return allPools.length;\n    }\n\n    /**\n     * @notice Gets all pool addresses created by this factory\n     * @dev Warning: This can be gas-intensive for large numbers of pools\n     * @return Array of all pool addresses\n     */\n    function getAllPools() external view returns (address[] memory) {\n        return allPools;\n    }\n\n    /**\n     * @notice Gets the pool type for a given pool address\n     * @param poolAddress The pool address to query\n     * @return The PoolType enum value\n     */\n    function getPoolType(address poolAddress) external view returns (PoolType) {\n        require(isValidPool[poolAddress], \"Invalid pool address\");\n        return poolTypes[poolAddress];\n    }\n}\n"
    },
    "contracts/YourContract.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\n// Useful for debugging. Remove when deploying to a live network.\nimport \"hardhat/console.sol\";\n\n// Use openzeppelin to inherit battle-tested implementations (ERC20, ERC721, etc)\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * A smart contract that allows changing a state variable of the contract and tracking the changes\n * It also allows the owner to withdraw the Ether in the contract\n * @author BuidlGuidl\n */\ncontract YourContract {\n    // State Variables\n    address public immutable owner;\n    string public greeting = \"Building Unstoppable Apps!!!\";\n    bool public premium = false;\n    uint256 public totalCounter = 0;\n    mapping(address => uint) public userGreetingCounter;\n\n    // Events: a way to emit log statements from smart contract that can be listened to by external parties\n    event GreetingChange(address indexed greetingSetter, string newGreeting, bool premium, uint256 value);\n\n    // Constructor: Called once on contract deployment\n    // Check packages/hardhat/deploy/00_deploy_your_contract.ts\n    constructor(address _owner) {\n        owner = _owner;\n    }\n\n    // Modifier: used to define a set of rules that must be met before or after a function is executed\n    // Check the withdraw() function\n    modifier isOwner() {\n        // msg.sender: predefined variable that represents address of the account that called the current function\n        require(msg.sender == owner, \"Not the Owner\");\n        _;\n    }\n\n    /**\n     * Function that allows anyone to change the state variable \"greeting\" of the contract and increase the counters\n     *\n     * @param _newGreeting (string memory) - new greeting to save on the contract\n     */\n    function setGreeting(string memory _newGreeting) public payable {\n        // Print data to the hardhat chain console. Remove when deploying to a live network.\n        console.log(\"Setting new greeting '%s' from %s\", _newGreeting, msg.sender);\n\n        // Change state variables\n        greeting = _newGreeting;\n        totalCounter += 1;\n        userGreetingCounter[msg.sender] += 1;\n\n        // msg.value: built-in global variable that represents the amount of ether sent with the transaction\n        if (msg.value > 0) {\n            premium = true;\n        } else {\n            premium = false;\n        }\n\n        // emit: keyword used to trigger an event\n        emit GreetingChange(msg.sender, _newGreeting, msg.value > 0, msg.value);\n    }\n\n    /**\n     * Function that allows the owner to withdraw all the Ether in the contract\n     * The function can only be called by the owner of the contract as defined by the isOwner modifier\n     */\n    function withdraw() public isOwner {\n        (bool success, ) = owner.call{ value: address(this).balance }(\"\");\n        require(success, \"Failed to send Ether\");\n    }\n\n    /**\n     * Function that allows the contract to receive ETH\n     */\n    receive() external payable {}\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS =\n        0x000000000000000000636F6e736F6c652e6c6f67;\n\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            pop(\n                staticcall(\n                    gas(),\n                    consoleAddress,\n                    add(payload, 32),\n                    mload(payload),\n                    0,\n                    0\n                )\n            )\n        }\n    }\n\n    function _castToPure(\n      function(bytes memory) internal view fnIn\n    ) internal pure returns (function(bytes memory) pure fnOut) {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castToPure(_sendLogPayloadImplementation)(payload);\n    }\n\n    function log() internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n\n    function logInt(int256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function logUint(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function logString(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function log(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint256 p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n    }\n\n    function log(uint256 p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n    }\n\n    function log(uint256 p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n    }\n\n    function log(uint256 p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}